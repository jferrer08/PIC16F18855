

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Wed Dec 14 14:04:17 2022

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	pa_nodes0,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 1.41
    20                           ; Generated 25/01/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F18855 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  001C                     	;# 
    76  001C                     	;# 
    77  001D                     	;# 
    78  001D                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  008C                     	;# 
    82  008C                     	;# 
    83  008D                     	;# 
    84  008E                     	;# 
    85  008E                     	;# 
    86  008F                     	;# 
    87  0090                     	;# 
    88  0090                     	;# 
    89  0091                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0095                     	;# 
    93  0096                     	;# 
    94  0097                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009E                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010E                     	;# 
   106  010F                     	;# 
   107  0110                     	;# 
   108  0110                     	;# 
   109  0111                     	;# 
   110  0112                     	;# 
   111  0112                     	;# 
   112  0113                     	;# 
   113  0114                     	;# 
   114  0114                     	;# 
   115  0115                     	;# 
   116  0116                     	;# 
   117  0116                     	;# 
   118  0117                     	;# 
   119  0119                     	;# 
   120  0119                     	;# 
   121  0119                     	;# 
   122  011A                     	;# 
   123  011A                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011B                     	;# 
   127  011B                     	;# 
   128  011B                     	;# 
   129  011B                     	;# 
   130  011C                     	;# 
   131  011C                     	;# 
   132  011C                     	;# 
   133  011D                     	;# 
   134  011D                     	;# 
   135  011D                     	;# 
   136  011E                     	;# 
   137  011E                     	;# 
   138  011E                     	;# 
   139  011F                     	;# 
   140  011F                     	;# 
   141  011F                     	;# 
   142  011F                     	;# 
   143  011F                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  018E                     	;# 
   147  018F                     	;# 
   148  0190                     	;# 
   149  0191                     	;# 
   150  0192                     	;# 
   151  0196                     	;# 
   152  0197                     	;# 
   153  0198                     	;# 
   154  0199                     	;# 
   155  019A                     	;# 
   156  019B                     	;# 
   157  019C                     	;# 
   158  020C                     	;# 
   159  020C                     	;# 
   160  020D                     	;# 
   161  020E                     	;# 
   162  020F                     	;# 
   163  020F                     	;# 
   164  0210                     	;# 
   165  0210                     	;# 
   166  0211                     	;# 
   167  0211                     	;# 
   168  0212                     	;# 
   169  0212                     	;# 
   170  0213                     	;# 
   171  0214                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0216                     	;# 
   175  0216                     	;# 
   176  0217                     	;# 
   177  0217                     	;# 
   178  0218                     	;# 
   179  0218                     	;# 
   180  0219                     	;# 
   181  021A                     	;# 
   182  021B                     	;# 
   183  021B                     	;# 
   184  021C                     	;# 
   185  021C                     	;# 
   186  021D                     	;# 
   187  021D                     	;# 
   188  021E                     	;# 
   189  021F                     	;# 
   190  028C                     	;# 
   191  028C                     	;# 
   192  028D                     	;# 
   193  028D                     	;# 
   194  028E                     	;# 
   195  028F                     	;# 
   196  0290                     	;# 
   197  0290                     	;# 
   198  0291                     	;# 
   199  0292                     	;# 
   200  0292                     	;# 
   201  0293                     	;# 
   202  0293                     	;# 
   203  0294                     	;# 
   204  0295                     	;# 
   205  0296                     	;# 
   206  0296                     	;# 
   207  0297                     	;# 
   208  0298                     	;# 
   209  0298                     	;# 
   210  0299                     	;# 
   211  0299                     	;# 
   212  029A                     	;# 
   213  029B                     	;# 
   214  029C                     	;# 
   215  029C                     	;# 
   216  029D                     	;# 
   217  030C                     	;# 
   218  030C                     	;# 
   219  030D                     	;# 
   220  030E                     	;# 
   221  030F                     	;# 
   222  0310                     	;# 
   223  0310                     	;# 
   224  0311                     	;# 
   225  0312                     	;# 
   226  0313                     	;# 
   227  0314                     	;# 
   228  0314                     	;# 
   229  0315                     	;# 
   230  0316                     	;# 
   231  0317                     	;# 
   232  0318                     	;# 
   233  0318                     	;# 
   234  0319                     	;# 
   235  031A                     	;# 
   236  031B                     	;# 
   237  031C                     	;# 
   238  031C                     	;# 
   239  031D                     	;# 
   240  031E                     	;# 
   241  031F                     	;# 
   242  038C                     	;# 
   243  038D                     	;# 
   244  038E                     	;# 
   245  0390                     	;# 
   246  0391                     	;# 
   247  0392                     	;# 
   248  040C                     	;# 
   249  040D                     	;# 
   250  040E                     	;# 
   251  040F                     	;# 
   252  0410                     	;# 
   253  0411                     	;# 
   254  0416                     	;# 
   255  0416                     	;# 
   256  0417                     	;# 
   257  0418                     	;# 
   258  0418                     	;# 
   259  0419                     	;# 
   260  041A                     	;# 
   261  041A                     	;# 
   262  041B                     	;# 
   263  041C                     	;# 
   264  041C                     	;# 
   265  041D                     	;# 
   266  041E                     	;# 
   267  041F                     	;# 
   268  048C                     	;# 
   269  048C                     	;# 
   270  048D                     	;# 
   271  048E                     	;# 
   272  048F                     	;# 
   273  048F                     	;# 
   274  0490                     	;# 
   275  0491                     	;# 
   276  0492                     	;# 
   277  0492                     	;# 
   278  0493                     	;# 
   279  0494                     	;# 
   280  0495                     	;# 
   281  0495                     	;# 
   282  0496                     	;# 
   283  0497                     	;# 
   284  0498                     	;# 
   285  0499                     	;# 
   286  049A                     	;# 
   287  049B                     	;# 
   288  049C                     	;# 
   289  049D                     	;# 
   290  050C                     	;# 
   291  050C                     	;# 
   292  050D                     	;# 
   293  050E                     	;# 
   294  050F                     	;# 
   295  050F                     	;# 
   296  0510                     	;# 
   297  0511                     	;# 
   298  0512                     	;# 
   299  0512                     	;# 
   300  0513                     	;# 
   301  0514                     	;# 
   302  0515                     	;# 
   303  0515                     	;# 
   304  0516                     	;# 
   305  0517                     	;# 
   306  0518                     	;# 
   307  0519                     	;# 
   308  051A                     	;# 
   309  051B                     	;# 
   310  051C                     	;# 
   311  051D                     	;# 
   312  058C                     	;# 
   313  058C                     	;# 
   314  058D                     	;# 
   315  058E                     	;# 
   316  058F                     	;# 
   317  058F                     	;# 
   318  0590                     	;# 
   319  0591                     	;# 
   320  0592                     	;# 
   321  0593                     	;# 
   322  060C                     	;# 
   323  060D                     	;# 
   324  060E                     	;# 
   325  060F                     	;# 
   326  0610                     	;# 
   327  0611                     	;# 
   328  0612                     	;# 
   329  0613                     	;# 
   330  0614                     	;# 
   331  0616                     	;# 
   332  0617                     	;# 
   333  0618                     	;# 
   334  0619                     	;# 
   335  061A                     	;# 
   336  061B                     	;# 
   337  061C                     	;# 
   338  061D                     	;# 
   339  061E                     	;# 
   340  068C                     	;# 
   341  068D                     	;# 
   342  068E                     	;# 
   343  068F                     	;# 
   344  0690                     	;# 
   345  0691                     	;# 
   346  0692                     	;# 
   347  0693                     	;# 
   348  0694                     	;# 
   349  070C                     	;# 
   350  070D                     	;# 
   351  070E                     	;# 
   352  070F                     	;# 
   353  0710                     	;# 
   354  0711                     	;# 
   355  0712                     	;# 
   356  0713                     	;# 
   357  0714                     	;# 
   358  0716                     	;# 
   359  0717                     	;# 
   360  0718                     	;# 
   361  0719                     	;# 
   362  071A                     	;# 
   363  071B                     	;# 
   364  071C                     	;# 
   365  071D                     	;# 
   366  071E                     	;# 
   367  0796                     	;# 
   368  0797                     	;# 
   369  0798                     	;# 
   370  0799                     	;# 
   371  079A                     	;# 
   372  079B                     	;# 
   373  080C                     	;# 
   374  080D                     	;# 
   375  080E                     	;# 
   376  080F                     	;# 
   377  0810                     	;# 
   378  0811                     	;# 
   379  0812                     	;# 
   380  0813                     	;# 
   381  0814                     	;# 
   382  081A                     	;# 
   383  081B                     	;# 
   384  081C                     	;# 
   385  081D                     	;# 
   386  081E                     	;# 
   387  081F                     	;# 
   388  088C                     	;# 
   389  088D                     	;# 
   390  088E                     	;# 
   391  088F                     	;# 
   392  0890                     	;# 
   393  0891                     	;# 
   394  0892                     	;# 
   395  0893                     	;# 
   396  0895                     	;# 
   397  0896                     	;# 
   398  0897                     	;# 
   399  0898                     	;# 
   400  0899                     	;# 
   401  089A                     	;# 
   402  089B                     	;# 
   403  090C                     	;# 
   404  090E                     	;# 
   405  090F                     	;# 
   406  091F                     	;# 
   407  091F                     	;# 
   408  098F                     	;# 
   409  098F                     	;# 
   410  0990                     	;# 
   411  0991                     	;# 
   412  0992                     	;# 
   413  0993                     	;# 
   414  0994                     	;# 
   415  0995                     	;# 
   416  0996                     	;# 
   417  0997                     	;# 
   418  0E0F                     	;# 
   419  0E10                     	;# 
   420  0E11                     	;# 
   421  0E12                     	;# 
   422  0E13                     	;# 
   423  0E14                     	;# 
   424  0E15                     	;# 
   425  0E16                     	;# 
   426  0E17                     	;# 
   427  0E18                     	;# 
   428  0E19                     	;# 
   429  0E1A                     	;# 
   430  0E1B                     	;# 
   431  0E1C                     	;# 
   432  0E1D                     	;# 
   433  0E1E                     	;# 
   434  0E1F                     	;# 
   435  0E20                     	;# 
   436  0E21                     	;# 
   437  0E22                     	;# 
   438  0E23                     	;# 
   439  0E24                     	;# 
   440  0E25                     	;# 
   441  0E26                     	;# 
   442  0E27                     	;# 
   443  0E28                     	;# 
   444  0E29                     	;# 
   445  0E2A                     	;# 
   446  0E2B                     	;# 
   447  0E2C                     	;# 
   448  0E2D                     	;# 
   449  0E2E                     	;# 
   450  0E2F                     	;# 
   451  0E30                     	;# 
   452  0E31                     	;# 
   453  0E32                     	;# 
   454  0E33                     	;# 
   455  0E34                     	;# 
   456  0E35                     	;# 
   457  0E36                     	;# 
   458  0E37                     	;# 
   459  0E8F                     	;# 
   460  0E90                     	;# 
   461  0E91                     	;# 
   462  0E92                     	;# 
   463  0E93                     	;# 
   464  0E94                     	;# 
   465  0E95                     	;# 
   466  0E96                     	;# 
   467  0E97                     	;# 
   468  0E9C                     	;# 
   469  0E9D                     	;# 
   470  0E9E                     	;# 
   471  0EA1                     	;# 
   472  0EA2                     	;# 
   473  0EA3                     	;# 
   474  0EA4                     	;# 
   475  0EA5                     	;# 
   476  0EA9                     	;# 
   477  0EAA                     	;# 
   478  0EAB                     	;# 
   479  0EAC                     	;# 
   480  0EB1                     	;# 
   481  0EB2                     	;# 
   482  0EB3                     	;# 
   483  0EB8                     	;# 
   484  0EB9                     	;# 
   485  0EBA                     	;# 
   486  0EBB                     	;# 
   487  0EBC                     	;# 
   488  0EBD                     	;# 
   489  0EBE                     	;# 
   490  0EC3                     	;# 
   491  0EC5                     	;# 
   492  0EC6                     	;# 
   493  0EC7                     	;# 
   494  0EC8                     	;# 
   495  0EC9                     	;# 
   496  0ECA                     	;# 
   497  0ECB                     	;# 
   498  0ECC                     	;# 
   499  0F10                     	;# 
   500  0F11                     	;# 
   501  0F12                     	;# 
   502  0F13                     	;# 
   503  0F14                     	;# 
   504  0F15                     	;# 
   505  0F16                     	;# 
   506  0F17                     	;# 
   507  0F18                     	;# 
   508  0F19                     	;# 
   509  0F1A                     	;# 
   510  0F1B                     	;# 
   511  0F1C                     	;# 
   512  0F1D                     	;# 
   513  0F1E                     	;# 
   514  0F1F                     	;# 
   515  0F20                     	;# 
   516  0F21                     	;# 
   517  0F22                     	;# 
   518  0F23                     	;# 
   519  0F24                     	;# 
   520  0F25                     	;# 
   521  0F26                     	;# 
   522  0F27                     	;# 
   523  0F38                     	;# 
   524  0F39                     	;# 
   525  0F3A                     	;# 
   526  0F3B                     	;# 
   527  0F3C                     	;# 
   528  0F3D                     	;# 
   529  0F3E                     	;# 
   530  0F3F                     	;# 
   531  0F40                     	;# 
   532  0F41                     	;# 
   533  0F43                     	;# 
   534  0F44                     	;# 
   535  0F45                     	;# 
   536  0F46                     	;# 
   537  0F47                     	;# 
   538  0F48                     	;# 
   539  0F49                     	;# 
   540  0F4A                     	;# 
   541  0F4B                     	;# 
   542  0F4C                     	;# 
   543  0F4E                     	;# 
   544  0F4F                     	;# 
   545  0F50                     	;# 
   546  0F51                     	;# 
   547  0F52                     	;# 
   548  0F53                     	;# 
   549  0F54                     	;# 
   550  0F55                     	;# 
   551  0F56                     	;# 
   552  0F57                     	;# 
   553  0F65                     	;# 
   554  0F68                     	;# 
   555  0F69                     	;# 
   556  0F6A                     	;# 
   557  0F6B                     	;# 
   558  0FE4                     	;# 
   559  0FE5                     	;# 
   560  0FE6                     	;# 
   561  0FE7                     	;# 
   562  0FE8                     	;# 
   563  0FE9                     	;# 
   564  0FEA                     	;# 
   565  0FEB                     	;# 
   566  0FED                     	;# 
   567  0FEE                     	;# 
   568  0FEF                     	;# 
   569  0000                     	;# 
   570  0001                     	;# 
   571  0002                     	;# 
   572  0003                     	;# 
   573  0004                     	;# 
   574  0005                     	;# 
   575  0006                     	;# 
   576  0007                     	;# 
   577  0008                     	;# 
   578  0009                     	;# 
   579  000A                     	;# 
   580  000B                     	;# 
   581  000C                     	;# 
   582  000D                     	;# 
   583  000E                     	;# 
   584  0010                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  001C                     	;# 
   592  001C                     	;# 
   593  001D                     	;# 
   594  001D                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  008C                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  008E                     	;# 
   601  008E                     	;# 
   602  008F                     	;# 
   603  0090                     	;# 
   604  0090                     	;# 
   605  0091                     	;# 
   606  0093                     	;# 
   607  0094                     	;# 
   608  0095                     	;# 
   609  0096                     	;# 
   610  0097                     	;# 
   611  0098                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009C                     	;# 
   616  009D                     	;# 
   617  009E                     	;# 
   618  010C                     	;# 
   619  010D                     	;# 
   620  010E                     	;# 
   621  010E                     	;# 
   622  010F                     	;# 
   623  0110                     	;# 
   624  0110                     	;# 
   625  0111                     	;# 
   626  0112                     	;# 
   627  0112                     	;# 
   628  0113                     	;# 
   629  0114                     	;# 
   630  0114                     	;# 
   631  0115                     	;# 
   632  0116                     	;# 
   633  0116                     	;# 
   634  0117                     	;# 
   635  0119                     	;# 
   636  0119                     	;# 
   637  0119                     	;# 
   638  011A                     	;# 
   639  011A                     	;# 
   640  011A                     	;# 
   641  011B                     	;# 
   642  011B                     	;# 
   643  011B                     	;# 
   644  011B                     	;# 
   645  011B                     	;# 
   646  011C                     	;# 
   647  011C                     	;# 
   648  011C                     	;# 
   649  011D                     	;# 
   650  011D                     	;# 
   651  011D                     	;# 
   652  011E                     	;# 
   653  011E                     	;# 
   654  011E                     	;# 
   655  011F                     	;# 
   656  011F                     	;# 
   657  011F                     	;# 
   658  011F                     	;# 
   659  011F                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  018F                     	;# 
   664  0190                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0196                     	;# 
   668  0197                     	;# 
   669  0198                     	;# 
   670  0199                     	;# 
   671  019A                     	;# 
   672  019B                     	;# 
   673  019C                     	;# 
   674  020C                     	;# 
   675  020C                     	;# 
   676  020D                     	;# 
   677  020E                     	;# 
   678  020F                     	;# 
   679  020F                     	;# 
   680  0210                     	;# 
   681  0210                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0214                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0216                     	;# 
   691  0216                     	;# 
   692  0217                     	;# 
   693  0217                     	;# 
   694  0218                     	;# 
   695  0218                     	;# 
   696  0219                     	;# 
   697  021A                     	;# 
   698  021B                     	;# 
   699  021B                     	;# 
   700  021C                     	;# 
   701  021C                     	;# 
   702  021D                     	;# 
   703  021D                     	;# 
   704  021E                     	;# 
   705  021F                     	;# 
   706  028C                     	;# 
   707  028C                     	;# 
   708  028D                     	;# 
   709  028D                     	;# 
   710  028E                     	;# 
   711  028F                     	;# 
   712  0290                     	;# 
   713  0290                     	;# 
   714  0291                     	;# 
   715  0292                     	;# 
   716  0292                     	;# 
   717  0293                     	;# 
   718  0293                     	;# 
   719  0294                     	;# 
   720  0295                     	;# 
   721  0296                     	;# 
   722  0296                     	;# 
   723  0297                     	;# 
   724  0298                     	;# 
   725  0298                     	;# 
   726  0299                     	;# 
   727  0299                     	;# 
   728  029A                     	;# 
   729  029B                     	;# 
   730  029C                     	;# 
   731  029C                     	;# 
   732  029D                     	;# 
   733  030C                     	;# 
   734  030C                     	;# 
   735  030D                     	;# 
   736  030E                     	;# 
   737  030F                     	;# 
   738  0310                     	;# 
   739  0310                     	;# 
   740  0311                     	;# 
   741  0312                     	;# 
   742  0313                     	;# 
   743  0314                     	;# 
   744  0314                     	;# 
   745  0315                     	;# 
   746  0316                     	;# 
   747  0317                     	;# 
   748  0318                     	;# 
   749  0318                     	;# 
   750  0319                     	;# 
   751  031A                     	;# 
   752  031B                     	;# 
   753  031C                     	;# 
   754  031C                     	;# 
   755  031D                     	;# 
   756  031E                     	;# 
   757  031F                     	;# 
   758  038C                     	;# 
   759  038D                     	;# 
   760  038E                     	;# 
   761  0390                     	;# 
   762  0391                     	;# 
   763  0392                     	;# 
   764  040C                     	;# 
   765  040D                     	;# 
   766  040E                     	;# 
   767  040F                     	;# 
   768  0410                     	;# 
   769  0411                     	;# 
   770  0416                     	;# 
   771  0416                     	;# 
   772  0417                     	;# 
   773  0418                     	;# 
   774  0418                     	;# 
   775  0419                     	;# 
   776  041A                     	;# 
   777  041A                     	;# 
   778  041B                     	;# 
   779  041C                     	;# 
   780  041C                     	;# 
   781  041D                     	;# 
   782  041E                     	;# 
   783  041F                     	;# 
   784  048C                     	;# 
   785  048C                     	;# 
   786  048D                     	;# 
   787  048E                     	;# 
   788  048F                     	;# 
   789  048F                     	;# 
   790  0490                     	;# 
   791  0491                     	;# 
   792  0492                     	;# 
   793  0492                     	;# 
   794  0493                     	;# 
   795  0494                     	;# 
   796  0495                     	;# 
   797  0495                     	;# 
   798  0496                     	;# 
   799  0497                     	;# 
   800  0498                     	;# 
   801  0499                     	;# 
   802  049A                     	;# 
   803  049B                     	;# 
   804  049C                     	;# 
   805  049D                     	;# 
   806  050C                     	;# 
   807  050C                     	;# 
   808  050D                     	;# 
   809  050E                     	;# 
   810  050F                     	;# 
   811  050F                     	;# 
   812  0510                     	;# 
   813  0511                     	;# 
   814  0512                     	;# 
   815  0512                     	;# 
   816  0513                     	;# 
   817  0514                     	;# 
   818  0515                     	;# 
   819  0515                     	;# 
   820  0516                     	;# 
   821  0517                     	;# 
   822  0518                     	;# 
   823  0519                     	;# 
   824  051A                     	;# 
   825  051B                     	;# 
   826  051C                     	;# 
   827  051D                     	;# 
   828  058C                     	;# 
   829  058C                     	;# 
   830  058D                     	;# 
   831  058E                     	;# 
   832  058F                     	;# 
   833  058F                     	;# 
   834  0590                     	;# 
   835  0591                     	;# 
   836  0592                     	;# 
   837  0593                     	;# 
   838  060C                     	;# 
   839  060D                     	;# 
   840  060E                     	;# 
   841  060F                     	;# 
   842  0610                     	;# 
   843  0611                     	;# 
   844  0612                     	;# 
   845  0613                     	;# 
   846  0614                     	;# 
   847  0616                     	;# 
   848  0617                     	;# 
   849  0618                     	;# 
   850  0619                     	;# 
   851  061A                     	;# 
   852  061B                     	;# 
   853  061C                     	;# 
   854  061D                     	;# 
   855  061E                     	;# 
   856  068C                     	;# 
   857  068D                     	;# 
   858  068E                     	;# 
   859  068F                     	;# 
   860  0690                     	;# 
   861  0691                     	;# 
   862  0692                     	;# 
   863  0693                     	;# 
   864  0694                     	;# 
   865  070C                     	;# 
   866  070D                     	;# 
   867  070E                     	;# 
   868  070F                     	;# 
   869  0710                     	;# 
   870  0711                     	;# 
   871  0712                     	;# 
   872  0713                     	;# 
   873  0714                     	;# 
   874  0716                     	;# 
   875  0717                     	;# 
   876  0718                     	;# 
   877  0719                     	;# 
   878  071A                     	;# 
   879  071B                     	;# 
   880  071C                     	;# 
   881  071D                     	;# 
   882  071E                     	;# 
   883  0796                     	;# 
   884  0797                     	;# 
   885  0798                     	;# 
   886  0799                     	;# 
   887  079A                     	;# 
   888  079B                     	;# 
   889  080C                     	;# 
   890  080D                     	;# 
   891  080E                     	;# 
   892  080F                     	;# 
   893  0810                     	;# 
   894  0811                     	;# 
   895  0812                     	;# 
   896  0813                     	;# 
   897  0814                     	;# 
   898  081A                     	;# 
   899  081B                     	;# 
   900  081C                     	;# 
   901  081D                     	;# 
   902  081E                     	;# 
   903  081F                     	;# 
   904  088C                     	;# 
   905  088D                     	;# 
   906  088E                     	;# 
   907  088F                     	;# 
   908  0890                     	;# 
   909  0891                     	;# 
   910  0892                     	;# 
   911  0893                     	;# 
   912  0895                     	;# 
   913  0896                     	;# 
   914  0897                     	;# 
   915  0898                     	;# 
   916  0899                     	;# 
   917  089A                     	;# 
   918  089B                     	;# 
   919  090C                     	;# 
   920  090E                     	;# 
   921  090F                     	;# 
   922  091F                     	;# 
   923  091F                     	;# 
   924  098F                     	;# 
   925  098F                     	;# 
   926  0990                     	;# 
   927  0991                     	;# 
   928  0992                     	;# 
   929  0993                     	;# 
   930  0994                     	;# 
   931  0995                     	;# 
   932  0996                     	;# 
   933  0997                     	;# 
   934  0E0F                     	;# 
   935  0E10                     	;# 
   936  0E11                     	;# 
   937  0E12                     	;# 
   938  0E13                     	;# 
   939  0E14                     	;# 
   940  0E15                     	;# 
   941  0E16                     	;# 
   942  0E17                     	;# 
   943  0E18                     	;# 
   944  0E19                     	;# 
   945  0E1A                     	;# 
   946  0E1B                     	;# 
   947  0E1C                     	;# 
   948  0E1D                     	;# 
   949  0E1E                     	;# 
   950  0E1F                     	;# 
   951  0E20                     	;# 
   952  0E21                     	;# 
   953  0E22                     	;# 
   954  0E23                     	;# 
   955  0E24                     	;# 
   956  0E25                     	;# 
   957  0E26                     	;# 
   958  0E27                     	;# 
   959  0E28                     	;# 
   960  0E29                     	;# 
   961  0E2A                     	;# 
   962  0E2B                     	;# 
   963  0E2C                     	;# 
   964  0E2D                     	;# 
   965  0E2E                     	;# 
   966  0E2F                     	;# 
   967  0E30                     	;# 
   968  0E31                     	;# 
   969  0E32                     	;# 
   970  0E33                     	;# 
   971  0E34                     	;# 
   972  0E35                     	;# 
   973  0E36                     	;# 
   974  0E37                     	;# 
   975  0E8F                     	;# 
   976  0E90                     	;# 
   977  0E91                     	;# 
   978  0E92                     	;# 
   979  0E93                     	;# 
   980  0E94                     	;# 
   981  0E95                     	;# 
   982  0E96                     	;# 
   983  0E97                     	;# 
   984  0E9C                     	;# 
   985  0E9D                     	;# 
   986  0E9E                     	;# 
   987  0EA1                     	;# 
   988  0EA2                     	;# 
   989  0EA3                     	;# 
   990  0EA4                     	;# 
   991  0EA5                     	;# 
   992  0EA9                     	;# 
   993  0EAA                     	;# 
   994  0EAB                     	;# 
   995  0EAC                     	;# 
   996  0EB1                     	;# 
   997  0EB2                     	;# 
   998  0EB3                     	;# 
   999  0EB8                     	;# 
  1000  0EB9                     	;# 
  1001  0EBA                     	;# 
  1002  0EBB                     	;# 
  1003  0EBC                     	;# 
  1004  0EBD                     	;# 
  1005  0EBE                     	;# 
  1006  0EC3                     	;# 
  1007  0EC5                     	;# 
  1008  0EC6                     	;# 
  1009  0EC7                     	;# 
  1010  0EC8                     	;# 
  1011  0EC9                     	;# 
  1012  0ECA                     	;# 
  1013  0ECB                     	;# 
  1014  0ECC                     	;# 
  1015  0F10                     	;# 
  1016  0F11                     	;# 
  1017  0F12                     	;# 
  1018  0F13                     	;# 
  1019  0F14                     	;# 
  1020  0F15                     	;# 
  1021  0F16                     	;# 
  1022  0F17                     	;# 
  1023  0F18                     	;# 
  1024  0F19                     	;# 
  1025  0F1A                     	;# 
  1026  0F1B                     	;# 
  1027  0F1C                     	;# 
  1028  0F1D                     	;# 
  1029  0F1E                     	;# 
  1030  0F1F                     	;# 
  1031  0F20                     	;# 
  1032  0F21                     	;# 
  1033  0F22                     	;# 
  1034  0F23                     	;# 
  1035  0F24                     	;# 
  1036  0F25                     	;# 
  1037  0F26                     	;# 
  1038  0F27                     	;# 
  1039  0F38                     	;# 
  1040  0F39                     	;# 
  1041  0F3A                     	;# 
  1042  0F3B                     	;# 
  1043  0F3C                     	;# 
  1044  0F3D                     	;# 
  1045  0F3E                     	;# 
  1046  0F3F                     	;# 
  1047  0F40                     	;# 
  1048  0F41                     	;# 
  1049  0F43                     	;# 
  1050  0F44                     	;# 
  1051  0F45                     	;# 
  1052  0F46                     	;# 
  1053  0F47                     	;# 
  1054  0F48                     	;# 
  1055  0F49                     	;# 
  1056  0F4A                     	;# 
  1057  0F4B                     	;# 
  1058  0F4C                     	;# 
  1059  0F4E                     	;# 
  1060  0F4F                     	;# 
  1061  0F50                     	;# 
  1062  0F51                     	;# 
  1063  0F52                     	;# 
  1064  0F53                     	;# 
  1065  0F54                     	;# 
  1066  0F55                     	;# 
  1067  0F56                     	;# 
  1068  0F57                     	;# 
  1069  0F65                     	;# 
  1070  0F68                     	;# 
  1071  0F69                     	;# 
  1072  0F6A                     	;# 
  1073  0F6B                     	;# 
  1074  0FE4                     	;# 
  1075  0FE5                     	;# 
  1076  0FE6                     	;# 
  1077  0FE7                     	;# 
  1078  0FE8                     	;# 
  1079  0FE9                     	;# 
  1080  0FEA                     	;# 
  1081  0FEB                     	;# 
  1082  0FED                     	;# 
  1083  0FEE                     	;# 
  1084  0FEF                     	;# 
  1085  0000                     	;# 
  1086  0001                     	;# 
  1087  0002                     	;# 
  1088  0003                     	;# 
  1089  0004                     	;# 
  1090  0005                     	;# 
  1091  0006                     	;# 
  1092  0007                     	;# 
  1093  0008                     	;# 
  1094  0009                     	;# 
  1095  000A                     	;# 
  1096  000B                     	;# 
  1097  000C                     	;# 
  1098  000D                     	;# 
  1099  000E                     	;# 
  1100  0010                     	;# 
  1101  0011                     	;# 
  1102  0012                     	;# 
  1103  0013                     	;# 
  1104  0016                     	;# 
  1105  0017                     	;# 
  1106  0018                     	;# 
  1107  001C                     	;# 
  1108  001C                     	;# 
  1109  001D                     	;# 
  1110  001D                     	;# 
  1111  001E                     	;# 
  1112  001F                     	;# 
  1113  008C                     	;# 
  1114  008C                     	;# 
  1115  008D                     	;# 
  1116  008E                     	;# 
  1117  008E                     	;# 
  1118  008F                     	;# 
  1119  0090                     	;# 
  1120  0090                     	;# 
  1121  0091                     	;# 
  1122  0093                     	;# 
  1123  0094                     	;# 
  1124  0095                     	;# 
  1125  0096                     	;# 
  1126  0097                     	;# 
  1127  0098                     	;# 
  1128  0099                     	;# 
  1129  009A                     	;# 
  1130  009B                     	;# 
  1131  009C                     	;# 
  1132  009D                     	;# 
  1133  009E                     	;# 
  1134  010C                     	;# 
  1135  010D                     	;# 
  1136  010E                     	;# 
  1137  010E                     	;# 
  1138  010F                     	;# 
  1139  0110                     	;# 
  1140  0110                     	;# 
  1141  0111                     	;# 
  1142  0112                     	;# 
  1143  0112                     	;# 
  1144  0113                     	;# 
  1145  0114                     	;# 
  1146  0114                     	;# 
  1147  0115                     	;# 
  1148  0116                     	;# 
  1149  0116                     	;# 
  1150  0117                     	;# 
  1151  0119                     	;# 
  1152  0119                     	;# 
  1153  0119                     	;# 
  1154  011A                     	;# 
  1155  011A                     	;# 
  1156  011A                     	;# 
  1157  011B                     	;# 
  1158  011B                     	;# 
  1159  011B                     	;# 
  1160  011B                     	;# 
  1161  011B                     	;# 
  1162  011C                     	;# 
  1163  011C                     	;# 
  1164  011C                     	;# 
  1165  011D                     	;# 
  1166  011D                     	;# 
  1167  011D                     	;# 
  1168  011E                     	;# 
  1169  011E                     	;# 
  1170  011E                     	;# 
  1171  011F                     	;# 
  1172  011F                     	;# 
  1173  011F                     	;# 
  1174  011F                     	;# 
  1175  011F                     	;# 
  1176  018C                     	;# 
  1177  018D                     	;# 
  1178  018E                     	;# 
  1179  018F                     	;# 
  1180  0190                     	;# 
  1181  0191                     	;# 
  1182  0192                     	;# 
  1183  0196                     	;# 
  1184  0197                     	;# 
  1185  0198                     	;# 
  1186  0199                     	;# 
  1187  019A                     	;# 
  1188  019B                     	;# 
  1189  019C                     	;# 
  1190  020C                     	;# 
  1191  020C                     	;# 
  1192  020D                     	;# 
  1193  020E                     	;# 
  1194  020F                     	;# 
  1195  020F                     	;# 
  1196  0210                     	;# 
  1197  0210                     	;# 
  1198  0211                     	;# 
  1199  0211                     	;# 
  1200  0212                     	;# 
  1201  0212                     	;# 
  1202  0213                     	;# 
  1203  0214                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0218                     	;# 
  1211  0218                     	;# 
  1212  0219                     	;# 
  1213  021A                     	;# 
  1214  021B                     	;# 
  1215  021B                     	;# 
  1216  021C                     	;# 
  1217  021C                     	;# 
  1218  021D                     	;# 
  1219  021D                     	;# 
  1220  021E                     	;# 
  1221  021F                     	;# 
  1222  028C                     	;# 
  1223  028C                     	;# 
  1224  028D                     	;# 
  1225  028D                     	;# 
  1226  028E                     	;# 
  1227  028F                     	;# 
  1228  0290                     	;# 
  1229  0290                     	;# 
  1230  0291                     	;# 
  1231  0292                     	;# 
  1232  0292                     	;# 
  1233  0293                     	;# 
  1234  0293                     	;# 
  1235  0294                     	;# 
  1236  0295                     	;# 
  1237  0296                     	;# 
  1238  0296                     	;# 
  1239  0297                     	;# 
  1240  0298                     	;# 
  1241  0298                     	;# 
  1242  0299                     	;# 
  1243  0299                     	;# 
  1244  029A                     	;# 
  1245  029B                     	;# 
  1246  029C                     	;# 
  1247  029C                     	;# 
  1248  029D                     	;# 
  1249  030C                     	;# 
  1250  030C                     	;# 
  1251  030D                     	;# 
  1252  030E                     	;# 
  1253  030F                     	;# 
  1254  0310                     	;# 
  1255  0310                     	;# 
  1256  0311                     	;# 
  1257  0312                     	;# 
  1258  0313                     	;# 
  1259  0314                     	;# 
  1260  0314                     	;# 
  1261  0315                     	;# 
  1262  0316                     	;# 
  1263  0317                     	;# 
  1264  0318                     	;# 
  1265  0318                     	;# 
  1266  0319                     	;# 
  1267  031A                     	;# 
  1268  031B                     	;# 
  1269  031C                     	;# 
  1270  031C                     	;# 
  1271  031D                     	;# 
  1272  031E                     	;# 
  1273  031F                     	;# 
  1274  038C                     	;# 
  1275  038D                     	;# 
  1276  038E                     	;# 
  1277  0390                     	;# 
  1278  0391                     	;# 
  1279  0392                     	;# 
  1280  040C                     	;# 
  1281  040D                     	;# 
  1282  040E                     	;# 
  1283  040F                     	;# 
  1284  0410                     	;# 
  1285  0411                     	;# 
  1286  0416                     	;# 
  1287  0416                     	;# 
  1288  0417                     	;# 
  1289  0418                     	;# 
  1290  0418                     	;# 
  1291  0419                     	;# 
  1292  041A                     	;# 
  1293  041A                     	;# 
  1294  041B                     	;# 
  1295  041C                     	;# 
  1296  041C                     	;# 
  1297  041D                     	;# 
  1298  041E                     	;# 
  1299  041F                     	;# 
  1300  048C                     	;# 
  1301  048C                     	;# 
  1302  048D                     	;# 
  1303  048E                     	;# 
  1304  048F                     	;# 
  1305  048F                     	;# 
  1306  0490                     	;# 
  1307  0491                     	;# 
  1308  0492                     	;# 
  1309  0492                     	;# 
  1310  0493                     	;# 
  1311  0494                     	;# 
  1312  0495                     	;# 
  1313  0495                     	;# 
  1314  0496                     	;# 
  1315  0497                     	;# 
  1316  0498                     	;# 
  1317  0499                     	;# 
  1318  049A                     	;# 
  1319  049B                     	;# 
  1320  049C                     	;# 
  1321  049D                     	;# 
  1322  050C                     	;# 
  1323  050C                     	;# 
  1324  050D                     	;# 
  1325  050E                     	;# 
  1326  050F                     	;# 
  1327  050F                     	;# 
  1328  0510                     	;# 
  1329  0511                     	;# 
  1330  0512                     	;# 
  1331  0512                     	;# 
  1332  0513                     	;# 
  1333  0514                     	;# 
  1334  0515                     	;# 
  1335  0515                     	;# 
  1336  0516                     	;# 
  1337  0517                     	;# 
  1338  0518                     	;# 
  1339  0519                     	;# 
  1340  051A                     	;# 
  1341  051B                     	;# 
  1342  051C                     	;# 
  1343  051D                     	;# 
  1344  058C                     	;# 
  1345  058C                     	;# 
  1346  058D                     	;# 
  1347  058E                     	;# 
  1348  058F                     	;# 
  1349  058F                     	;# 
  1350  0590                     	;# 
  1351  0591                     	;# 
  1352  0592                     	;# 
  1353  0593                     	;# 
  1354  060C                     	;# 
  1355  060D                     	;# 
  1356  060E                     	;# 
  1357  060F                     	;# 
  1358  0610                     	;# 
  1359  0611                     	;# 
  1360  0612                     	;# 
  1361  0613                     	;# 
  1362  0614                     	;# 
  1363  0616                     	;# 
  1364  0617                     	;# 
  1365  0618                     	;# 
  1366  0619                     	;# 
  1367  061A                     	;# 
  1368  061B                     	;# 
  1369  061C                     	;# 
  1370  061D                     	;# 
  1371  061E                     	;# 
  1372  068C                     	;# 
  1373  068D                     	;# 
  1374  068E                     	;# 
  1375  068F                     	;# 
  1376  0690                     	;# 
  1377  0691                     	;# 
  1378  0692                     	;# 
  1379  0693                     	;# 
  1380  0694                     	;# 
  1381  070C                     	;# 
  1382  070D                     	;# 
  1383  070E                     	;# 
  1384  070F                     	;# 
  1385  0710                     	;# 
  1386  0711                     	;# 
  1387  0712                     	;# 
  1388  0713                     	;# 
  1389  0714                     	;# 
  1390  0716                     	;# 
  1391  0717                     	;# 
  1392  0718                     	;# 
  1393  0719                     	;# 
  1394  071A                     	;# 
  1395  071B                     	;# 
  1396  071C                     	;# 
  1397  071D                     	;# 
  1398  071E                     	;# 
  1399  0796                     	;# 
  1400  0797                     	;# 
  1401  0798                     	;# 
  1402  0799                     	;# 
  1403  079A                     	;# 
  1404  079B                     	;# 
  1405  080C                     	;# 
  1406  080D                     	;# 
  1407  080E                     	;# 
  1408  080F                     	;# 
  1409  0810                     	;# 
  1410  0811                     	;# 
  1411  0812                     	;# 
  1412  0813                     	;# 
  1413  0814                     	;# 
  1414  081A                     	;# 
  1415  081B                     	;# 
  1416  081C                     	;# 
  1417  081D                     	;# 
  1418  081E                     	;# 
  1419  081F                     	;# 
  1420  088C                     	;# 
  1421  088D                     	;# 
  1422  088E                     	;# 
  1423  088F                     	;# 
  1424  0890                     	;# 
  1425  0891                     	;# 
  1426  0892                     	;# 
  1427  0893                     	;# 
  1428  0895                     	;# 
  1429  0896                     	;# 
  1430  0897                     	;# 
  1431  0898                     	;# 
  1432  0899                     	;# 
  1433  089A                     	;# 
  1434  089B                     	;# 
  1435  090C                     	;# 
  1436  090E                     	;# 
  1437  090F                     	;# 
  1438  091F                     	;# 
  1439  091F                     	;# 
  1440  098F                     	;# 
  1441  098F                     	;# 
  1442  0990                     	;# 
  1443  0991                     	;# 
  1444  0992                     	;# 
  1445  0993                     	;# 
  1446  0994                     	;# 
  1447  0995                     	;# 
  1448  0996                     	;# 
  1449  0997                     	;# 
  1450  0E0F                     	;# 
  1451  0E10                     	;# 
  1452  0E11                     	;# 
  1453  0E12                     	;# 
  1454  0E13                     	;# 
  1455  0E14                     	;# 
  1456  0E15                     	;# 
  1457  0E16                     	;# 
  1458  0E17                     	;# 
  1459  0E18                     	;# 
  1460  0E19                     	;# 
  1461  0E1A                     	;# 
  1462  0E1B                     	;# 
  1463  0E1C                     	;# 
  1464  0E1D                     	;# 
  1465  0E1E                     	;# 
  1466  0E1F                     	;# 
  1467  0E20                     	;# 
  1468  0E21                     	;# 
  1469  0E22                     	;# 
  1470  0E23                     	;# 
  1471  0E24                     	;# 
  1472  0E25                     	;# 
  1473  0E26                     	;# 
  1474  0E27                     	;# 
  1475  0E28                     	;# 
  1476  0E29                     	;# 
  1477  0E2A                     	;# 
  1478  0E2B                     	;# 
  1479  0E2C                     	;# 
  1480  0E2D                     	;# 
  1481  0E2E                     	;# 
  1482  0E2F                     	;# 
  1483  0E30                     	;# 
  1484  0E31                     	;# 
  1485  0E32                     	;# 
  1486  0E33                     	;# 
  1487  0E34                     	;# 
  1488  0E35                     	;# 
  1489  0E36                     	;# 
  1490  0E37                     	;# 
  1491  0E8F                     	;# 
  1492  0E90                     	;# 
  1493  0E91                     	;# 
  1494  0E92                     	;# 
  1495  0E93                     	;# 
  1496  0E94                     	;# 
  1497  0E95                     	;# 
  1498  0E96                     	;# 
  1499  0E97                     	;# 
  1500  0E9C                     	;# 
  1501  0E9D                     	;# 
  1502  0E9E                     	;# 
  1503  0EA1                     	;# 
  1504  0EA2                     	;# 
  1505  0EA3                     	;# 
  1506  0EA4                     	;# 
  1507  0EA5                     	;# 
  1508  0EA9                     	;# 
  1509  0EAA                     	;# 
  1510  0EAB                     	;# 
  1511  0EAC                     	;# 
  1512  0EB1                     	;# 
  1513  0EB2                     	;# 
  1514  0EB3                     	;# 
  1515  0EB8                     	;# 
  1516  0EB9                     	;# 
  1517  0EBA                     	;# 
  1518  0EBB                     	;# 
  1519  0EBC                     	;# 
  1520  0EBD                     	;# 
  1521  0EBE                     	;# 
  1522  0EC3                     	;# 
  1523  0EC5                     	;# 
  1524  0EC6                     	;# 
  1525  0EC7                     	;# 
  1526  0EC8                     	;# 
  1527  0EC9                     	;# 
  1528  0ECA                     	;# 
  1529  0ECB                     	;# 
  1530  0ECC                     	;# 
  1531  0F10                     	;# 
  1532  0F11                     	;# 
  1533  0F12                     	;# 
  1534  0F13                     	;# 
  1535  0F14                     	;# 
  1536  0F15                     	;# 
  1537  0F16                     	;# 
  1538  0F17                     	;# 
  1539  0F18                     	;# 
  1540  0F19                     	;# 
  1541  0F1A                     	;# 
  1542  0F1B                     	;# 
  1543  0F1C                     	;# 
  1544  0F1D                     	;# 
  1545  0F1E                     	;# 
  1546  0F1F                     	;# 
  1547  0F20                     	;# 
  1548  0F21                     	;# 
  1549  0F22                     	;# 
  1550  0F23                     	;# 
  1551  0F24                     	;# 
  1552  0F25                     	;# 
  1553  0F26                     	;# 
  1554  0F27                     	;# 
  1555  0F38                     	;# 
  1556  0F39                     	;# 
  1557  0F3A                     	;# 
  1558  0F3B                     	;# 
  1559  0F3C                     	;# 
  1560  0F3D                     	;# 
  1561  0F3E                     	;# 
  1562  0F3F                     	;# 
  1563  0F40                     	;# 
  1564  0F41                     	;# 
  1565  0F43                     	;# 
  1566  0F44                     	;# 
  1567  0F45                     	;# 
  1568  0F46                     	;# 
  1569  0F47                     	;# 
  1570  0F48                     	;# 
  1571  0F49                     	;# 
  1572  0F4A                     	;# 
  1573  0F4B                     	;# 
  1574  0F4C                     	;# 
  1575  0F4E                     	;# 
  1576  0F4F                     	;# 
  1577  0F50                     	;# 
  1578  0F51                     	;# 
  1579  0F52                     	;# 
  1580  0F53                     	;# 
  1581  0F54                     	;# 
  1582  0F55                     	;# 
  1583  0F56                     	;# 
  1584  0F57                     	;# 
  1585  0F65                     	;# 
  1586  0F68                     	;# 
  1587  0F69                     	;# 
  1588  0F6A                     	;# 
  1589  0F6B                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601                           
  1602                           	psect	stringtext
  1603  1000                     __pstringtext:	
  1604  1000                     __powers_:	
  1605  1000  3400               	retlw	0
  1606  1001  3480               	retlw	128
  1607  1002  343F               	retlw	63
  1608  1003  3400               	retlw	0
  1609  1004  3420               	retlw	32
  1610  1005  3441               	retlw	65
  1611  1006  3400               	retlw	0
  1612  1007  34C8               	retlw	200
  1613  1008  3442               	retlw	66
  1614  1009  3400               	retlw	0
  1615  100A  347A               	retlw	122
  1616  100B  3444               	retlw	68
  1617  100C  3440               	retlw	64
  1618  100D  341C               	retlw	28
  1619  100E  3446               	retlw	70
  1620  100F  3450               	retlw	80
  1621  1010  34C3               	retlw	195
  1622  1011  3447               	retlw	71
  1623  1012  3424               	retlw	36
  1624  1013  3474               	retlw	116
  1625  1014  3449               	retlw	73
  1626  1015  3497               	retlw	151
  1627  1016  3418               	retlw	24
  1628  1017  344B               	retlw	75
  1629  1018  34BC               	retlw	188
  1630  1019  34BE               	retlw	190
  1631  101A  344C               	retlw	76
  1632  101B  346B               	retlw	107
  1633  101C  346E               	retlw	110
  1634  101D  344E               	retlw	78
  1635  101E  3403               	retlw	3
  1636  101F  3415               	retlw	21
  1637  1020  3450               	retlw	80
  1638  1021  3479               	retlw	121
  1639  1022  34AD               	retlw	173
  1640  1023  3460               	retlw	96
  1641  1024  34F3               	retlw	243
  1642  1025  3449               	retlw	73
  1643  1026  3471               	retlw	113
  1644  1027                     __end_of__powers_:	
  1645  1027                     __npowers_:	
  1646  1027  3400               	retlw	0
  1647  1028  3480               	retlw	128
  1648  1029  343F               	retlw	63
  1649  102A  34CD               	retlw	205
  1650  102B  34CC               	retlw	204
  1651  102C  343D               	retlw	61
  1652  102D  34D7               	retlw	215
  1653  102E  3423               	retlw	35
  1654  102F  343C               	retlw	60
  1655  1030  3412               	retlw	18
  1656  1031  3483               	retlw	131
  1657  1032  343A               	retlw	58
  1658  1033  34B7               	retlw	183
  1659  1034  34D1               	retlw	209
  1660  1035  3438               	retlw	56
  1661  1036  34C6               	retlw	198
  1662  1037  3427               	retlw	39
  1663  1038  3437               	retlw	55
  1664  1039  3438               	retlw	56
  1665  103A  3486               	retlw	134
  1666  103B  3435               	retlw	53
  1667  103C  34C0               	retlw	192
  1668  103D  34D6               	retlw	214
  1669  103E  3433               	retlw	51
  1670  103F  34CC               	retlw	204
  1671  1040  342B               	retlw	43
  1672  1041  3432               	retlw	50
  1673  1042  3470               	retlw	112
  1674  1043  3489               	retlw	137
  1675  1044  3430               	retlw	48
  1676  1045  34E7               	retlw	231
  1677  1046  34DB               	retlw	219
  1678  1047  342E               	retlw	46
  1679  1048  34E5               	retlw	229
  1680  1049  343C               	retlw	60
  1681  104A  341E               	retlw	30
  1682  104B  3442               	retlw	66
  1683  104C  34A2               	retlw	162
  1684  104D  340D               	retlw	13
  1685  104E                     __end_of__npowers_:	
  1686  104E                     _dpowers:	
  1687  104E  3401               	retlw	1
  1688  104F  3400               	retlw	0
  1689  1050  3400               	retlw	0
  1690  1051  3400               	retlw	0
  1691  1052  340A               	retlw	10
  1692  1053  3400               	retlw	0
  1693  1054  3400               	retlw	0
  1694  1055  3400               	retlw	0
  1695  1056  3464               	retlw	100
  1696  1057  3400               	retlw	0
  1697  1058  3400               	retlw	0
  1698  1059  3400               	retlw	0
  1699  105A  34E8               	retlw	232
  1700  105B  3403               	retlw	3
  1701  105C  3400               	retlw	0
  1702  105D  3400               	retlw	0
  1703  105E  3410               	retlw	16
  1704  105F  3427               	retlw	39
  1705  1060  3400               	retlw	0
  1706  1061  3400               	retlw	0
  1707  1062  34A0               	retlw	160
  1708  1063  3486               	retlw	134
  1709  1064  3401               	retlw	1
  1710  1065  3400               	retlw	0
  1711  1066  3440               	retlw	64
  1712  1067  3442               	retlw	66
  1713  1068  340F               	retlw	15
  1714  1069  3400               	retlw	0
  1715  106A  3480               	retlw	128
  1716  106B  3496               	retlw	150
  1717  106C  3498               	retlw	152
  1718  106D  3400               	retlw	0
  1719  106E  3400               	retlw	0
  1720  106F  34E1               	retlw	225
  1721  1070  34F5               	retlw	245
  1722  1071  3405               	retlw	5
  1723  1072  3400               	retlw	0
  1724  1073  34CA               	retlw	202
  1725  1074  349A               	retlw	154
  1726  1075  343B               	retlw	59
  1727  1076                     __end_of_dpowers:	
  1728  000C                     _PORTAbits	set	12
  1729  0016                     _LATAbits	set	22
  1730  0011                     _TRISAbits	set	17
  1731  0017                     _LATBbits	set	23
  1732  0013                     _TRISC	set	19
  1733  0012                     _TRISB	set	18
  1734  0011                     _TRISA	set	17
  1735  0018                     _LATC	set	24
  1736  0017                     _LATB	set	23
  1737  0016                     _LATA	set	22
  1738  020C                     _TMR1L	set	524
  1739  020D                     _TMR1H	set	525
  1740  0211                     _T1CLK	set	529
  1741  020E                     _T1CON	set	526
  1742  079B                     _PMD5	set	1947
  1743  079A                     _PMD4	set	1946
  1744  0799                     _PMD3	set	1945
  1745  0798                     _PMD2	set	1944
  1746  0797                     _PMD1	set	1943
  1747  0796                     _PMD0	set	1942
  1748  0892                     _OSCTUNE	set	2194
  1749  0893                     _OSCFRQ	set	2195
  1750  0891                     _OSCEN	set	2193
  1751  088F                     _OSCCON3	set	2191
  1752  088D                     _OSCCON1	set	2189
  1753  0F68                     _INLVLE	set	3944
  1754  0F52                     _INLVLC	set	3922
  1755  0F47                     _INLVLB	set	3911
  1756  0F3C                     _INLVLA	set	3900
  1757  0F51                     _SLRCONC	set	3921
  1758  0F46                     _SLRCONB	set	3910
  1759  0F3B                     _SLRCONA	set	3899
  1760  0F50                     _ODCONC	set	3920
  1761  0F45                     _ODCONB	set	3909
  1762  0F3A                     _ODCONA	set	3898
  1763  0F4F                     _WPUC	set	3919
  1764  0F39                     _WPUA	set	3897
  1765  0F44                     _WPUB	set	3908
  1766  0F65                     _WPUE	set	3941
  1767  0F38                     _ANSELA	set	3896
  1768  0F43                     _ANSELB	set	3907
  1769  0F4E                     _ANSELC	set	3918
  1770  1076                     STR_2:	
  1771  1076  3444               	retlw	68	;'D'
  1772  1077  3469               	retlw	105	;'i'
  1773  1078  3473               	retlw	115	;'s'
  1774  1079  3474               	retlw	116	;'t'
  1775  107A  342E               	retlw	46	;'.'
  1776  107B  3420               	retlw	32	;' '
  1777  107C  343D               	retlw	61	;'='
  1778  107D  3420               	retlw	32	;' '
  1779  107E  3425               	retlw	37	;'%'
  1780  107F  3430               	retlw	48	;'0'
  1781  1080  342E               	retlw	46	;'.'
  1782  1081  3432               	retlw	50	;'2'
  1783  1082  3466               	retlw	102	;'f'
  1784  1083  3420               	retlw	32	;' '
  1785  1084  3420               	retlw	32	;' '
  1786  1085  3420               	retlw	32	;' '
  1787  1086  3420               	retlw	32	;' '
  1788  1087  3400               	retlw	0
  1789  1088                     STR_1:	
  1790  1088  3455               	retlw	85	;'U'
  1791  1089  346C               	retlw	108	;'l'
  1792  108A  3474               	retlw	116	;'t'
  1793  108B  3472               	retlw	114	;'r'
  1794  108C  3461               	retlw	97	;'a'
  1795  108D  3473               	retlw	115	;'s'
  1796  108E  346F               	retlw	111	;'o'
  1797  108F  346E               	retlw	110	;'n'
  1798  1090  3469               	retlw	105	;'i'
  1799  1091  3463               	retlw	99	;'c'
  1800  1092  346F               	retlw	111	;'o'
  1801  1093  3400               	retlw	0
  1802                           
  1803                           ; #config settings
  1804  0000                     
  1805                           	psect	cinit
  1806  0447                     start_initialization:	
  1807  0447                     __initialization:	
  1808                           
  1809                           ; Clear objects allocated to BANK0
  1810  0447  305F               	movlw	low __pbssBANK0
  1811  0448  0084               	movwf	4
  1812  0449  3000               	movlw	high __pbssBANK0
  1813  044A  0085               	movwf	5
  1814  044B  3007               	movlw	7
  1815  044C  3182  2250  3184   	fcall	clear_ram0
  1816                           
  1817                           ; Clear objects allocated to BANK1
  1818  044F  30B9               	movlw	low __pbssBANK1
  1819  0450  0084               	movwf	4
  1820  0451  3000               	movlw	high __pbssBANK1
  1821  0452  0085               	movwf	5
  1822  0453  3014               	movlw	20
  1823  0454  3182  2250  3184   	fcall	clear_ram0
  1824  0457                     end_of_initialization:	
  1825                           ;End of C runtime variable initialization code
  1826                           
  1827  0457                     __end_of__initialization:	
  1828  0457  0020               	movlb	0
  1829  0458  2C79               	ljmp	_main	;jump to C main() function
  1830  0459                     __ptext29:	
  1831 ;; *************** function _Lcd_Write_Char *****************
  1832 ;; Defined at:
  1833 ;;		line 97 in file "lcd.h"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  a               1    wreg     unsigned char 
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;  a               1    3[COMMON] unsigned char 
  1838 ;;  y               1    2[COMMON] unsigned char 
  1839 ;;  temp            1    1[COMMON] unsigned char 
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  1    wreg      void 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0, pclath, cstack
  1844 ;; Tracked objects:
  1845 ;;		On entry : 1E/0
  1846 ;;		On exit  : 1F/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1850 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1852 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1853 ;;Total ram usage:        3 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; Hardware stack levels required when called:    1
  1856 ;; This function calls:
  1857 ;;		_Lcd_Port
  1858 ;; This function is called by:
  1859 ;;		_Lcd_Write_String
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862                           
  1863                           
  1864                           ;psect for function _Lcd_Write_Char
  1865  0459                     _Lcd_Write_Char:	
  1866                           
  1867                           ;incstack = 0
  1868                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1869                           ;Lcd_Write_Char@a stored from wreg
  1870  0459  00F3               	movwf	Lcd_Write_Char@a
  1871                           
  1872                           ;lcd.h: 99: char temp,y;
  1873                           ;lcd.h: 100: temp = a&0x0F;
  1874  045A  00F1               	movwf	Lcd_Write_Char@temp
  1875  045B  300F               	movlw	15
  1876  045C  05F1               	andwf	Lcd_Write_Char@temp,f
  1877                           
  1878                           ;lcd.h: 101: y = a&0xF0;
  1879  045D  0873               	movf	Lcd_Write_Char@a,w
  1880  045E  00F2               	movwf	Lcd_Write_Char@y
  1881  045F  30F0               	movlw	240
  1882  0460  05F2               	andwf	Lcd_Write_Char@y,f
  1883                           
  1884                           ;lcd.h: 102: LATBbits.LATB0 = 1;
  1885  0461  0020               	movlb	0	; select bank0
  1886  0462  1417               	bsf	23,0	;volatile
  1887                           
  1888                           ;lcd.h: 103: Lcd_Port(y>>4);
  1889  0463  0E72               	swapf	Lcd_Write_Char@y,w
  1890  0464  390F               	andlw	15
  1891  0465  2577  3184         	fcall	_Lcd_Port
  1892                           
  1893                           ;lcd.h: 104: LATBbits.LATB1 = 1;
  1894  0467  1497               	bsf	23,1	;volatile
  1895                           
  1896                           ;lcd.h: 105: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1897  0468  301A               	movlw	26
  1898  0469                     u3477:	
  1899  0469  0B89               	decfsz	9,f
  1900  046A  2C69               	goto	u3477
  1901  046B  3200               	nop2
  1902                           
  1903                           ;lcd.h: 106: LATBbits.LATB1 = 0;
  1904  046C  0020               	movlb	0	; select bank0
  1905  046D  1097               	bcf	23,1	;volatile
  1906                           
  1907                           ;lcd.h: 107: Lcd_Port(temp);
  1908  046E  0871               	movf	Lcd_Write_Char@temp,w
  1909  046F  2577  3184         	fcall	_Lcd_Port
  1910                           
  1911                           ;lcd.h: 108: LATBbits.LATB1 = 1;
  1912  0471  1497               	bsf	23,1	;volatile
  1913                           
  1914                           ;lcd.h: 109: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1915  0472  301A               	movlw	26
  1916  0473                     u3487:	
  1917  0473  0B89               	decfsz	9,f
  1918  0474  2C73               	goto	u3487
  1919  0475  3200               	nop2
  1920                           
  1921                           ;lcd.h: 110: LATBbits.LATB1 = 0;
  1922  0476  0020               	movlb	0	; select bank0
  1923  0477  1097               	bcf	23,1	;volatile
  1924  0478  0008               	return
  1925  0479                     __end_of_Lcd_Write_Char:	
  1926  0479                     __pmaintext:	
  1927 ;;
  1928 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1929 ;;
  1930 ;; *************** function _main *****************
  1931 ;; Defined at:
  1932 ;;		line 69 in file "main.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : B1F/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1948 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1949 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1950 ;;Total ram usage:        2 bytes
  1951 ;; Hardware stack levels required when called:    4
  1952 ;; This function calls:
  1953 ;;		_Lcd_Clear
  1954 ;;		_Lcd_Init
  1955 ;;		_Lcd_Set_Cursor
  1956 ;;		_Lcd_Write_String
  1957 ;;		_SYSTEM_Initialize
  1958 ;;		___awtoft
  1959 ;;		___ftdiv
  1960 ;;		___ftmul
  1961 ;;		_sprintf
  1962 ;; This function is called by:
  1963 ;;		Startup code after reset
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966                           
  1967                           
  1968                           ;psect for function _main
  1969  0479                     _main:	
  1970                           
  1971                           ;main.c: 72: SYSTEM_Initialize();
  1972                           
  1973                           ;incstack = 0
  1974                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1975  0479  25A2  3184         	fcall	_SYSTEM_Initialize
  1976                           
  1977                           ;main.c: 89: ANSELA = 0x00;
  1978  047B  003E               	movlb	30	; select bank30
  1979  047C  01B8               	clrf	56	;volatile
  1980                           
  1981                           ;main.c: 90: TRISAbits.TRISA6 = 1;
  1982  047D  0020               	movlb	0	; select bank0
  1983  047E  1711               	bsf	17,6	;volatile
  1984                           
  1985                           ;main.c: 91: TRISAbits.TRISA7 = 0;
  1986  047F  1391               	bcf	17,7	;volatile
  1987                           
  1988                           ;main.c: 93: T1CON = 0x33;
  1989  0480  3033               	movlw	51
  1990  0481  0024               	movlb	4	; select bank4
  1991  0482  008E               	movwf	14	;volatile
  1992                           
  1993                           ;main.c: 94: T1CLK = 1;
  1994  0483  3001               	movlw	1
  1995  0484  0091               	movwf	17	;volatile
  1996                           
  1997                           ;main.c: 96: TRISB = 0x00;
  1998  0485  0020               	movlb	0	; select bank0
  1999  0486  0192               	clrf	18	;volatile
  2000                           
  2001                           ;main.c: 97: LATB = 0x00;
  2002  0487  0197               	clrf	23	;volatile
  2003                           
  2004                           ;main.c: 99: Lcd_Init();
  2005  0488  252F  3184         	fcall	_Lcd_Init
  2006                           
  2007                           ;main.c: 100: Lcd_Clear();
  2008  048A  259D  3184         	fcall	_Lcd_Clear
  2009  048C  3001               	movlw	1
  2010                           
  2011                           ;main.c: 101: Lcd_Set_Cursor(1,1);
  2012  048D  01F3               	clrf	Lcd_Set_Cursor@b
  2013  048E  0AF3               	incf	Lcd_Set_Cursor@b,f
  2014  048F  2500  3184         	fcall	_Lcd_Set_Cursor
  2015                           
  2016                           ;main.c: 102: Lcd_Write_String("Ultrasonico");
  2017  0491  3088               	movlw	low (STR_1| (0+32768))
  2018  0492  00F4               	movwf	Lcd_Write_String@a
  2019  0493  3090               	movlw	high (STR_1| (0+32768))
  2020  0494  00F5               	movwf	Lcd_Write_String@a+1
  2021  0495  258D  3184         	fcall	_Lcd_Write_String
  2022  0497                     l3119:	
  2023                           
  2024                           ;main.c: 105: {
  2025                           ;main.c: 107: LATAbits.LATA7 = 1;
  2026  0497  0020               	movlb	0	; select bank0
  2027  0498  1796               	bsf	22,7	;volatile
  2028                           
  2029                           ;main.c: 108: _delay((unsigned long)((10)*(8000000/4000000.0)));
  2030  0499  3006               	movlw	6
  2031  049A                     u3457:	
  2032  049A  0B89               	decfsz	9,f
  2033  049B  2C9A               	goto	u3457
  2034  049C  3200               	nop2
  2035                           
  2036                           ;main.c: 109: LATAbits.LATA7 = 0;
  2037  049D  0020               	movlb	0	; select bank0
  2038  049E  1396               	bcf	22,7	;volatile
  2039  049F                     l174:	
  2040                           ;main.c: 110: while(PORTAbits.RA6 == 0);
  2041                           
  2042  049F  1F0C               	btfss	12,6	;volatile
  2043  04A0  2C9F               	goto	l174
  2044                           
  2045                           ;main.c: 111: TMR1H = 0x00;
  2046  04A1  0024               	movlb	4	; select bank4
  2047  04A2  018D               	clrf	13	;volatile
  2048                           
  2049                           ;main.c: 112: TMR1L = 0x00;
  2050  04A3  018C               	clrf	12	;volatile
  2051  04A4                     l177:	
  2052                           ;main.c: 113: while(PORTAbits.RA6 == 1);
  2053                           
  2054  04A4  0020               	movlb	0	; select bank0
  2055  04A5  1B0C               	btfsc	12,6	;volatile
  2056  04A6  2CA4               	goto	l177
  2057                           
  2058                           ;main.c: 117: t_low = TMR1L;
  2059  04A7  0024               	movlb	4	; select bank4
  2060  04A8  080C               	movf	12,w	;volatile
  2061  04A9  0020               	movlb	0	; select bank0
  2062  04AA  00E2               	movwf	_t_low
  2063  04AB  01E3               	clrf	_t_low+1
  2064                           
  2065                           ;main.c: 118: t_high = TMR1H;
  2066  04AC  0024               	movlb	4	; select bank4
  2067  04AD  080D               	movf	13,w	;volatile
  2068  04AE  0020               	movlb	0	; select bank0
  2069  04AF  00E4               	movwf	_t_high
  2070  04B0  3002               	movlw	2
  2071  04B1  01E5               	clrf	_t_high+1
  2072  04B2  01F3               	clrf	Lcd_Set_Cursor@b
  2073  04B3  0AF3               	incf	Lcd_Set_Cursor@b,f
  2074  04B4  2500  3184         	fcall	_Lcd_Set_Cursor
  2075                           
  2076                           ;main.c: 121: distancia = (((t_high<<8)+t_low)*0.004*34.0)/2.0;
  2077  04B6  3040               	movlw	64
  2078  04B7  01B5               	clrf	___ftdiv@f2
  2079  04B8  01B6               	clrf	___ftdiv@f2+1
  2080  04B9  00B7               	movwf	___ftdiv@f2+2
  2081  04BA  3044               	movlw	68
  2082  04BB  00A6               	movwf	___ftmul@f1
  2083  04BC  300B               	movlw	11
  2084  04BD  00A7               	movwf	___ftmul@f1+1
  2085  04BE  303E               	movlw	62
  2086  04BF  00A8               	movwf	___ftmul@f1+2
  2087  04C0  0864               	movf	_t_high,w
  2088  04C1  00F9               	movwf	___awtoft@c+1
  2089  04C2  01F8               	clrf	___awtoft@c
  2090  04C3  0862               	movf	_t_low,w
  2091  04C4  07F8               	addwf	___awtoft@c,f
  2092  04C5  0863               	movf	_t_low+1,w
  2093  04C6  3DF9               	addwfc	___awtoft@c+1,f
  2094  04C7  25AF  3184         	fcall	___awtoft
  2095  04C9  0878               	movf	?___awtoft,w
  2096  04CA  0020               	movlb	0	; select bank0
  2097  04CB  00A9               	movwf	___ftmul@f2
  2098  04CC  0879               	movf	?___awtoft+1,w
  2099  04CD  00AA               	movwf	___ftmul@f2+1
  2100  04CE  087A               	movf	?___awtoft+2,w
  2101  04CF  00AB               	movwf	___ftmul@f2+2
  2102  04D0  2652  3184         	fcall	___ftmul
  2103  04D2  0826               	movf	?___ftmul,w
  2104  04D3  00B8               	movwf	___ftdiv@f1
  2105  04D4  0827               	movf	?___ftmul+1,w
  2106  04D5  00B9               	movwf	___ftdiv@f1+1
  2107  04D6  0828               	movf	?___ftmul+2,w
  2108  04D7  00BA               	movwf	___ftdiv@f1+2
  2109  04D8  271D               	fcall	___ftdiv
  2110  04D9  0835               	movf	?___ftdiv,w
  2111  04DA  00DF               	movwf	_distancia
  2112  04DB  0836               	movf	?___ftdiv+1,w
  2113  04DC  00E0               	movwf	_distancia+1
  2114  04DD  0837               	movf	?___ftdiv+2,w
  2115  04DE  00E1               	movwf	_distancia+2
  2116                           
  2117                           ;main.c: 122: sprintf(aux,"Dist. = %0.2f    ",distancia);
  2118  04DF  3076               	movlw	low (STR_2| (0+32768))
  2119  04E0  00D2               	movwf	sprintf@f
  2120  04E1  3090               	movlw	high (STR_2| (0+32768))
  2121  04E2  00D3               	movwf	sprintf@f+1
  2122  04E3  085F               	movf	_distancia,w
  2123  04E4  00D4               	movwf	?_sprintf+2
  2124  04E5  0860               	movf	_distancia+1,w
  2125  04E6  00D5               	movwf	?_sprintf+3
  2126  04E7  0861               	movf	_distancia+2,w
  2127  04E8  00D6               	movwf	?_sprintf+4
  2128  04E9  30B9               	movlw	(low (_aux| 0))& (0+255)
  2129  04EA  3188  2036  3184   	fcall	_sprintf
  2130                           
  2131                           ;main.c: 123: Lcd_Write_String(aux);
  2132  04ED  30B9               	movlw	low _aux
  2133  04EE  00F4               	movwf	Lcd_Write_String@a
  2134  04EF  3000               	movlw	high _aux
  2135  04F0  00F5               	movwf	Lcd_Write_String@a+1
  2136  04F1  258D  3184         	fcall	_Lcd_Write_String
  2137                           
  2138                           ;main.c: 124: _delay((unsigned long)((200)*(8000000/4000.0)));
  2139  04F3  3003               	movlw	3
  2140  04F4  0020               	movlb	0	; select bank0
  2141  04F5  00DE               	movwf	??_main+1
  2142  04F6  3008               	movlw	8
  2143  04F7  00DD               	movwf	??_main
  2144  04F8  3077               	movlw	119
  2145  04F9                     u3467:	
  2146  04F9  0B89               	decfsz	9,f
  2147  04FA  2CF9               	goto	u3467
  2148  04FB  0BDD               	decfsz	??_main,f
  2149  04FC  2CF9               	goto	u3467
  2150  04FD  0BDE               	decfsz	??_main+1,f
  2151  04FE  2CF9               	goto	u3467
  2152  04FF  2C97               	goto	l3119
  2153  0500                     __end_of_main:	
  2154  0500                     __ptext30:	
  2155 ;; *************** function _Lcd_Set_Cursor *****************
  2156 ;; Defined at:
  2157 ;;		line 41 in file "lcd.h"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  a               1    wreg     unsigned char 
  2160 ;;  b               1    3[COMMON] unsigned char 
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  a               1    4[COMMON] unsigned char 
  2163 ;;  temp            1    7[COMMON] unsigned char 
  2164 ;;  y               1    6[COMMON] unsigned char 
  2165 ;;  z               1    5[COMMON] unsigned char 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, status,2, status,0, pclath, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 1F/0
  2172 ;;		On exit  : 1F/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2175 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2176 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2178 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2179 ;;Total ram usage:        5 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    2
  2182 ;; This function calls:
  2183 ;;		_Lcd_Cmd
  2184 ;; This function is called by:
  2185 ;;		_main
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           
  2190                           ;psect for function _Lcd_Set_Cursor
  2191  0500                     _Lcd_Set_Cursor:	
  2192                           
  2193                           ;incstack = 0
  2194                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2195                           ;Lcd_Set_Cursor@a stored from wreg
  2196  0500  00F4               	movwf	Lcd_Set_Cursor@a
  2197                           
  2198                           ;lcd.h: 43: char temp,z,y;
  2199                           ;lcd.h: 44: if(a == 1)
  2200  0501  0B74               	decfsz	Lcd_Set_Cursor@a,w
  2201  0502  2D0B               	goto	l2687
  2202                           
  2203                           ;lcd.h: 45: {
  2204                           ;lcd.h: 46: temp = 0x80 + b - 1;
  2205  0503  0873               	movf	Lcd_Set_Cursor@b,w
  2206  0504  3E7F               	addlw	127
  2207                           
  2208                           ;lcd.h: 47: z = temp>>4;
  2209                           
  2210                           ;lcd.h: 48: y = temp & 0x0F;
  2211                           
  2212                           ;lcd.h: 49: Lcd_Cmd(z);
  2213  0505  27BE  3184         	fcall	PL20	;call to abstracted procedure
  2214  0507  2565  3184         	fcall	_Lcd_Cmd
  2215                           
  2216                           ;lcd.h: 50: Lcd_Cmd(y);
  2217  0509  0876               	movf	Lcd_Set_Cursor@y,w
  2218  050A  2D65               	ljmp	_Lcd_Cmd
  2219  050B                     l2687:	
  2220                           ;lcd.h: 51: }
  2221                           
  2222                           
  2223                           ;lcd.h: 52: else if(a == 2)
  2224  050B  3002               	movlw	2
  2225  050C  0674               	xorwf	Lcd_Set_Cursor@a,w
  2226  050D  1D03               	btfss	3,2
  2227  050E  2D17               	goto	l2699
  2228                           
  2229                           ;lcd.h: 53: {
  2230                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  2231  050F  0873               	movf	Lcd_Set_Cursor@b,w
  2232  0510  3EBF               	addlw	191
  2233                           
  2234                           ;lcd.h: 55: z = temp>>4;
  2235                           
  2236                           ;lcd.h: 56: y = temp & 0x0F;
  2237                           
  2238                           ;lcd.h: 57: Lcd_Cmd(z);
  2239  0511  27BE  3184         	fcall	PL20	;call to abstracted procedure
  2240  0513  2565  3184         	fcall	_Lcd_Cmd
  2241                           
  2242                           ;lcd.h: 58: Lcd_Cmd(y);
  2243  0515  0876               	movf	Lcd_Set_Cursor@y,w
  2244  0516  2D65               	ljmp	_Lcd_Cmd
  2245  0517                     l2699:	
  2246                           ;lcd.h: 59: }
  2247                           
  2248                           
  2249                           ;lcd.h: 60: else if(a == 3)
  2250  0517  3003               	movlw	3
  2251  0518  0674               	xorwf	Lcd_Set_Cursor@a,w
  2252  0519  1D03               	btfss	3,2
  2253  051A  2D23               	goto	l2711
  2254                           
  2255                           ;lcd.h: 61: {
  2256                           ;lcd.h: 62: temp = 0x94 + b - 1;
  2257  051B  0873               	movf	Lcd_Set_Cursor@b,w
  2258  051C  3E93               	addlw	147
  2259                           
  2260                           ;lcd.h: 63: z = temp>>4;
  2261                           
  2262                           ;lcd.h: 64: y = temp & 0x0F;
  2263                           
  2264                           ;lcd.h: 65: Lcd_Cmd(z);
  2265  051D  27BE  3184         	fcall	PL20	;call to abstracted procedure
  2266  051F  2565  3184         	fcall	_Lcd_Cmd
  2267                           
  2268                           ;lcd.h: 66: Lcd_Cmd(y);
  2269  0521  0876               	movf	Lcd_Set_Cursor@y,w
  2270  0522  2D65               	ljmp	_Lcd_Cmd
  2271  0523                     l2711:	
  2272                           ;lcd.h: 67: }
  2273                           
  2274                           
  2275                           ;lcd.h: 68: else if(a == 4)
  2276  0523  3004               	movlw	4
  2277  0524  0674               	xorwf	Lcd_Set_Cursor@a,w
  2278  0525  1D03               	btfss	3,2
  2279  0526  0008               	return
  2280                           
  2281                           ;lcd.h: 69: {
  2282                           ;lcd.h: 70: temp = 0xD4 + b - 1;
  2283  0527  0873               	movf	Lcd_Set_Cursor@b,w
  2284  0528  3ED3               	addlw	211
  2285                           
  2286                           ;lcd.h: 71: z = temp>>4;
  2287                           
  2288                           ;lcd.h: 72: y = temp & 0x0F;
  2289                           
  2290                           ;lcd.h: 73: Lcd_Cmd(z);
  2291  0529  27BE  3184         	fcall	PL20	;call to abstracted procedure
  2292  052B  2565  3184         	fcall	_Lcd_Cmd
  2293                           
  2294                           ;lcd.h: 74: Lcd_Cmd(y);
  2295  052D  0876               	movf	Lcd_Set_Cursor@y,w
  2296  052E  2D65               	ljmp	_Lcd_Cmd
  2297  052F                     __end_of_Lcd_Set_Cursor:	
  2298  052F                     __ptext31:	
  2299 ;; *************** function _Lcd_Init *****************
  2300 ;; Defined at:
  2301 ;;		line 78 in file "lcd.h"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, status,0, pclath, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : B1F/0
  2312 ;;		On exit  : 1F/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2317 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2319 ;;Total ram usage:        1 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    2
  2322 ;; This function calls:
  2323 ;;		_Lcd_Cmd
  2324 ;;		_Lcd_Port
  2325 ;; This function is called by:
  2326 ;;		_main
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           
  2331                           ;psect for function _Lcd_Init
  2332  052F                     _Lcd_Init:	
  2333                           
  2334                           ;lcd.h: 80: Lcd_Port(0x00);
  2335                           
  2336                           ;incstack = 0
  2337                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2338  052F  3000               	movlw	0
  2339  0530  2577  3184         	fcall	_Lcd_Port
  2340                           
  2341                           ;lcd.h: 81: _delay((unsigned long)((20)*(8000000/4000.0)));
  2342  0532  3034               	movlw	52
  2343  0533  00F3               	movwf	??_Lcd_Init
  2344  0534  30F2               	movlw	242
  2345  0535                     u3497:	
  2346  0535  0B89               	decfsz	9,f
  2347  0536  2D35               	goto	u3497
  2348  0537  0BF3               	decfsz	??_Lcd_Init,f
  2349  0538  2D35               	goto	u3497
  2350                           
  2351                           ;lcd.h: 82: Lcd_Cmd(0x03);
  2352  0539  3003               	movlw	3
  2353  053A  2565  3184         	fcall	_Lcd_Cmd
  2354                           
  2355                           ;lcd.h: 83: _delay((unsigned long)((5)*(8000000/4000.0)));
  2356  053C  300D               	movlw	13
  2357  053D  00F3               	movwf	??_Lcd_Init
  2358  053E  30FC               	movlw	252
  2359  053F                     u3507:	
  2360  053F  0B89               	decfsz	9,f
  2361  0540  2D3F               	goto	u3507
  2362  0541  0BF3               	decfsz	??_Lcd_Init,f
  2363  0542  2D3F               	goto	u3507
  2364                           
  2365                           ;lcd.h: 84: Lcd_Cmd(0x03);
  2366  0543  3003               	movlw	3
  2367  0544  2565  3184         	fcall	_Lcd_Cmd
  2368                           
  2369                           ;lcd.h: 85: _delay((unsigned long)((11)*(8000000/4000.0)));
  2370  0546  301D               	movlw	29
  2371  0547  00F3               	movwf	??_Lcd_Init
  2372  0548  3091               	movlw	145
  2373  0549                     u3517:	
  2374  0549  0B89               	decfsz	9,f
  2375  054A  2D49               	goto	u3517
  2376  054B  0BF3               	decfsz	??_Lcd_Init,f
  2377  054C  2D49               	goto	u3517
  2378  054D  0000               	nop
  2379                           
  2380                           ;lcd.h: 86: Lcd_Cmd(0x03);
  2381  054E  3003               	movlw	3
  2382  054F  2565  3184         	fcall	_Lcd_Cmd
  2383                           
  2384                           ;lcd.h: 88: Lcd_Cmd(0x02);
  2385  0551  3002               	movlw	2
  2386  0552  2565  3184         	fcall	_Lcd_Cmd
  2387                           
  2388                           ;lcd.h: 89: Lcd_Cmd(0x02);
  2389  0554  3002               	movlw	2
  2390  0555  2565  3184         	fcall	_Lcd_Cmd
  2391                           
  2392                           ;lcd.h: 90: Lcd_Cmd(0x08);
  2393  0557  3008               	movlw	8
  2394  0558  2565  3184         	fcall	_Lcd_Cmd
  2395                           
  2396                           ;lcd.h: 91: Lcd_Cmd(0x00);
  2397  055A  3000               	movlw	0
  2398  055B  2565  3184         	fcall	_Lcd_Cmd
  2399                           
  2400                           ;lcd.h: 92: Lcd_Cmd(0x0C);
  2401  055D  300C               	movlw	12
  2402  055E  2565  3184         	fcall	_Lcd_Cmd
  2403                           
  2404                           ;lcd.h: 93: Lcd_Cmd(0x00);
  2405  0560  3000               	movlw	0
  2406  0561  2565  3184         	fcall	_Lcd_Cmd
  2407                           
  2408                           ;lcd.h: 94: Lcd_Cmd(0x06);
  2409  0563  3006               	movlw	6
  2410  0564  2D65               	ljmp	_Lcd_Cmd
  2411  0565                     __end_of_Lcd_Init:	
  2412  0565                     __ptext33:	
  2413 ;; *************** function _Lcd_Cmd *****************
  2414 ;; Defined at:
  2415 ;;		line 26 in file "lcd.h"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  a               1    wreg     unsigned char 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;  a               1    2[COMMON] unsigned char 
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  1    wreg      void 
  2422 ;; Registers used:
  2423 ;;		wreg, status,2, status,0, pclath, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 1F/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2431 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2432 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2433 ;;Total ram usage:        2 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    1
  2436 ;; This function calls:
  2437 ;;		_Lcd_Port
  2438 ;; This function is called by:
  2439 ;;		_Lcd_Clear
  2440 ;;		_Lcd_Set_Cursor
  2441 ;;		_Lcd_Init
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445                           
  2446                           ;psect for function _Lcd_Cmd
  2447  0565                     _Lcd_Cmd:	
  2448                           
  2449                           ;incstack = 0
  2450                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2451                           ;Lcd_Cmd@a stored from wreg
  2452  0565  00F2               	movwf	Lcd_Cmd@a
  2453                           
  2454                           ;lcd.h: 28: LATBbits.LATB0 = 0;
  2455  0566  0020               	movlb	0	; select bank0
  2456  0567  1017               	bcf	23,0	;volatile
  2457                           
  2458                           ;lcd.h: 29: Lcd_Port(a);
  2459  0568  0872               	movf	Lcd_Cmd@a,w
  2460  0569  2577  3184         	fcall	_Lcd_Port
  2461                           
  2462                           ;lcd.h: 30: LATBbits.LATB1 = 1;
  2463  056B  1497               	bsf	23,1	;volatile
  2464                           
  2465                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
  2466  056C  300B               	movlw	11
  2467  056D  00F1               	movwf	??_Lcd_Cmd
  2468  056E  3062               	movlw	98
  2469  056F                     u3527:	
  2470  056F  0B89               	decfsz	9,f
  2471  0570  2D6F               	goto	u3527
  2472  0571  0BF1               	decfsz	??_Lcd_Cmd,f
  2473  0572  2D6F               	goto	u3527
  2474  0573  3200               	nop2
  2475                           
  2476                           ;lcd.h: 32: LATBbits.LATB1 = 0;
  2477  0574  0020               	movlb	0	; select bank0
  2478  0575  1097               	bcf	23,1	;volatile
  2479  0576  0008               	return
  2480  0577                     __end_of_Lcd_Cmd:	
  2481  0577                     __ptext34:	
  2482 ;; *************** function _Lcd_Port *****************
  2483 ;; Defined at:
  2484 ;;		line 4 in file "lcd.h"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  a               1    wreg     unsigned char 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  a               1    0[COMMON] unsigned char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg
  2493 ;; Tracked objects:
  2494 ;;		On entry : 1F/0
  2495 ;;		On exit  : 1F/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2499 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2501 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2502 ;;Total ram usage:        1 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; This function calls:
  2505 ;;		Nothing
  2506 ;; This function is called by:
  2507 ;;		_Lcd_Cmd
  2508 ;;		_Lcd_Init
  2509 ;;		_Lcd_Write_Char
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           
  2514                           ;psect for function _Lcd_Port
  2515  0577                     _Lcd_Port:	
  2516                           
  2517                           ;incstack = 0
  2518                           ; Regs used in _Lcd_Port: [wreg]
  2519                           ;Lcd_Port@a stored from wreg
  2520  0577  00F0               	movwf	Lcd_Port@a
  2521                           
  2522                           ;lcd.h: 6: if(a & 1)
  2523  0578  1C70               	btfss	Lcd_Port@a,0
  2524  0579  2D7C               	goto	l120
  2525                           
  2526                           ;lcd.h: 7: LATBbits.LATB2 = 1;
  2527  057A  1517               	bsf	23,2	;volatile
  2528  057B  2D7D               	goto	l2011
  2529  057C                     l120:	
  2530                           
  2531                           ;lcd.h: 8: else
  2532                           ;lcd.h: 9: LATBbits.LATB2 = 0;
  2533  057C  1117               	bcf	23,2	;volatile
  2534  057D                     l2011:	
  2535                           
  2536                           ;lcd.h: 11: if(a & 2)
  2537  057D  1CF0               	btfss	Lcd_Port@a,1
  2538  057E  2D81               	goto	l122
  2539                           
  2540                           ;lcd.h: 12: LATBbits.LATB3 = 1;
  2541  057F  1597               	bsf	23,3	;volatile
  2542  0580  2D82               	goto	l2015
  2543  0581                     l122:	
  2544                           
  2545                           ;lcd.h: 13: else
  2546                           ;lcd.h: 14: LATBbits.LATB3 = 0;
  2547  0581  1197               	bcf	23,3	;volatile
  2548  0582                     l2015:	
  2549                           
  2550                           ;lcd.h: 16: if(a & 4)
  2551  0582  1D70               	btfss	Lcd_Port@a,2
  2552  0583  2D86               	goto	l124
  2553                           
  2554                           ;lcd.h: 17: LATBbits.LATB4 = 1;
  2555  0584  1617               	bsf	23,4	;volatile
  2556  0585  2D87               	goto	l2019
  2557  0586                     l124:	
  2558                           
  2559                           ;lcd.h: 18: else
  2560                           ;lcd.h: 19: LATBbits.LATB4 = 0;
  2561  0586  1217               	bcf	23,4	;volatile
  2562  0587                     l2019:	
  2563                           
  2564                           ;lcd.h: 21: if(a & 8)
  2565  0587  1DF0               	btfss	Lcd_Port@a,3
  2566  0588  2D8B               	goto	l126
  2567                           
  2568                           ;lcd.h: 22: LATBbits.LATB5 = 1;
  2569  0589  1697               	bsf	23,5	;volatile
  2570  058A  0008               	return
  2571  058B                     l126:	
  2572                           
  2573                           ;lcd.h: 23: else
  2574                           ;lcd.h: 24: LATBbits.LATB5 = 0;
  2575  058B  1297               	bcf	23,5	;volatile
  2576  058C  0008               	return
  2577  058D                     __end_of_Lcd_Port:	
  2578  007E                     btemp	set	126	;btemp
  2579  007E                     wtemp0	set	126
  2580  058D                     __ptext28:	
  2581 ;; *************** function _Lcd_Write_String *****************
  2582 ;; Defined at:
  2583 ;;		line 113 in file "lcd.h"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;  a               2    4[COMMON] PTR unsigned char 
  2586 ;;		 -> aux(20), STR_1(12), 
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;  i               2    7[COMMON] int 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 1E/0
  2595 ;;		On exit  : 1E/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2598 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2599 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2600 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2601 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2602 ;;Total ram usage:        5 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    2
  2605 ;; This function calls:
  2606 ;;		_Lcd_Write_Char
  2607 ;; This function is called by:
  2608 ;;		_main
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           
  2613                           ;psect for function _Lcd_Write_String
  2614  058D                     _Lcd_Write_String:	
  2615                           
  2616                           ;lcd.h: 115: int i;
  2617                           ;lcd.h: 116: for(i=0;a[i]!='\0';i++)
  2618                           
  2619                           ;incstack = 0
  2620                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2621  058D  01F7               	clrf	Lcd_Write_String@i
  2622  058E  01F8               	clrf	Lcd_Write_String@i+1
  2623  058F                     l2739:	
  2624  058F  27E3  3184         	fcall	PL78	;call to abstracted procedure
  2625  0591  0012               	moviw fsr0++
  2626  0592  1903               	btfsc	3,2
  2627  0593  0008               	return
  2628                           
  2629                           ;lcd.h: 117: Lcd_Write_Char(a[i]);
  2630  0594  27E3  3184         	fcall	PL78	;call to abstracted procedure
  2631  0596  0800               	movf	0,w	;code access
  2632  0597  2459  3184         	fcall	_Lcd_Write_Char
  2633  0599  0AF7               	incf	Lcd_Write_String@i,f
  2634  059A  1903               	skipnz
  2635  059B  0AF8               	incf	Lcd_Write_String@i+1,f
  2636  059C  2D8F               	goto	l2739
  2637  059D                     __end_of_Lcd_Write_String:	
  2638  059D                     __ptext32:	
  2639 ;; *************** function _Lcd_Clear *****************
  2640 ;; Defined at:
  2641 ;;		line 35 in file "lcd.h"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;		None
  2644 ;; Auto vars:     Size  Location     Type
  2645 ;;		None
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  2  133[None  ] int 
  2648 ;; Registers used:
  2649 ;;		wreg, status,2, status,0, pclath, cstack
  2650 ;; Tracked objects:
  2651 ;;		On entry : 1F/0
  2652 ;;		On exit  : 1F/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2659 ;;Total ram usage:        0 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; Hardware stack levels required when called:    2
  2662 ;; This function calls:
  2663 ;;		_Lcd_Cmd
  2664 ;; This function is called by:
  2665 ;;		_main
  2666 ;; This function uses a non-reentrant model
  2667 ;;
  2668                           
  2669                           
  2670                           ;psect for function _Lcd_Clear
  2671  059D                     _Lcd_Clear:	
  2672                           
  2673                           ;lcd.h: 37: Lcd_Cmd(0);
  2674                           
  2675                           ;incstack = 0
  2676                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2677  059D  3000               	movlw	0
  2678  059E  2565  3184         	fcall	_Lcd_Cmd
  2679                           
  2680                           ;lcd.h: 38: Lcd_Cmd(1);
  2681  05A0  3001               	movlw	1
  2682  05A1  2D65               	ljmp	_Lcd_Cmd
  2683  05A2                     __end_of_Lcd_Clear:	
  2684  05A2                     __ptext24:	
  2685 ;; *************** function _SYSTEM_Initialize *****************
  2686 ;; Defined at:
  2687 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;		None
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;		None
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      void 
  2694 ;; Registers used:
  2695 ;;		wreg, status,2, status,0, pclath, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : B1F/0
  2698 ;;		On exit  : B1F/11
  2699 ;;		Unchanged: B00/0
  2700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2705 ;;Total ram usage:        0 bytes
  2706 ;; Hardware stack levels used:    1
  2707 ;; Hardware stack levels required when called:    1
  2708 ;; This function calls:
  2709 ;;		_OSCILLATOR_Initialize
  2710 ;;		_PIN_MANAGER_Initialize
  2711 ;;		_PMD_Initialize
  2712 ;; This function is called by:
  2713 ;;		_main
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           
  2718                           ;psect for function _SYSTEM_Initialize
  2719  05A2                     _SYSTEM_Initialize:	
  2720                           
  2721                           ;mcc.c: 52: PMD_Initialize();
  2722                           
  2723                           ;incstack = 0
  2724                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2725  05A2  25A7  3184         	fcall	_PMD_Initialize
  2726                           
  2727                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  2728  05A4  2783  3184         	fcall	_PIN_MANAGER_Initialize
  2729                           
  2730                           ;mcc.c: 54: OSCILLATOR_Initialize();
  2731  05A6  2F7A               	ljmp	l2319
  2732  05A7                     __end_of_SYSTEM_Initialize:	
  2733  05A7                     __ptext25:	
  2734 ;; *************** function _PMD_Initialize *****************
  2735 ;; Defined at:
  2736 ;;		line 71 in file "mcc_generated_files/mcc.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		status,2
  2745 ;; Tracked objects:
  2746 ;;		On entry : B1F/0
  2747 ;;		On exit  : B1F/F
  2748 ;;		Unchanged: B00/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2754 ;;Total ram usage:        0 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; This function calls:
  2757 ;;		Nothing
  2758 ;; This function is called by:
  2759 ;;		_SYSTEM_Initialize
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           
  2764                           ;psect for function _PMD_Initialize
  2765  05A7                     _PMD_Initialize:	
  2766                           
  2767                           ;mcc.c: 74: PMD0 = 0x00;
  2768                           
  2769                           ;incstack = 0
  2770                           ; Regs used in _PMD_Initialize: [status,2]
  2771  05A7  002F               	movlb	15	; select bank15
  2772  05A8  0196               	clrf	22	;volatile
  2773                           
  2774                           ;mcc.c: 76: PMD1 = 0x00;
  2775  05A9  0197               	clrf	23	;volatile
  2776                           
  2777                           ;mcc.c: 78: PMD2 = 0x00;
  2778  05AA  0198               	clrf	24	;volatile
  2779                           
  2780                           ;mcc.c: 80: PMD3 = 0x00;
  2781  05AB  0199               	clrf	25	;volatile
  2782                           
  2783                           ;mcc.c: 82: PMD4 = 0x00;
  2784  05AC  019A               	clrf	26	;volatile
  2785                           
  2786                           ;mcc.c: 84: PMD5 = 0x00;
  2787  05AD  019B               	clrf	27	;volatile
  2788  05AE  0008               	return
  2789  05AF                     __end_of_PMD_Initialize:	
  2790  05AF                     __ptext22:	
  2791 ;; *************** function ___awtoft *****************
  2792 ;; Defined at:
  2793 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  c               2    8[COMMON] int 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  sign            1   11[COMMON] unsigned char 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  3    8[COMMON] float 
  2800 ;; Registers used:
  2801 ;;		wreg, status,2, status,0, pclath, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 1F/0
  2804 ;;		On exit  : 1E/0
  2805 ;;		Unchanged: 1E/0
  2806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2807 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2808 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2810 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2811 ;;Total ram usage:        4 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    1
  2814 ;; This function calls:
  2815 ;;		___ftpack
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function ___awtoft
  2823  05AF                     ___awtoft:	
  2824                           
  2825                           ;incstack = 0
  2826                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  2827  05AF  01FB               	clrf	___awtoft@sign
  2828  05B0  1FF9               	btfss	___awtoft@c+1,7
  2829  05B1  2DB9               	goto	l3051
  2830  05B2  09F8               	comf	___awtoft@c,f
  2831  05B3  09F9               	comf	___awtoft@c+1,f
  2832  05B4  0AF8               	incf	___awtoft@c,f
  2833  05B5  1903               	skipnz
  2834  05B6  0AF9               	incf	___awtoft@c+1,f
  2835  05B7  01FB               	clrf	___awtoft@sign
  2836  05B8  0AFB               	incf	___awtoft@sign,f
  2837  05B9                     l3051:	
  2838  05B9  0878               	movf	___awtoft@c,w
  2839  05BA  00F0               	movwf	___ftpack@arg
  2840  05BB  0879               	movf	___awtoft@c+1,w
  2841  05BC  00F1               	movwf	___ftpack@arg+1
  2842  05BD  308E               	movlw	142
  2843  05BE  01F2               	clrf	___ftpack@arg+2
  2844  05BF  00F3               	movwf	___ftpack@exp
  2845  05C0  087B               	movf	___awtoft@sign,w
  2846  05C1  00F4               	movwf	___ftpack@sign
  2847  05C2  26DF               	fcall	___ftpack
  2848  05C3  0870               	movf	?___ftpack,w
  2849  05C4  00F8               	movwf	?___awtoft
  2850  05C5  0871               	movf	?___ftpack+1,w
  2851  05C6  00F9               	movwf	?___awtoft+1
  2852  05C7  0872               	movf	?___ftpack+2,w
  2853  05C8  00FA               	movwf	?___awtoft+2
  2854  05C9  0008               	return
  2855  05CA                     __end_of___awtoft:	
  2856  05CA                     __ptext6:	
  2857 ;; *************** function _fround *****************
  2858 ;; Defined at:
  2859 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  prec            1    wreg     unsigned char 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  prec            1   31[BANK0 ] unsigned char 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  3   21[BANK0 ] unsigned char 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 1F/1
  2870 ;;		On exit  : 1F/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2873 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2874 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2876 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2877 ;;Total ram usage:       11 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    2
  2880 ;; This function calls:
  2881 ;;		___ftmul
  2882 ;;		___lbdiv
  2883 ;;		___lbmod
  2884 ;;		___wmul
  2885 ;; This function is called by:
  2886 ;;		_sprintf
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           
  2891                           ;psect for function _fround
  2892  05CA                     _fround:	
  2893                           
  2894                           ;incstack = 0
  2895                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2896                           ;fround@prec stored from wreg
  2897  05CA  0020               	movlb	0	; select bank0
  2898  05CB  00BF               	movwf	fround@prec
  2899                           
  2900                           ;doprnt.c: 413: if(prec>=110)
  2901  05CC  306E               	movlw	110
  2902  05CD  023F               	subwf	fround@prec,w
  2903  05CE  1C03               	skipc
  2904  05CF  2E15               	goto	l2371
  2905                           
  2906                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2907  05D0  300A               	movlw	10
  2908  05D1  00F5               	movwf	___lbdiv@divisor
  2909  05D2  3064               	movlw	100
  2910  05D3  00F0               	movwf	___lbmod@divisor
  2911  05D4  083F               	movf	fround@prec,w
  2912  05D5  26C7  3184         	fcall	___lbmod
  2913  05D7  26AF  3184         	fcall	___lbdiv
  2914  05D9  27CF               	fcall	PL42	;call to abstracted procedure
  2915  05DA  318D  2505  3184   	fcall	___wmul
  2916  05DD  27B7               	fcall	PL18	;call to abstracted procedure
  2917  05DE  318D  25B1  3184   	fcall	PL6	;call to abstracted procedure
  2918  05E1  3064               	movlw	100
  2919  05E2  00F5               	movwf	___lbdiv@divisor
  2920  05E3  083F               	movf	fround@prec,w
  2921  05E4  26AF  3184         	fcall	___lbdiv
  2922  05E6  27CF               	fcall	PL42	;call to abstracted procedure
  2923  05E7  318D  2505  3184   	fcall	___wmul
  2924  05EA  27C8               	fcall	PL34	;call to abstracted procedure
  2925  05EB  318D  25C2  3184   	fcall	PL12	;call to abstracted procedure
  2926  05EE  2652  3184         	fcall	___ftmul
  2927  05F0  27F1  3184         	fcall	PL86	;call to abstracted procedure
  2928                           
  2929                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2930  05F2  300A               	movlw	10
  2931  05F3  00F0               	movwf	___lbmod@divisor
  2932  05F4  083F               	movf	fround@prec,w
  2933  05F5  26C7  3184         	fcall	___lbmod
  2934  05F7  27CF               	fcall	PL42	;call to abstracted procedure
  2935  05F8  318D  2505  3184   	fcall	___wmul
  2936  05FB  0821               	movf	?___wmul+1,w
  2937  05FC  279F  3184         	fcall	PL4	;call to abstracted procedure
  2938  05FE  27EA  3184         	fcall	PL82	;call to abstracted procedure
  2939  0600  2652  3184         	fcall	___ftmul
  2940  0602  0826               	movf	?___ftmul,w
  2941  0603  00B9               	movwf	_fround$790
  2942  0604  0827               	movf	?___ftmul+1,w
  2943  0605  00BA               	movwf	_fround$790+1
  2944  0606  0828               	movf	?___ftmul+2,w
  2945  0607  00BB               	movwf	_fround$790+2
  2946                           
  2947                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2948  0608  303F               	movlw	63
  2949  0609  01A6               	clrf	___ftmul@f1
  2950  060A  01A7               	clrf	___ftmul@f1+1
  2951  060B  00A8               	movwf	___ftmul@f1+2
  2952  060C  0839               	movf	_fround$790,w
  2953  060D  00A9               	movwf	___ftmul@f2
  2954  060E  083A               	movf	_fround$790+1,w
  2955  060F  00AA               	movwf	___ftmul@f2+1
  2956  0610  083B               	movf	_fround$790+2,w
  2957  0611  00AB               	movwf	___ftmul@f2+2
  2958  0612  2652  3184         	fcall	___ftmul
  2959  0614  2FD5               	ljmp	PL58	;call to abstracted procedure
  2960  0615                     l2371:	
  2961                           
  2962                           ;doprnt.c: 415: else if(prec > 10)
  2963  0615  300B               	movlw	11
  2964  0616  023F               	subwf	fround@prec,w
  2965  0617  1C03               	skipc
  2966  0618  2E3F               	goto	l2379
  2967                           
  2968                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2969  0619  300A               	movlw	10
  2970  061A  00F0               	movwf	___lbmod@divisor
  2971  061B  083F               	movf	fround@prec,w
  2972  061C  26C7  3184         	fcall	___lbmod
  2973  061E  27CF               	fcall	PL42	;call to abstracted procedure
  2974  061F  318D  2505  3184   	fcall	___wmul
  2975  0622  0821               	movf	?___wmul+1,w
  2976  0623  279F  3184         	fcall	PL4	;call to abstracted procedure
  2977  0625  300A               	movlw	10
  2978  0626  00F5               	movwf	___lbdiv@divisor
  2979  0627  083F               	movf	fround@prec,w
  2980  0628  26AF  3184         	fcall	___lbdiv
  2981  062A  27CF               	fcall	PL42	;call to abstracted procedure
  2982  062B  318D  2505  3184   	fcall	___wmul
  2983  062E  27B7               	fcall	PL18	;call to abstracted procedure
  2984  062F  318D  25C2  3184   	fcall	PL12	;call to abstracted procedure
  2985  0632  2652  3184         	fcall	___ftmul
  2986  0634  27F1  3184         	fcall	PL86	;call to abstracted procedure
  2987                           
  2988                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2989  0636  303F               	movlw	63
  2990  0637  01A6               	clrf	___ftmul@f1
  2991  0638  01A7               	clrf	___ftmul@f1+1
  2992  0639  00A8               	movwf	___ftmul@f1+2
  2993  063A  27EA  3184         	fcall	PL82	;call to abstracted procedure
  2994  063C  2652  3184         	fcall	___ftmul
  2995  063E  2FD5               	ljmp	PL58	;call to abstracted procedure
  2996  063F                     l2379:	
  2997                           
  2998                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2999  063F  303F               	movlw	63
  3000  0640  01A6               	clrf	___ftmul@f1
  3001  0641  01A7               	clrf	___ftmul@f1+1
  3002  0642  00A8               	movwf	___ftmul@f1+2
  3003  0643  083F               	movf	fround@prec,w
  3004  0644  27CF               	fcall	PL42	;call to abstracted procedure
  3005  0645  318D  2505  3184   	fcall	___wmul
  3006  0648  27AD  3184         	fcall	PL8	;call to abstracted procedure
  3007  064A  00A9               	movwf	___ftmul@f2
  3008  064B  3F01               	moviw [1]fsr0
  3009  064C  00AA               	movwf	___ftmul@f2+1
  3010  064D  3F02               	moviw [2]fsr0
  3011  064E  00AB               	movwf	___ftmul@f2+2
  3012  064F  2652  3184         	fcall	___ftmul
  3013  0651  2FD5               	ljmp	PL58	;call to abstracted procedure
  3014  0652                     __end_of_fround:	
  3015  0652                     __ptext10:	
  3016 ;; *************** function ___ftmul *****************
  3017 ;; Defined at:
  3018 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;  f1              3    6[BANK0 ] float 
  3021 ;;  f2              3    9[BANK0 ] float 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;  f3_as_produc    3   16[BANK0 ] unsigned um
  3024 ;;  sign            1   20[BANK0 ] unsigned char 
  3025 ;;  cntr            1   19[BANK0 ] unsigned char 
  3026 ;;  exp             1   15[BANK0 ] unsigned char 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  3    6[BANK0 ] float 
  3029 ;; Registers used:
  3030 ;;		wreg, status,2, status,0, pclath, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 1F/0
  3033 ;;		On exit  : 1F/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3036 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3037 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3038 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3039 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3040 ;;Total ram usage:       15 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    1
  3043 ;; This function calls:
  3044 ;;		___ftpack
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;;		_fround
  3048 ;;		_scale
  3049 ;;		_sprintf
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function ___ftmul
  3055  0652                     ___ftmul:	
  3056                           
  3057                           ;incstack = 0
  3058                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3059  0652  0826               	movf	___ftmul@f1,w
  3060  0653  00AC               	movwf	??___ftmul
  3061  0654  0827               	movf	___ftmul@f1+1,w
  3062  0655  00AD               	movwf	??___ftmul+1
  3063  0656  0828               	movf	___ftmul@f1+2,w
  3064  0657  00AE               	movwf	??___ftmul+2
  3065  0658  1003               	clrc
  3066  0659  0D2D               	rlf	??___ftmul+1,w
  3067  065A  0D2E               	rlf	??___ftmul+2,w
  3068  065B  00AF               	movwf	___ftmul@exp
  3069  065C  082F               	movf	___ftmul@exp,w
  3070  065D  1D03               	btfss	3,2
  3071  065E  2E60               	goto	l2199
  3072  065F  2FFC               	ljmp	PL100	;call to abstracted procedure
  3073  0660                     l2199:	
  3074  0660  0829               	movf	___ftmul@f2,w
  3075  0661  00AC               	movwf	??___ftmul
  3076  0662  082A               	movf	___ftmul@f2+1,w
  3077  0663  00AD               	movwf	??___ftmul+1
  3078  0664  082B               	movf	___ftmul@f2+2,w
  3079  0665  00AE               	movwf	??___ftmul+2
  3080  0666  1003               	clrc
  3081  0667  0D2D               	rlf	??___ftmul+1,w
  3082  0668  0D2E               	rlf	??___ftmul+2,w
  3083  0669  00B4               	movwf	___ftmul@sign
  3084  066A  0834               	movf	___ftmul@sign,w
  3085  066B  1D03               	btfss	3,2
  3086  066C  2E6E               	goto	l2203
  3087  066D  2FFC               	ljmp	PL100	;call to abstracted procedure
  3088  066E                     l2203:	
  3089  066E  0834               	movf	___ftmul@sign,w
  3090  066F  3E7B               	addlw	123
  3091  0670  07AF               	addwf	___ftmul@exp,f
  3092  0671  0828               	movf	___ftmul@f1+2,w
  3093  0672  00B4               	movwf	___ftmul@sign
  3094  0673  082B               	movf	___ftmul@f2+2,w
  3095  0674  06B4               	xorwf	___ftmul@sign,f
  3096  0675  3080               	movlw	128
  3097  0676  05B4               	andwf	___ftmul@sign,f
  3098  0677  30FF               	movlw	255
  3099  0678  17A7               	bsf	___ftmul@f1+1,7
  3100  0679  17AA               	bsf	___ftmul@f2+1,7
  3101  067A  05A9               	andwf	___ftmul@f2,f
  3102  067B  05AA               	andwf	___ftmul@f2+1,f
  3103  067C  3007               	movlw	7
  3104  067D  01AB               	clrf	___ftmul@f2+2
  3105  067E  01B0               	clrf	___ftmul@f3_as_product
  3106  067F  01B1               	clrf	___ftmul@f3_as_product+1
  3107  0680  01B2               	clrf	___ftmul@f3_as_product+2
  3108  0681  00B3               	movwf	___ftmul@cntr
  3109  0682                     l2221:	
  3110  0682  1C26               	btfss	___ftmul@f1,0
  3111  0683  2E86               	goto	l2225
  3112  0684  27DC  3184         	fcall	PL74	;call to abstracted procedure
  3113  0686                     l2225:	
  3114  0686  36A8               	lsrf	___ftmul@f1+2,f
  3115  0687  0CA7               	rrf	___ftmul@f1+1,f
  3116  0688  0CA6               	rrf	___ftmul@f1,f
  3117  0689  35A9               	lslf	___ftmul@f2,f
  3118  068A  0DAA               	rlf	___ftmul@f2+1,f
  3119  068B  0DAB               	rlf	___ftmul@f2+2,f
  3120  068C  0BB3               	decfsz	___ftmul@cntr,f
  3121  068D  2E82               	goto	l2221
  3122  068E  3009               	movlw	9
  3123  068F  00B3               	movwf	___ftmul@cntr
  3124  0690                     l2233:	
  3125  0690  1C26               	btfss	___ftmul@f1,0
  3126  0691  2E94               	goto	l2237
  3127  0692  27DC  3184         	fcall	PL74	;call to abstracted procedure
  3128  0694                     l2237:	
  3129  0694  36A8               	lsrf	___ftmul@f1+2,f
  3130  0695  0CA7               	rrf	___ftmul@f1+1,f
  3131  0696  0CA6               	rrf	___ftmul@f1,f
  3132  0697  36B2               	lsrf	___ftmul@f3_as_product+2,f
  3133  0698  0CB1               	rrf	___ftmul@f3_as_product+1,f
  3134  0699  0CB0               	rrf	___ftmul@f3_as_product,f
  3135  069A  0BB3               	decfsz	___ftmul@cntr,f
  3136  069B  2E90               	goto	l2233
  3137  069C  0830               	movf	___ftmul@f3_as_product,w
  3138  069D  00F0               	movwf	___ftpack@arg
  3139  069E  0831               	movf	___ftmul@f3_as_product+1,w
  3140  069F  00F1               	movwf	___ftpack@arg+1
  3141  06A0  0832               	movf	___ftmul@f3_as_product+2,w
  3142  06A1  00F2               	movwf	___ftpack@arg+2
  3143  06A2  082F               	movf	___ftmul@exp,w
  3144  06A3  00F3               	movwf	___ftpack@exp
  3145  06A4  0834               	movf	___ftmul@sign,w
  3146  06A5  00F4               	movwf	___ftpack@sign
  3147  06A6  26DF               	fcall	___ftpack
  3148  06A7  0870               	movf	?___ftpack,w
  3149  06A8  0020               	movlb	0	; select bank0
  3150  06A9  00A6               	movwf	?___ftmul
  3151  06AA  0871               	movf	?___ftpack+1,w
  3152  06AB  00A7               	movwf	?___ftmul+1
  3153  06AC  0872               	movf	?___ftpack+2,w
  3154  06AD  00A8               	movwf	?___ftmul+2
  3155  06AE  0008               	return
  3156  06AF                     __end_of___ftmul:	
  3157  06AF                     __ptext9:	
  3158 ;; *************** function ___lbdiv *****************
  3159 ;; Defined at:
  3160 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbdiv.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  dividend        1    wreg     unsigned char 
  3163 ;;  divisor         1    5[COMMON] unsigned char 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  dividend        1    6[COMMON] unsigned char 
  3166 ;;  quotient        1    8[COMMON] unsigned char 
  3167 ;;  counter         1    7[COMMON] unsigned char 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      unsigned char 
  3170 ;; Registers used:
  3171 ;;		wreg, status,2, status,0
  3172 ;; Tracked objects:
  3173 ;;		On entry : 1F/0
  3174 ;;		On exit  : 1F/0
  3175 ;;		Unchanged: 1F/0
  3176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3177 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3178 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;Total ram usage:        4 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; This function calls:
  3184 ;;		Nothing
  3185 ;; This function is called by:
  3186 ;;		_fround
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           
  3191                           ;psect for function ___lbdiv
  3192  06AF                     ___lbdiv:	
  3193                           
  3194                           ;incstack = 0
  3195                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3196                           ;___lbdiv@dividend stored from wreg
  3197  06AF  00F6               	movwf	___lbdiv@dividend
  3198  06B0  01F8               	clrf	___lbdiv@quotient
  3199  06B1  0875               	movf	___lbdiv@divisor,w
  3200  06B2  1903               	btfsc	3,2
  3201  06B3  2EC5               	goto	l2267
  3202  06B4  01F7               	clrf	___lbdiv@counter
  3203  06B5                     l2253:	
  3204  06B5  0AF7               	incf	___lbdiv@counter,f
  3205  06B6  1BF5               	btfsc	___lbdiv@divisor,7
  3206  06B7  2EBA               	goto	l693
  3207  06B8  35F5               	lslf	___lbdiv@divisor,f
  3208  06B9  2EB5               	goto	l2253
  3209  06BA                     l693:	
  3210  06BA  35F8               	lslf	___lbdiv@quotient,f
  3211  06BB  0875               	movf	___lbdiv@divisor,w
  3212  06BC  0276               	subwf	___lbdiv@dividend,w
  3213  06BD  1C03               	skipc
  3214  06BE  2EC2               	goto	l2263
  3215  06BF  0875               	movf	___lbdiv@divisor,w
  3216  06C0  02F6               	subwf	___lbdiv@dividend,f
  3217  06C1  1478               	bsf	___lbdiv@quotient,0
  3218  06C2                     l2263:	
  3219  06C2  36F5               	lsrf	___lbdiv@divisor,f
  3220  06C3  0BF7               	decfsz	___lbdiv@counter,f
  3221  06C4  2EBA               	goto	l693
  3222  06C5                     l2267:	
  3223  06C5  0878               	movf	___lbdiv@quotient,w
  3224  06C6  0008               	return
  3225  06C7                     __end_of___lbdiv:	
  3226  06C7                     __ptext8:	
  3227 ;; *************** function ___lbmod *****************
  3228 ;; Defined at:
  3229 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lbmod.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  dividend        1    wreg     unsigned char 
  3232 ;;  divisor         1    0[COMMON] unsigned char 
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;  dividend        1    2[COMMON] unsigned char 
  3235 ;;  rem             1    4[COMMON] unsigned char 
  3236 ;;  counter         1    3[COMMON] unsigned char 
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  1    wreg      unsigned char 
  3239 ;; Registers used:
  3240 ;;		wreg, status,2, status,0
  3241 ;; Tracked objects:
  3242 ;;		On entry : 1F/0
  3243 ;;		On exit  : 1F/0
  3244 ;;		Unchanged: 1F/0
  3245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3246 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3247 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3249 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3250 ;;Total ram usage:        5 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; This function calls:
  3253 ;;		Nothing
  3254 ;; This function is called by:
  3255 ;;		_fround
  3256 ;; This function uses a non-reentrant model
  3257 ;;
  3258                           
  3259                           
  3260                           ;psect for function ___lbmod
  3261  06C7                     ___lbmod:	
  3262                           
  3263                           ;incstack = 0
  3264                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3265                           ;___lbmod@dividend stored from wreg
  3266  06C7  00F2               	movwf	___lbmod@dividend
  3267  06C8  3008               	movlw	8
  3268  06C9  00F3               	movwf	___lbmod@counter
  3269  06CA  01F4               	clrf	___lbmod@rem
  3270  06CB                     l2275:	
  3271  06CB  0872               	movf	___lbmod@dividend,w
  3272  06CC  00F1               	movwf	??___lbmod
  3273  06CD  3007               	movlw	7
  3274  06CE                     u2305:	
  3275  06CE  36F1               	lsrf	??___lbmod,f
  3276  06CF  0B89               	decfsz	9,f
  3277  06D0  2ECE               	goto	u2305
  3278  06D1  3574               	lslf	___lbmod@rem,w
  3279  06D2  0471               	iorwf	??___lbmod,w
  3280  06D3  00F4               	movwf	___lbmod@rem
  3281  06D4  35F2               	lslf	___lbmod@dividend,f
  3282  06D5  0870               	movf	___lbmod@divisor,w
  3283  06D6  0274               	subwf	___lbmod@rem,w
  3284  06D7  1C03               	skipc
  3285  06D8  2EDB               	goto	l2283
  3286  06D9  0870               	movf	___lbmod@divisor,w
  3287  06DA  02F4               	subwf	___lbmod@rem,f
  3288  06DB                     l2283:	
  3289  06DB  0BF3               	decfsz	___lbmod@counter,f
  3290  06DC  2ECB               	goto	l2275
  3291  06DD  0874               	movf	___lbmod@rem,w
  3292  06DE  0008               	return
  3293  06DF                     __end_of___lbmod:	
  3294  06DF                     __ptext23:	
  3295 ;; *************** function ___ftpack *****************
  3296 ;; Defined at:
  3297 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  arg             3    0[COMMON] unsigned um
  3300 ;;  exp             1    3[COMMON] unsigned char 
  3301 ;;  sign            1    4[COMMON] unsigned char 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  3    0[COMMON] float 
  3306 ;; Registers used:
  3307 ;;		wreg, status,2, status,0
  3308 ;; Tracked objects:
  3309 ;;		On entry : 1E/0
  3310 ;;		On exit  : 1E/0
  3311 ;;		Unchanged: 1E/0
  3312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3313 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3315 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3316 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3317 ;;Total ram usage:        8 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; This function calls:
  3320 ;;		Nothing
  3321 ;; This function is called by:
  3322 ;;		___awtoft
  3323 ;;		___ftadd
  3324 ;;		___ftdiv
  3325 ;;		___ftmul
  3326 ;;		___lltoft
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           
  3331                           ;psect for function ___ftpack
  3332  06DF                     ___ftpack:	
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3336  06DF  0873               	movf	___ftpack@exp,w
  3337  06E0  1903               	btfsc	3,2
  3338  06E1  2EE7               	goto	l565
  3339  06E2  0872               	movf	___ftpack@arg+2,w
  3340  06E3  0471               	iorwf	___ftpack@arg+1,w
  3341  06E4  0470               	iorwf	___ftpack@arg,w
  3342  06E5  1D03               	skipz
  3343  06E6  2EEF               	goto	l1989
  3344  06E7                     l565:	
  3345  06E7  01F0               	clrf	?___ftpack
  3346  06E8  01F1               	clrf	?___ftpack+1
  3347  06E9  01F2               	clrf	?___ftpack+2
  3348  06EA  0008               	return
  3349  06EB                     l1987:	
  3350  06EB  0AF3               	incf	___ftpack@exp,f
  3351  06EC  36F2               	lsrf	___ftpack@arg+2,f
  3352  06ED  0CF1               	rrf	___ftpack@arg+1,f
  3353  06EE  0CF0               	rrf	___ftpack@arg,f
  3354  06EF                     l1989:	
  3355  06EF  30FE               	movlw	254
  3356  06F0  0572               	andwf	___ftpack@arg+2,w
  3357  06F1  1903               	btfsc	3,2
  3358  06F2  2EFD               	goto	l1993
  3359  06F3  2EEB               	goto	l1987
  3360  06F4                     l1991:	
  3361  06F4  0AF3               	incf	___ftpack@exp,f
  3362  06F5  0AF0               	incf	___ftpack@arg,f
  3363  06F6  1903               	skipnz
  3364  06F7  0AF1               	incf	___ftpack@arg+1,f
  3365  06F8  1903               	skipnz
  3366  06F9  0AF2               	incf	___ftpack@arg+2,f
  3367  06FA  36F2               	lsrf	___ftpack@arg+2,f
  3368  06FB  0CF1               	rrf	___ftpack@arg+1,f
  3369  06FC  0CF0               	rrf	___ftpack@arg,f
  3370  06FD                     l1993:	
  3371  06FD  30FF               	movlw	255
  3372  06FE  0572               	andwf	___ftpack@arg+2,w
  3373  06FF  1903               	btfsc	3,2
  3374  0700  2F0A               	goto	l1997
  3375  0701  2EF4               	goto	l1991
  3376  0702                     l1999:	
  3377  0702  3002               	movlw	2
  3378  0703  0273               	subwf	___ftpack@exp,w
  3379  0704  1C03               	btfss	3,0
  3380  0705  2F0C               	goto	l577
  3381  0706  03F3               	decf	___ftpack@exp,f
  3382  0707  35F0               	lslf	___ftpack@arg,f
  3383  0708  0DF1               	rlf	___ftpack@arg+1,f
  3384  0709  0DF2               	rlf	___ftpack@arg+2,f
  3385  070A                     l1997:	
  3386  070A  1FF1               	btfss	___ftpack@arg+1,7
  3387  070B  2F02               	goto	l1999
  3388  070C                     l577:	
  3389  070C  1C73               	btfss	___ftpack@exp,0
  3390  070D  13F1               	bcf	___ftpack@arg+1,7
  3391  070E  36F3               	lsrf	___ftpack@exp,f
  3392  070F  0873               	movf	___ftpack@exp,w
  3393  0710  00F7               	movwf	??___ftpack+2
  3394  0711  01F6               	clrf	??___ftpack+1
  3395  0712  01F5               	clrf	??___ftpack
  3396  0713  0875               	movf	??___ftpack,w
  3397  0714  04F0               	iorwf	___ftpack@arg,f
  3398  0715  0876               	movf	??___ftpack+1,w
  3399  0716  04F1               	iorwf	___ftpack@arg+1,f
  3400  0717  0877               	movf	??___ftpack+2,w
  3401  0718  04F2               	iorwf	___ftpack@arg+2,f
  3402  0719  0874               	movf	___ftpack@sign,w
  3403  071A  1D03               	btfss	3,2
  3404  071B  17F2               	bsf	___ftpack@arg+2,7
  3405  071C  0008               	return
  3406  071D                     __end_of___ftpack:	
  3407  071D                     __ptext21:	
  3408 ;; *************** function ___ftdiv *****************
  3409 ;; Defined at:
  3410 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  f2              3   21[BANK0 ] float 
  3413 ;;  f1              3   24[BANK0 ] float 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  f3              3   31[BANK0 ] float 
  3416 ;;  sign            1   35[BANK0 ] unsigned char 
  3417 ;;  exp             1   34[BANK0 ] unsigned char 
  3418 ;;  cntr            1   30[BANK0 ] unsigned char 
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  3   21[BANK0 ] float 
  3421 ;; Registers used:
  3422 ;;		wreg, status,2, status,0, pclath, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 1F/0
  3425 ;;		On exit  : 1F/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3428 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3429 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3430 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3431 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3432 ;;Total ram usage:       15 bytes
  3433 ;; Hardware stack levels used:    1
  3434 ;; Hardware stack levels required when called:    1
  3435 ;; This function calls:
  3436 ;;		___ftpack
  3437 ;; This function is called by:
  3438 ;;		_main
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           
  3443                           ;psect for function ___ftdiv
  3444  071D                     ___ftdiv:	
  3445                           
  3446                           ;incstack = 0
  3447                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3448  071D  0838               	movf	___ftdiv@f1,w
  3449  071E  00BB               	movwf	??___ftdiv
  3450  071F  0839               	movf	___ftdiv@f1+1,w
  3451  0720  00BC               	movwf	??___ftdiv+1
  3452  0721  083A               	movf	___ftdiv@f1+2,w
  3453  0722  00BD               	movwf	??___ftdiv+2
  3454  0723  1003               	clrc
  3455  0724  0D3C               	rlf	??___ftdiv+1,w
  3456  0725  0D3D               	rlf	??___ftdiv+2,w
  3457  0726  00C2               	movwf	___ftdiv@exp
  3458  0727  0842               	movf	___ftdiv@exp,w
  3459  0728  1D03               	btfss	3,2
  3460  0729  2F2B               	goto	l3059
  3461  072A  2FF8               	ljmp	PL96	;call to abstracted procedure
  3462  072B                     l3059:	
  3463  072B  0835               	movf	___ftdiv@f2,w
  3464  072C  00BB               	movwf	??___ftdiv
  3465  072D  0836               	movf	___ftdiv@f2+1,w
  3466  072E  00BC               	movwf	??___ftdiv+1
  3467  072F  0837               	movf	___ftdiv@f2+2,w
  3468  0730  00BD               	movwf	??___ftdiv+2
  3469  0731  1003               	clrc
  3470  0732  0D3C               	rlf	??___ftdiv+1,w
  3471  0733  0D3D               	rlf	??___ftdiv+2,w
  3472  0734  00C3               	movwf	___ftdiv@sign
  3473  0735  0843               	movf	___ftdiv@sign,w
  3474  0736  1D03               	btfss	3,2
  3475  0737  2F39               	goto	l619
  3476  0738  2FF8               	ljmp	PL96	;call to abstracted procedure
  3477  0739                     l619:	
  3478  0739  3089               	movlw	137
  3479  073A  01BF               	clrf	___ftdiv@f3
  3480  073B  01C0               	clrf	___ftdiv@f3+1
  3481  073C  01C1               	clrf	___ftdiv@f3+2
  3482  073D  0743               	addwf	___ftdiv@sign,w
  3483  073E  00BB               	movwf	??___ftdiv
  3484  073F  02C2               	subwf	___ftdiv@exp,f
  3485  0740  083A               	movf	___ftdiv@f1+2,w
  3486  0741  00C3               	movwf	___ftdiv@sign
  3487  0742  0837               	movf	___ftdiv@f2+2,w
  3488  0743  06C3               	xorwf	___ftdiv@sign,f
  3489  0744  3080               	movlw	128
  3490  0745  05C3               	andwf	___ftdiv@sign,f
  3491  0746  3018               	movlw	24
  3492  0747  17B9               	bsf	___ftdiv@f1+1,7
  3493  0748  01BA               	clrf	___ftdiv@f1+2
  3494  0749  17B6               	bsf	___ftdiv@f2+1,7
  3495  074A  01B7               	clrf	___ftdiv@f2+2
  3496  074B  00BE               	movwf	___ftdiv@cntr
  3497  074C                     l3081:	
  3498  074C  35BF               	lslf	___ftdiv@f3,f
  3499  074D  0DC0               	rlf	___ftdiv@f3+1,f
  3500  074E  0DC1               	rlf	___ftdiv@f3+2,f
  3501  074F  0837               	movf	___ftdiv@f2+2,w
  3502  0750  023A               	subwf	___ftdiv@f1+2,w
  3503  0751  1D03               	skipz
  3504  0752  2F59               	goto	u3415
  3505  0753  0836               	movf	___ftdiv@f2+1,w
  3506  0754  0239               	subwf	___ftdiv@f1+1,w
  3507  0755  1D03               	skipz
  3508  0756  2F59               	goto	u3415
  3509  0757  0835               	movf	___ftdiv@f2,w
  3510  0758  0238               	subwf	___ftdiv@f1,w
  3511  0759                     u3415:	
  3512  0759  1C03               	skipc
  3513  075A  2F62               	goto	l3087
  3514  075B  0835               	movf	___ftdiv@f2,w
  3515  075C  02B8               	subwf	___ftdiv@f1,f
  3516  075D  0836               	movf	___ftdiv@f2+1,w
  3517  075E  3BB9               	subwfb	___ftdiv@f1+1,f
  3518  075F  0837               	movf	___ftdiv@f2+2,w
  3519  0760  3BBA               	subwfb	___ftdiv@f1+2,f
  3520  0761  143F               	bsf	___ftdiv@f3,0
  3521  0762                     l3087:	
  3522  0762  35B8               	lslf	___ftdiv@f1,f
  3523  0763  0DB9               	rlf	___ftdiv@f1+1,f
  3524  0764  0DBA               	rlf	___ftdiv@f1+2,f
  3525  0765  0BBE               	decfsz	___ftdiv@cntr,f
  3526  0766  2F4C               	goto	l3081
  3527  0767  083F               	movf	___ftdiv@f3,w
  3528  0768  00F0               	movwf	___ftpack@arg
  3529  0769  0840               	movf	___ftdiv@f3+1,w
  3530  076A  00F1               	movwf	___ftpack@arg+1
  3531  076B  0841               	movf	___ftdiv@f3+2,w
  3532  076C  00F2               	movwf	___ftpack@arg+2
  3533  076D  0842               	movf	___ftdiv@exp,w
  3534  076E  00F3               	movwf	___ftpack@exp
  3535  076F  0843               	movf	___ftdiv@sign,w
  3536  0770  00F4               	movwf	___ftpack@sign
  3537  0771  26DF               	fcall	___ftpack
  3538  0772  0870               	movf	?___ftpack,w
  3539  0773  0020               	movlb	0	; select bank0
  3540  0774  00B5               	movwf	?___ftdiv
  3541  0775  0871               	movf	?___ftpack+1,w
  3542  0776  00B6               	movwf	?___ftdiv+1
  3543  0777  0872               	movf	?___ftpack+2,w
  3544  0778  00B7               	movwf	?___ftdiv+2
  3545  0779  0008               	return
  3546  077A                     __end_of___ftdiv:	
  3547  077A                     __ptext27:	
  3548 ;; *************** function _OSCILLATOR_Initialize *****************
  3549 ;; Defined at:
  3550 ;;		line 57 in file "mcc_generated_files/mcc.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2
  3559 ;; Tracked objects:
  3560 ;;		On entry : B1F/1E
  3561 ;;		On exit  : B1F/11
  3562 ;;		Unchanged: B00/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; This function calls:
  3571 ;;		Nothing
  3572 ;; This function is called by:
  3573 ;;		_SYSTEM_Initialize
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           
  3578                           ;psect for function _OSCILLATOR_Initialize
  3579  077A                     _OSCILLATOR_Initialize:	
  3580  077A                     l2319:	
  3581                           ;incstack = 0
  3582                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3583                           
  3584                           
  3585                           ;mcc.c: 60: OSCCON1 = 0x62;
  3586  077A  3062               	movlw	98
  3587  077B  0031               	movlb	17	; select bank17
  3588  077C  008D               	movwf	13	;volatile
  3589                           
  3590                           ;mcc.c: 62: OSCCON3 = 0x00;
  3591  077D  018F               	clrf	15	;volatile
  3592                           
  3593                           ;mcc.c: 64: OSCEN = 0x00;
  3594  077E  0191               	clrf	17	;volatile
  3595                           
  3596                           ;mcc.c: 66: OSCFRQ = 0x06;
  3597  077F  3006               	movlw	6
  3598  0780  0093               	movwf	19	;volatile
  3599                           
  3600                           ;mcc.c: 68: OSCTUNE = 0x00;
  3601  0781  0192               	clrf	18	;volatile
  3602  0782  0008               	return
  3603  0783                     __end_of_OSCILLATOR_Initialize:	
  3604  0783                     __ptext26:	
  3605 ;; *************** function _PIN_MANAGER_Initialize *****************
  3606 ;; Defined at:
  3607 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;		None
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  1    wreg      void 
  3614 ;; Registers used:
  3615 ;;		wreg, status,2
  3616 ;; Tracked objects:
  3617 ;;		On entry : B1F/F
  3618 ;;		On exit  : B1F/1E
  3619 ;;		Unchanged: B00/0
  3620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3625 ;;Total ram usage:        0 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_SYSTEM_Initialize
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           
  3635                           ;psect for function _PIN_MANAGER_Initialize
  3636  0783                     _PIN_MANAGER_Initialize:	
  3637                           
  3638                           ;pin_manager.c: 60: LATA = 0x00;
  3639                           
  3640                           ;incstack = 0
  3641                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3642  0783  0020               	movlb	0	; select bank0
  3643  0784  0196               	clrf	22	;volatile
  3644                           
  3645                           ;pin_manager.c: 61: LATB = 0x00;
  3646  0785  0197               	clrf	23	;volatile
  3647                           
  3648                           ;pin_manager.c: 62: LATC = 0x00;
  3649  0786  0198               	clrf	24	;volatile
  3650                           
  3651                           ;pin_manager.c: 67: TRISA = 0xFF;
  3652  0787  30FF               	movlw	255
  3653  0788  0091               	movwf	17	;volatile
  3654                           
  3655                           ;pin_manager.c: 68: TRISB = 0xFF;
  3656  0789  0092               	movwf	18	;volatile
  3657                           
  3658                           ;pin_manager.c: 69: TRISC = 0xFF;
  3659  078A  0093               	movwf	19	;volatile
  3660                           
  3661                           ;pin_manager.c: 74: ANSELC = 0xFF;
  3662  078B  003E               	movlb	30	; select bank30
  3663  078C  00CE               	movwf	78	;volatile
  3664                           
  3665                           ;pin_manager.c: 75: ANSELB = 0xFF;
  3666  078D  00C3               	movwf	67	;volatile
  3667                           
  3668                           ;pin_manager.c: 76: ANSELA = 0xFF;
  3669  078E  00B8               	movwf	56	;volatile
  3670                           
  3671                           ;pin_manager.c: 81: WPUE = 0x00;
  3672  078F  01E5               	clrf	101	;volatile
  3673                           
  3674                           ;pin_manager.c: 82: WPUB = 0x00;
  3675  0790  01C4               	clrf	68	;volatile
  3676                           
  3677                           ;pin_manager.c: 83: WPUA = 0x00;
  3678  0791  01B9               	clrf	57	;volatile
  3679                           
  3680                           ;pin_manager.c: 84: WPUC = 0x00;
  3681  0792  01CF               	clrf	79	;volatile
  3682                           
  3683                           ;pin_manager.c: 89: ODCONA = 0x00;
  3684  0793  01BA               	clrf	58	;volatile
  3685                           
  3686                           ;pin_manager.c: 90: ODCONB = 0x00;
  3687  0794  01C5               	clrf	69	;volatile
  3688                           
  3689                           ;pin_manager.c: 91: ODCONC = 0x00;
  3690  0795  01D0               	clrf	80	;volatile
  3691                           
  3692                           ;pin_manager.c: 96: SLRCONA = 0xFF;
  3693  0796  00BB               	movwf	59	;volatile
  3694                           
  3695                           ;pin_manager.c: 97: SLRCONB = 0xFF;
  3696  0797  00C6               	movwf	70	;volatile
  3697                           
  3698                           ;pin_manager.c: 98: SLRCONC = 0xFF;
  3699  0798  00D1               	movwf	81	;volatile
  3700                           
  3701                           ;pin_manager.c: 103: INLVLA = 0xFF;
  3702  0799  00BC               	movwf	60	;volatile
  3703                           
  3704                           ;pin_manager.c: 104: INLVLB = 0xFF;
  3705  079A  00C7               	movwf	71	;volatile
  3706                           
  3707                           ;pin_manager.c: 105: INLVLC = 0xFF;
  3708  079B  00D2               	movwf	82	;volatile
  3709                           
  3710                           ;pin_manager.c: 106: INLVLE = 0x08;
  3711  079C  3008               	movlw	8
  3712  079D  00E8               	movwf	104	;volatile
  3713  079E  0008               	return
  3714  079F                     __end_of_PIN_MANAGER_Initialize:	
  3715  079F                     PL4:	
  3716  079F  0085               	movwf	5
  3717  07A0  0820               	movf	?___wmul,w
  3718  07A1  0084               	movwf	4
  3719  07A2  3027               	movlw	low (__npowers_| (0+32768))
  3720  07A3  0784               	addwf	4,f
  3721  07A4  3090               	movlw	high (__npowers_| (0+32768))
  3722  07A5  3D85               	addwfc	5,f
  3723  07A6  3F00               	moviw [0]fsr0
  3724  07A7  00A6               	movwf	___ftmul@f1
  3725  07A8  3F01               	moviw [1]fsr0
  3726  07A9  00A7               	movwf	___ftmul@f1+1
  3727  07AA  3F02               	moviw [2]fsr0
  3728  07AB  00A8               	movwf	___ftmul@f1+2
  3729  07AC  0008               	return
  3730  07AD                     __end_ofPL4:	
  3731  07AD                     PL8:	
  3732  07AD  0821               	movf	?___wmul+1,w
  3733  07AE  0085               	movwf	5
  3734  07AF  0820               	movf	?___wmul,w
  3735  07B0  0084               	movwf	4
  3736  07B1  3027               	movlw	low (__npowers_| (0+32768))
  3737  07B2  0784               	addwf	4,f
  3738  07B3  3090               	movlw	high (__npowers_| (0+32768))
  3739  07B4  3D85               	addwfc	5,f
  3740  07B5  3F00               	moviw [0]fsr0
  3741  07B6  0008               	return
  3742  07B7                     __end_ofPL8:	
  3743  07B7                     PL18:	
  3744  07B7  0821               	movf	?___wmul+1,w
  3745  07B8  0085               	movwf	5
  3746  07B9  0820               	movf	?___wmul,w
  3747  07BA  0084               	movwf	4
  3748  07BB  3042               	movlw	low ((__npowers_+27)| (0+32768))
  3749  07BC  0784               	addwf	4,f
  3750  07BD  3490               	retlw	high ((__npowers_+27)| (0+32768))
  3751  07BE                     __end_ofPL18:	
  3752  07BE                     PL20:	
  3753  07BE  00F7               	movwf	Lcd_Set_Cursor@temp
  3754  07BF  0E77               	swapf	Lcd_Set_Cursor@temp,w
  3755  07C0  390F               	andlw	15
  3756  07C1  00F5               	movwf	Lcd_Set_Cursor@z
  3757  07C2  0877               	movf	Lcd_Set_Cursor@temp,w
  3758  07C3  00F6               	movwf	Lcd_Set_Cursor@y
  3759  07C4  300F               	movlw	15
  3760  07C5  05F6               	andwf	Lcd_Set_Cursor@y,f
  3761  07C6  0875               	movf	Lcd_Set_Cursor@z,w
  3762  07C7  0008               	return
  3763  07C8                     __end_ofPL20:	
  3764  07C8                     PL34:	
  3765  07C8  0821               	movf	?___wmul+1,w
  3766  07C9  0085               	movwf	5
  3767  07CA  0820               	movf	?___wmul,w
  3768  07CB  0084               	movwf	4
  3769  07CC  305D               	movlw	low ((__npowers_+54)| (0+32768))
  3770  07CD  0784               	addwf	4,f
  3771  07CE  3490               	retlw	high ((__npowers_+54)| (0+32768))
  3772  07CF                     __end_ofPL34:	
  3773  07CF                     PL42:	
  3774  07CF  00A0               	movwf	___wmul@multiplier
  3775  07D0  3003               	movlw	3
  3776  07D1  01A1               	clrf	___wmul@multiplier+1
  3777  07D2  00A2               	movwf	___wmul@multiplicand
  3778  07D3  01A3               	clrf	___wmul@multiplicand+1
  3779  07D4  0008               	return
  3780  07D5                     __end_ofPL42:	
  3781  07D5                     PL58:	
  3782  07D5  0826               	movf	?___ftmul,w
  3783  07D6  00B5               	movwf	?_fround
  3784  07D7  0827               	movf	?___ftmul+1,w
  3785  07D8  00B6               	movwf	?_fround+1
  3786  07D9  0828               	movf	?___ftmul+2,w
  3787  07DA  00B7               	movwf	?_fround+2
  3788  07DB  0008               	return
  3789  07DC                     __end_ofPL58:	
  3790  07DC                     PL74:	
  3791  07DC  0829               	movf	___ftmul@f2,w
  3792  07DD  07B0               	addwf	___ftmul@f3_as_product,f
  3793  07DE  082A               	movf	___ftmul@f2+1,w
  3794  07DF  3DB1               	addwfc	___ftmul@f3_as_product+1,f
  3795  07E0  082B               	movf	___ftmul@f2+2,w
  3796  07E1  3DB2               	addwfc	___ftmul@f3_as_product+2,f
  3797  07E2  0008               	return
  3798  07E3                     __end_ofPL74:	
  3799  07E3                     PL78:	
  3800  07E3  0874               	movf	Lcd_Write_String@a,w
  3801  07E4  0777               	addwf	Lcd_Write_String@i,w
  3802  07E5  0084               	movwf	4
  3803  07E6  0875               	movf	Lcd_Write_String@a+1,w
  3804  07E7  3D78               	addwfc	Lcd_Write_String@i+1,w
  3805  07E8  0085               	movwf	5
  3806  07E9  0008               	return
  3807  07EA                     __end_ofPL78:	
  3808  07EA                     PL82:	
  3809  07EA  083C               	movf	_fround$789,w
  3810  07EB  00A9               	movwf	___ftmul@f2
  3811  07EC  083D               	movf	_fround$789+1,w
  3812  07ED  00AA               	movwf	___ftmul@f2+1
  3813  07EE  083E               	movf	_fround$789+2,w
  3814  07EF  00AB               	movwf	___ftmul@f2+2
  3815  07F0  0008               	return
  3816  07F1                     __end_ofPL82:	
  3817  07F1                     PL86:	
  3818  07F1  0826               	movf	?___ftmul,w
  3819  07F2  00BC               	movwf	_fround$789
  3820  07F3  0827               	movf	?___ftmul+1,w
  3821  07F4  00BD               	movwf	_fround$789+1
  3822  07F5  0828               	movf	?___ftmul+2,w
  3823  07F6  00BE               	movwf	_fround$789+2
  3824  07F7  0008               	return
  3825  07F8                     __end_ofPL86:	
  3826  07F8                     PL96:	
  3827  07F8  01B5               	clrf	?___ftdiv
  3828  07F9  01B6               	clrf	?___ftdiv+1
  3829  07FA  01B7               	clrf	?___ftdiv+2
  3830  07FB  0008               	return
  3831  07FC                     __end_ofPL96:	
  3832  07FC                     PL100:	
  3833  07FC  01A6               	clrf	?___ftmul
  3834  07FD  01A7               	clrf	?___ftmul+1
  3835  07FE  01A8               	clrf	?___ftmul+2
  3836  07FF  0008               	return
  3837  0800                     __end_ofPL100:	
  3838                           
  3839                           	psect	bssBANK0
  3840  005F                     __pbssBANK0:	
  3841  005F                     _distancia:	
  3842  005F                     	ds	3
  3843  0062                     _t_low:	
  3844  0062                     	ds	2
  3845  0064                     _t_high:	
  3846  0064                     	ds	2
  3847                           
  3848                           	psect	bssBANK1
  3849  00B9                     __pbssBANK1:	
  3850  00B9                     _aux:	
  3851  00B9                     	ds	20
  3852                           
  3853                           	psect	clrtext
  3854  0250                     clear_ram0:	
  3855                           ;	Called with FSR0 containing the base address, and
  3856                           ;	WREG with the size to clear
  3857                           
  3858  0250  0064               	clrwdt	;clear the watchdog before getting into this loop
  3859  0251                     clrloop0:	
  3860  0251  0180               	clrf	0	;clear RAM location pointed to by FSR
  3861  0252  3101               	addfsr 0,1
  3862  0253  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3863  0254  2A51               	goto	clrloop0	;have we reached the end yet?
  3864  0255  3400               	retlw	0	;all done for this memory range, return
  3865                           
  3866                           	psect	cstackBANK1
  3867  00A0                     __pcstackBANK1:	
  3868  00A0                     _sprintf$792:	
  3869                           
  3870                           ; 3 bytes @ 0x0
  3871  00A0                     	ds	3
  3872  00A3                     sprintf@ap:	
  3873                           
  3874                           ; 1 bytes @ 0x3
  3875  00A3                     	ds	1
  3876  00A4                     sprintf@val:	
  3877                           
  3878                           ; 4 bytes @ 0x4
  3879  00A4                     	ds	4
  3880  00A8                     sprintf@tmpval:	
  3881                           
  3882                           ; 4 bytes @ 0x8
  3883  00A8                     	ds	4
  3884  00AC                     sprintf@flag:	
  3885                           
  3886                           ; 2 bytes @ 0xC
  3887  00AC                     	ds	2
  3888  00AE                     sprintf@exp:	
  3889                           
  3890                           ; 2 bytes @ 0xE
  3891  00AE                     	ds	2
  3892  00B0                     sprintf@width:	
  3893                           
  3894                           ; 2 bytes @ 0x10
  3895  00B0                     	ds	2
  3896  00B2                     sprintf@fval:	
  3897                           
  3898                           ; 3 bytes @ 0x12
  3899  00B2                     	ds	3
  3900  00B5                     sprintf@prec:	
  3901                           
  3902                           ; 2 bytes @ 0x15
  3903  00B5                     	ds	2
  3904  00B7                     sprintf@sp:	
  3905                           
  3906                           ; 1 bytes @ 0x17
  3907  00B7                     	ds	1
  3908  00B8                     sprintf@c:	
  3909                           
  3910                           ; 1 bytes @ 0x18
  3911  00B8                     	ds	1
  3912                           
  3913                           	psect	cstackCOMMON
  3914  0070                     __pcstackCOMMON:	
  3915  0070                     ?_isdigit:	
  3916  0070                     ?___ftge:	
  3917                           ; 1 bit 
  3918                           
  3919  0070                     ?_PMD_Initialize:	
  3920                           ; 1 bit 
  3921                           
  3922  0070                     ??_PMD_Initialize:	
  3923                           ; 1 bytes @ 0x0
  3924                           
  3925  0070                     ?_OSCILLATOR_Initialize:	
  3926                           ; 1 bytes @ 0x0
  3927                           
  3928  0070                     ??_OSCILLATOR_Initialize:	
  3929                           ; 1 bytes @ 0x0
  3930                           
  3931  0070                     ??_isdigit:	
  3932                           ; 1 bytes @ 0x0
  3933                           
  3934  0070                     ?_PIN_MANAGER_Initialize:	
  3935                           ; 1 bytes @ 0x0
  3936                           
  3937  0070                     ??_PIN_MANAGER_Initialize:	
  3938                           ; 1 bytes @ 0x0
  3939                           
  3940  0070                     ?_SYSTEM_Initialize:	
  3941                           ; 1 bytes @ 0x0
  3942                           
  3943  0070                     ??_SYSTEM_Initialize:	
  3944                           ; 1 bytes @ 0x0
  3945                           
  3946  0070                     ?_Lcd_Port:	
  3947                           ; 1 bytes @ 0x0
  3948                           
  3949  0070                     ??_Lcd_Port:	
  3950                           ; 1 bytes @ 0x0
  3951                           
  3952  0070                     ?_Lcd_Cmd:	
  3953                           ; 1 bytes @ 0x0
  3954                           
  3955  0070                     ?_Lcd_Init:	
  3956                           ; 1 bytes @ 0x0
  3957                           
  3958  0070                     ?_Lcd_Write_Char:	
  3959                           ; 1 bytes @ 0x0
  3960                           
  3961  0070                     ?_main:	
  3962                           ; 1 bytes @ 0x0
  3963                           
  3964  0070                     ?___lbmod:	
  3965                           ; 1 bytes @ 0x0
  3966                           
  3967  0070                     ?_Lcd_Clear:	
  3968                           ; 1 bytes @ 0x0
  3969                           
  3970  0070                     ?___awmod:	
  3971                           ; 2 bytes @ 0x0
  3972                           
  3973  0070                     ?___ftpack:	
  3974                           ; 2 bytes @ 0x0
  3975                           
  3976  0070                     ?___ftneg:	
  3977                           ; 3 bytes @ 0x0
  3978                           
  3979  0070                     ?__tdiv_to_l_:	
  3980                           ; 3 bytes @ 0x0
  3981                           
  3982  0070                     ?__div_to_l_:	
  3983                           ; 4 bytes @ 0x0
  3984                           
  3985  0070                     ?___lldiv:	
  3986                           ; 4 bytes @ 0x0
  3987                           
  3988  0070                     ?___llmod:	
  3989                           ; 4 bytes @ 0x0
  3990                           
  3991  0070                     Lcd_Port@a:	
  3992                           ; 4 bytes @ 0x0
  3993                           
  3994  0070                     _isdigit$558:	
  3995                           ; 1 bytes @ 0x0
  3996                           
  3997  0070                     ___lbmod@divisor:	
  3998                           ; 1 bytes @ 0x0
  3999                           
  4000  0070                     ___awmod@divisor:	
  4001                           ; 1 bytes @ 0x0
  4002                           
  4003  0070                     __div_to_l_@f1:	
  4004                           ; 2 bytes @ 0x0
  4005                           
  4006  0070                     ___ftpack@arg:	
  4007                           ; 3 bytes @ 0x0
  4008                           
  4009  0070                     __tdiv_to_l_@f1:	
  4010                           ; 3 bytes @ 0x0
  4011                           
  4012  0070                     ___ftge@ff1:	
  4013                           ; 3 bytes @ 0x0
  4014                           
  4015  0070                     ___ftneg@f1:	
  4016                           ; 3 bytes @ 0x0
  4017                           
  4018  0070                     ___lldiv@divisor:	
  4019                           ; 3 bytes @ 0x0
  4020                           
  4021  0070                     ___llmod@divisor:	
  4022                           ; 4 bytes @ 0x0
  4023                           
  4024                           
  4025                           ; 4 bytes @ 0x0
  4026  0070                     	ds	1
  4027  0071                     ??_Lcd_Cmd:	
  4028  0071                     ??_Lcd_Write_Char:	
  4029                           ; 1 bytes @ 0x1
  4030                           
  4031  0071                     ??___lbmod:	
  4032                           ; 1 bytes @ 0x1
  4033                           
  4034  0071                     Lcd_Write_Char@temp:	
  4035                           ; 1 bytes @ 0x1
  4036                           
  4037  0071                     isdigit@c:	
  4038                           ; 1 bytes @ 0x1
  4039                           
  4040                           
  4041                           ; 1 bytes @ 0x1
  4042  0071                     	ds	1
  4043  0072                     Lcd_Cmd@a:	
  4044  0072                     Lcd_Write_Char@y:	
  4045                           ; 1 bytes @ 0x2
  4046                           
  4047  0072                     ___lbmod@dividend:	
  4048                           ; 1 bytes @ 0x2
  4049                           
  4050  0072                     ___awmod@dividend:	
  4051                           ; 1 bytes @ 0x2
  4052                           
  4053                           
  4054                           ; 2 bytes @ 0x2
  4055  0072                     	ds	1
  4056  0073                     ??_Lcd_Clear:	
  4057  0073                     ?_Lcd_Set_Cursor:	
  4058                           ; 1 bytes @ 0x3
  4059                           
  4060  0073                     ??_Lcd_Init:	
  4061                           ; 1 bytes @ 0x3
  4062                           
  4063  0073                     ??___ftneg:	
  4064                           ; 1 bytes @ 0x3
  4065                           
  4066  0073                     Lcd_Set_Cursor@b:	
  4067                           ; 1 bytes @ 0x3
  4068                           
  4069  0073                     Lcd_Write_Char@a:	
  4070                           ; 1 bytes @ 0x3
  4071                           
  4072  0073                     ___ftpack@exp:	
  4073                           ; 1 bytes @ 0x3
  4074                           
  4075  0073                     ___lbmod@counter:	
  4076                           ; 1 bytes @ 0x3
  4077                           
  4078  0073                     __div_to_l_@f2:	
  4079                           ; 1 bytes @ 0x3
  4080                           
  4081  0073                     __tdiv_to_l_@f2:	
  4082                           ; 3 bytes @ 0x3
  4083                           
  4084  0073                     ___ftge@ff2:	
  4085                           ; 3 bytes @ 0x3
  4086                           
  4087                           
  4088                           ; 3 bytes @ 0x3
  4089  0073                     	ds	1
  4090  0074                     ??_Lcd_Set_Cursor:	
  4091  0074                     ?_Lcd_Write_String:	
  4092                           ; 1 bytes @ 0x4
  4093                           
  4094  0074                     ??___awmod:	
  4095                           ; 1 bytes @ 0x4
  4096                           
  4097  0074                     Lcd_Set_Cursor@a:	
  4098                           ; 1 bytes @ 0x4
  4099                           
  4100  0074                     ___awmod@counter:	
  4101                           ; 1 bytes @ 0x4
  4102                           
  4103  0074                     ___ftpack@sign:	
  4104                           ; 1 bytes @ 0x4
  4105                           
  4106  0074                     ___lbmod@rem:	
  4107                           ; 1 bytes @ 0x4
  4108                           
  4109  0074                     Lcd_Write_String@a:	
  4110                           ; 1 bytes @ 0x4
  4111                           
  4112  0074                     ___lldiv@dividend:	
  4113                           ; 2 bytes @ 0x4
  4114                           
  4115  0074                     ___llmod@dividend:	
  4116                           ; 4 bytes @ 0x4
  4117                           
  4118                           
  4119                           ; 4 bytes @ 0x4
  4120  0074                     	ds	1
  4121  0075                     ??___ftpack:	
  4122  0075                     ?___lbdiv:	
  4123                           ; 1 bytes @ 0x5
  4124                           
  4125  0075                     Lcd_Set_Cursor@z:	
  4126                           ; 1 bytes @ 0x5
  4127                           
  4128  0075                     ___awmod@sign:	
  4129                           ; 1 bytes @ 0x5
  4130                           
  4131  0075                     ___lbdiv@divisor:	
  4132                           ; 1 bytes @ 0x5
  4133                           
  4134                           
  4135                           ; 1 bytes @ 0x5
  4136  0075                     	ds	1
  4137  0076                     ??__tdiv_to_l_:	
  4138  0076                     ??__div_to_l_:	
  4139                           ; 1 bytes @ 0x6
  4140                           
  4141  0076                     ??_Lcd_Write_String:	
  4142                           ; 1 bytes @ 0x6
  4143                           
  4144  0076                     ??___ftge:	
  4145                           ; 1 bytes @ 0x6
  4146                           
  4147  0076                     ??___lbdiv:	
  4148                           ; 1 bytes @ 0x6
  4149                           
  4150  0076                     ?___awdiv:	
  4151                           ; 1 bytes @ 0x6
  4152                           
  4153  0076                     Lcd_Set_Cursor@y:	
  4154                           ; 2 bytes @ 0x6
  4155                           
  4156  0076                     ___lbdiv@dividend:	
  4157                           ; 1 bytes @ 0x6
  4158                           
  4159  0076                     ___awdiv@divisor:	
  4160                           ; 1 bytes @ 0x6
  4161                           
  4162                           
  4163                           ; 2 bytes @ 0x6
  4164  0076                     	ds	1
  4165  0077                     Lcd_Set_Cursor@temp:	
  4166  0077                     ___lbdiv@counter:	
  4167                           ; 1 bytes @ 0x7
  4168                           
  4169  0077                     Lcd_Write_String@i:	
  4170                           ; 1 bytes @ 0x7
  4171                           
  4172                           
  4173                           ; 2 bytes @ 0x7
  4174  0077                     	ds	1
  4175  0078                     ??___lldiv:	
  4176  0078                     ??___llmod:	
  4177                           ; 1 bytes @ 0x8
  4178                           
  4179  0078                     ?___awtoft:	
  4180                           ; 1 bytes @ 0x8
  4181                           
  4182  0078                     ?___lltoft:	
  4183                           ; 3 bytes @ 0x8
  4184                           
  4185  0078                     ___lbdiv@quotient:	
  4186                           ; 3 bytes @ 0x8
  4187                           
  4188  0078                     ___llmod@counter:	
  4189                           ; 1 bytes @ 0x8
  4190                           
  4191  0078                     ___awdiv@dividend:	
  4192                           ; 1 bytes @ 0x8
  4193                           
  4194  0078                     ___awtoft@c:	
  4195                           ; 2 bytes @ 0x8
  4196                           
  4197  0078                     ___lldiv@quotient:	
  4198                           ; 2 bytes @ 0x8
  4199                           
  4200  0078                     ___lltoft@c:	
  4201                           ; 4 bytes @ 0x8
  4202                           
  4203                           
  4204                           ; 4 bytes @ 0x8
  4205  0078                     	ds	2
  4206  007A                     ??___awdiv:	
  4207  007A                     ___awdiv@counter:	
  4208                           ; 1 bytes @ 0xA
  4209                           
  4210                           
  4211                           ; 1 bytes @ 0xA
  4212  007A                     	ds	1
  4213  007B                     ??___awtoft:	
  4214  007B                     ___awdiv@sign:	
  4215                           ; 1 bytes @ 0xB
  4216                           
  4217  007B                     ___awtoft@sign:	
  4218                           ; 1 bytes @ 0xB
  4219                           
  4220                           
  4221                           ; 1 bytes @ 0xB
  4222  007B                     	ds	1
  4223  007C                     ??___lltoft:	
  4224  007C                     ___lldiv@counter:	
  4225                           ; 1 bytes @ 0xC
  4226                           
  4227  007C                     ___lltoft@exp:	
  4228                           ; 1 bytes @ 0xC
  4229                           
  4230  007C                     ___awdiv@quotient:	
  4231                           ; 1 bytes @ 0xC
  4232                           
  4233                           
  4234                           ; 2 bytes @ 0xC
  4235  007C                     	ds	2
  4236  007E                     ??_fround:	
  4237  007E                     ??_scale:	
  4238                           ; 1 bytes @ 0xE
  4239                           
  4240  007E                     ??___wmul:	
  4241                           ; 1 bytes @ 0xE
  4242                           
  4243  007E                     ??___ftsub:	
  4244                           ; 1 bytes @ 0xE
  4245                           
  4246                           
  4247                           	psect	cstackBANK0
  4248  0020                     __pcstackBANK0:	
  4249                           ; 1 bytes @ 0xE
  4250                           
  4251  0020                     ?___wmul:	
  4252  0020                     ___wmul@multiplier:	
  4253                           ; 2 bytes @ 0x0
  4254                           
  4255  0020                     __div_to_l_@quot:	
  4256                           ; 2 bytes @ 0x0
  4257                           
  4258  0020                     __tdiv_to_l_@quot:	
  4259                           ; 4 bytes @ 0x0
  4260                           
  4261                           
  4262                           ; 4 bytes @ 0x0
  4263  0020                     	ds	2
  4264  0022                     ___wmul@multiplicand:	
  4265                           
  4266                           ; 2 bytes @ 0x2
  4267  0022                     	ds	2
  4268  0024                     __div_to_l_@cntr:	
  4269  0024                     __tdiv_to_l_@cntr:	
  4270                           ; 1 bytes @ 0x4
  4271                           
  4272  0024                     ___wmul@product:	
  4273                           ; 1 bytes @ 0x4
  4274                           
  4275                           
  4276                           ; 2 bytes @ 0x4
  4277  0024                     	ds	1
  4278  0025                     __div_to_l_@exp1:	
  4279  0025                     __tdiv_to_l_@exp1:	
  4280                           ; 1 bytes @ 0x5
  4281                           
  4282                           
  4283                           ; 1 bytes @ 0x5
  4284  0025                     	ds	1
  4285  0026                     ?___ftmul:	
  4286  0026                     ___ftmul@f1:	
  4287                           ; 3 bytes @ 0x6
  4288                           
  4289                           
  4290                           ; 3 bytes @ 0x6
  4291  0026                     	ds	3
  4292  0029                     ___ftmul@f2:	
  4293                           
  4294                           ; 3 bytes @ 0x9
  4295  0029                     	ds	3
  4296  002C                     ??___ftmul:	
  4297                           
  4298                           ; 1 bytes @ 0xC
  4299  002C                     	ds	3
  4300  002F                     ___ftmul@exp:	
  4301                           
  4302                           ; 1 bytes @ 0xF
  4303  002F                     	ds	1
  4304  0030                     ___ftmul@f3_as_product:	
  4305                           
  4306                           ; 3 bytes @ 0x10
  4307  0030                     	ds	3
  4308  0033                     ___ftmul@cntr:	
  4309                           
  4310                           ; 1 bytes @ 0x13
  4311  0033                     	ds	1
  4312  0034                     ___ftmul@sign:	
  4313                           
  4314                           ; 1 bytes @ 0x14
  4315  0034                     	ds	1
  4316  0035                     ?_fround:	
  4317  0035                     ?_scale:	
  4318                           ; 3 bytes @ 0x15
  4319                           
  4320  0035                     ?___ftdiv:	
  4321                           ; 3 bytes @ 0x15
  4322                           
  4323  0035                     ___ftdiv@f2:	
  4324                           ; 3 bytes @ 0x15
  4325                           
  4326                           
  4327                           ; 3 bytes @ 0x15
  4328  0035                     	ds	3
  4329  0038                     ___ftdiv@f1:	
  4330                           
  4331                           ; 3 bytes @ 0x18
  4332  0038                     	ds	1
  4333  0039                     _fround$790:	
  4334  0039                     _scale$791:	
  4335                           ; 3 bytes @ 0x19
  4336                           
  4337                           
  4338                           ; 3 bytes @ 0x19
  4339  0039                     	ds	2
  4340  003B                     ??___ftdiv:	
  4341                           
  4342                           ; 1 bytes @ 0x1B
  4343  003B                     	ds	1
  4344  003C                     scale@scl:	
  4345  003C                     _fround$789:	
  4346                           ; 1 bytes @ 0x1C
  4347                           
  4348                           
  4349                           ; 3 bytes @ 0x1C
  4350  003C                     	ds	1
  4351  003D                     ?___fttol:	
  4352  003D                     ___fttol@f1:	
  4353                           ; 4 bytes @ 0x1D
  4354                           
  4355                           
  4356                           ; 3 bytes @ 0x1D
  4357  003D                     	ds	1
  4358  003E                     ___ftdiv@cntr:	
  4359                           
  4360                           ; 1 bytes @ 0x1E
  4361  003E                     	ds	1
  4362  003F                     fround@prec:	
  4363  003F                     ___ftdiv@f3:	
  4364                           ; 1 bytes @ 0x1F
  4365                           
  4366                           
  4367                           ; 3 bytes @ 0x1F
  4368  003F                     	ds	1
  4369  0040                     ?___ftadd:	
  4370  0040                     ___ftadd@f1:	
  4371                           ; 3 bytes @ 0x20
  4372                           
  4373                           
  4374                           ; 3 bytes @ 0x20
  4375  0040                     	ds	1
  4376  0041                     ??___fttol:	
  4377                           
  4378                           ; 1 bytes @ 0x21
  4379  0041                     	ds	1
  4380  0042                     ___ftdiv@exp:	
  4381                           
  4382                           ; 1 bytes @ 0x22
  4383  0042                     	ds	1
  4384  0043                     ___ftdiv@sign:	
  4385  0043                     ___ftadd@f2:	
  4386                           ; 1 bytes @ 0x23
  4387                           
  4388                           
  4389                           ; 3 bytes @ 0x23
  4390  0043                     	ds	1
  4391  0044                     ___fttol@sign1:	
  4392                           
  4393                           ; 1 bytes @ 0x24
  4394  0044                     	ds	1
  4395  0045                     ___fttol@lval:	
  4396                           
  4397                           ; 4 bytes @ 0x25
  4398  0045                     	ds	1
  4399  0046                     ??___ftadd:	
  4400                           
  4401                           ; 1 bytes @ 0x26
  4402  0046                     	ds	3
  4403  0049                     ___ftadd@sign:	
  4404  0049                     ___fttol@exp1:	
  4405                           ; 1 bytes @ 0x29
  4406                           
  4407                           
  4408                           ; 1 bytes @ 0x29
  4409  0049                     	ds	1
  4410  004A                     ___ftadd@exp2:	
  4411                           
  4412                           ; 1 bytes @ 0x2A
  4413  004A                     	ds	1
  4414  004B                     ___ftadd@exp1:	
  4415                           
  4416                           ; 1 bytes @ 0x2B
  4417  004B                     	ds	1
  4418  004C                     ?___ftsub:	
  4419  004C                     ___ftsub@f2:	
  4420                           ; 3 bytes @ 0x2C
  4421                           
  4422                           
  4423                           ; 3 bytes @ 0x2C
  4424  004C                     	ds	3
  4425  004F                     ___ftsub@f1:	
  4426                           
  4427                           ; 3 bytes @ 0x2F
  4428  004F                     	ds	3
  4429  0052                     ?_sprintf:	
  4430  0052                     sprintf@f:	
  4431                           ; 2 bytes @ 0x32
  4432                           
  4433                           
  4434                           ; 2 bytes @ 0x32
  4435  0052                     	ds	5
  4436  0057                     ??_sprintf:	
  4437                           
  4438                           ; 1 bytes @ 0x37
  4439  0057                     	ds	6
  4440  005D                     ??_main:	
  4441                           
  4442                           ; 1 bytes @ 0x3D
  4443  005D                     	ds	2
  4444                           
  4445                           	psect	text1
  4446  0836                     __ptext1:	
  4447 ;; *************** function _sprintf *****************
  4448 ;; Defined at:
  4449 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  sp              1    wreg     PTR unsigned char 
  4452 ;;		 -> aux(20), 
  4453 ;;  f               2   50[BANK0 ] PTR const unsigned char 
  4454 ;;		 -> STR_2(18), 
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;  sp              1   23[BANK1 ] PTR unsigned char 
  4457 ;;		 -> aux(20), 
  4458 ;;  tmpval          4    8[BANK1 ] struct .
  4459 ;;  val             4    4[BANK1 ] unsigned long 
  4460 ;;  fval            3   18[BANK1 ] unsigned long 
  4461 ;;  prec            2   21[BANK1 ] int 
  4462 ;;  width           2   16[BANK1 ] int 
  4463 ;;  exp             2   14[BANK1 ] int 
  4464 ;;  flag            2   12[BANK1 ] unsigned short 
  4465 ;;  cp              2    0        PTR const unsigned char 
  4466 ;;  len             2    0        unsigned int 
  4467 ;;  c               1   24[BANK1 ] char 
  4468 ;;  ap              1    3[BANK1 ] PTR void [1]
  4469 ;;		 -> ?_sprintf(2), 
  4470 ;;  d               1    0        unsigned char 
  4471 ;; Return value:  Size  Location     Type
  4472 ;;                  2   50[BANK0 ] int 
  4473 ;; Registers used:
  4474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4475 ;; Tracked objects:
  4476 ;;		On entry : 1F/0
  4477 ;;		On exit  : 1F/1
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4480 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4481 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;      Totals:         0      11      25       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;Total ram usage:       36 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    3
  4487 ;; This function calls:
  4488 ;;		___awdiv
  4489 ;;		___ftadd
  4490 ;;		___ftge
  4491 ;;		___ftmul
  4492 ;;		___ftneg
  4493 ;;		___ftsub
  4494 ;;		___fttol
  4495 ;;		___lldiv
  4496 ;;		___llmod
  4497 ;;		___lltoft
  4498 ;;		___wmul
  4499 ;;		__div_to_l_
  4500 ;;		__tdiv_to_l_
  4501 ;;		_fround
  4502 ;;		_isdigit
  4503 ;;		_scale
  4504 ;; This function is called by:
  4505 ;;		_main
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           
  4510                           ;psect for function _sprintf
  4511  0836                     _sprintf:	
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4515                           ;sprintf@sp stored from wreg
  4516  0836  0021               	movlb	1	; select bank1
  4517  0837  00B7               	movwf	sprintf@sp^(0+128)
  4518                           
  4519                           ;doprnt.c: 494: va_list ap;
  4520                           ;doprnt.c: 499: signed char c;
  4521                           ;doprnt.c: 501: int width;
  4522                           ;doprnt.c: 504: int prec;
  4523                           ;doprnt.c: 508: unsigned short flag;
  4524                           ;doprnt.c: 515: char d;
  4525                           ;doprnt.c: 516: double fval;
  4526                           ;doprnt.c: 517: int exp;
  4527                           ;doprnt.c: 523: union {
  4528                           ;doprnt.c: 524: unsigned long vd;
  4529                           ;doprnt.c: 525: double integ;
  4530                           ;doprnt.c: 526: } tmpval;
  4531                           ;doprnt.c: 528: unsigned long val;
  4532                           ;doprnt.c: 529: unsigned len;
  4533                           ;doprnt.c: 530: const char * cp;
  4534                           ;doprnt.c: 533: *ap = __va_start();
  4535  0838  3054               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  4536  0839  00A3               	movwf	sprintf@ap^(0+128)
  4537  083A                     l3037:	
  4538                           ;doprnt.c: 536: while(c = *f++) {
  4539                           
  4540  083A  25F8  3188         	fcall	PL26	;call to abstracted procedure
  4541  083C  0838               	movf	sprintf@c^(0+128),w
  4542  083D  1903               	btfsc	3,2
  4543  083E  2C33               	goto	l3039
  4544                           
  4545                           ;doprnt.c: 538: if(c != '%')
  4546  083F  3025               	movlw	37
  4547  0840  0638               	xorwf	sprintf@c^(0+128),w
  4548  0841  1903               	btfsc	3,2
  4549  0842  2848               	goto	l2749
  4550                           
  4551                           ;doprnt.c: 540: {
  4552                           ;doprnt.c: 541: ((*sp++ = (c)));
  4553  0843  0837               	movf	sprintf@sp^(0+128),w
  4554  0844  0086               	movwf	6
  4555  0845  0187               	clrf	7
  4556  0846  0838               	movf	sprintf@c^(0+128),w
  4557  0847  2C30               	goto	L4
  4558  0848                     l2749:	
  4559                           ;doprnt.c: 542: continue;
  4560                           
  4561                           
  4562                           ;doprnt.c: 543: }
  4563                           ;doprnt.c: 546: width = 0;
  4564  0848  01B0               	clrf	sprintf@width^(0+128)
  4565  0849  01B1               	clrf	(sprintf@width+1)^(0+128)
  4566                           
  4567                           ;doprnt.c: 548: flag = 0;
  4568  084A  01AC               	clrf	sprintf@flag^(0+128)
  4569  084B  01AD               	clrf	(sprintf@flag+1)^(0+128)
  4570  084C  2853               	goto	l2755
  4571  084D                     l222:	
  4572                           ;doprnt.c: 579: case '0':
  4573                           
  4574                           
  4575                           ;doprnt.c: 580: flag |= 0x04;
  4576  084D  0021               	movlb	1	; select bank1
  4577  084E  152C               	bsf	sprintf@flag^(0+128),2
  4578                           
  4579                           ;doprnt.c: 581: f++;
  4580  084F  0020               	movlb	0	; select bank0
  4581  0850  0AD2               	incf	sprintf@f,f
  4582  0851  1903               	skipnz
  4583  0852  0AD3               	incf	sprintf@f+1,f
  4584  0853                     l2755:	
  4585                           ;doprnt.c: 582: continue;
  4586                           
  4587  0853  0020               	movlb	0	; select bank0
  4588  0854  2665  3188         	fcall	PL50	;call to abstracted procedure
  4589                           
  4590                           ; Switch size 1, requested type "space"
  4591                           ; Number of cases is 1, Range of values is 48 to 48
  4592                           ; switch strategies available:
  4593                           ; Name         Instructions Cycles
  4594                           ; simple_byte            4     3 (average)
  4595                           ; direct_byte           11     9 (fixed)
  4596                           ; jumptable            263     9 (fixed)
  4597                           ;	Chosen strategy is simple_byte
  4598  0856  3A30               	xorlw	48	; case 48
  4599  0857  1903               	skipnz
  4600  0858  284D               	goto	l222
  4601  0859  285A               	goto	l2757
  4602  085A                     l2757:	
  4603                           
  4604                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4605  085A  2665  3188         	fcall	PL50	;call to abstracted procedure
  4606  085C  2593  3188         	fcall	_isdigit
  4607  085E  1C03               	btfss	3,0
  4608  085F  2892               	goto	l2769
  4609                           
  4610                           ;doprnt.c: 598: width = 0;
  4611  0860  0021               	movlb	1	; select bank1
  4612  0861  01B0               	clrf	sprintf@width^(0+128)
  4613  0862  01B1               	clrf	(sprintf@width+1)^(0+128)
  4614  0863                     l2761:	
  4615                           
  4616                           ;doprnt.c: 600: width *= 10;
  4617  0863  300A               	movlw	10
  4618  0864  0020               	movlb	0	; select bank0
  4619  0865  00A0               	movwf	___wmul@multiplier
  4620  0866  01A1               	clrf	___wmul@multiplier+1
  4621  0867  0021               	movlb	1	; select bank1
  4622  0868  0831               	movf	(sprintf@width+1)^(0+128),w
  4623  0869  0020               	movlb	0	; select bank0
  4624  086A  00A3               	movwf	___wmul@multiplicand+1
  4625  086B  0021               	movlb	1	; select bank1
  4626  086C  0830               	movf	sprintf@width^(0+128),w
  4627  086D  0020               	movlb	0	; select bank0
  4628  086E  00A2               	movwf	___wmul@multiplicand
  4629  086F  2505  3188         	fcall	___wmul
  4630  0871  0821               	movf	?___wmul+1,w
  4631  0872  0021               	movlb	1	; select bank1
  4632  0873  00B1               	movwf	(sprintf@width+1)^(0+128)
  4633  0874  0020               	movlb	0	; select bank0
  4634  0875  0820               	movf	?___wmul,w
  4635  0876  0021               	movlb	1	; select bank1
  4636  0877  00B0               	movwf	sprintf@width^(0+128)
  4637                           
  4638                           ;doprnt.c: 601: width += *f++ - '0';
  4639  0878  0020               	movlb	0	; select bank0
  4640  0879  2665  3188         	fcall	PL50	;call to abstracted procedure
  4641  087B  3ED0               	addlw	208
  4642  087C  00D7               	movwf	??_sprintf
  4643  087D  30FF               	movlw	255
  4644  087E  1803               	skipnc
  4645  087F  3000               	movlw	0
  4646  0880  00D8               	movwf	??_sprintf+1
  4647  0881  0857               	movf	??_sprintf,w
  4648  0882  0021               	movlb	1	; select bank1
  4649  0883  07B0               	addwf	sprintf@width^(0+128),f
  4650  0884  0020               	movlb	0	; select bank0
  4651  0885  0858               	movf	??_sprintf+1,w
  4652  0886  0021               	movlb	1	; select bank1
  4653  0887  3DB1               	addwfc	(sprintf@width+1)^(0+128),f
  4654  0888  0020               	movlb	0	; select bank0
  4655  0889  0AD2               	incf	sprintf@f,f
  4656  088A  1903               	skipnz
  4657  088B  0AD3               	incf	sprintf@f+1,f
  4658                           
  4659                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4660  088C  2665  3188         	fcall	PL50	;call to abstracted procedure
  4661  088E  2593  3188         	fcall	_isdigit
  4662  0890  1803               	btfsc	3,0
  4663  0891  2863               	goto	l2761
  4664  0892                     l2769:	
  4665                           
  4666                           ;doprnt.c: 608: }
  4667                           ;doprnt.c: 611: if(*f == '.') {
  4668  0892  0852               	movf	sprintf@f,w
  4669  0893  0084               	movwf	4
  4670  0894  0853               	movf	sprintf@f+1,w
  4671  0895  0085               	movwf	5
  4672  0896  0012               	moviw fsr0++
  4673  0897  3A2E               	xorlw	46
  4674  0898  1D03               	btfss	3,2
  4675  0899  28CF               	goto	l2783
  4676                           
  4677                           ;doprnt.c: 612: flag |= 0x4000;
  4678  089A  0021               	movlb	1	; select bank1
  4679  089B  172D               	bsf	(sprintf@flag^(0+128)+1),6
  4680                           
  4681                           ;doprnt.c: 613: f++;
  4682  089C  0020               	movlb	0	; select bank0
  4683  089D  0AD2               	incf	sprintf@f,f
  4684  089E  1903               	skipnz
  4685  089F  0AD3               	incf	sprintf@f+1,f
  4686                           
  4687                           ;doprnt.c: 620: {
  4688                           ;doprnt.c: 621: prec = 0;
  4689  08A0  0021               	movlb	1	; select bank1
  4690  08A1  01B5               	clrf	sprintf@prec^(0+128)
  4691  08A2  01B6               	clrf	(sprintf@prec+1)^(0+128)
  4692  08A3                     l2781:	
  4693                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4694                           
  4695  08A3  0020               	movlb	0	; select bank0
  4696  08A4  2665  3188         	fcall	PL50	;call to abstracted procedure
  4697  08A6  2593  3188         	fcall	_isdigit
  4698  08A8  1C03               	btfss	3,0
  4699  08A9  28D6               	goto	l2789
  4700                           
  4701                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4702  08AA  2665  3188         	fcall	PL50	;call to abstracted procedure
  4703  08AC  00D7               	movwf	??_sprintf
  4704  08AD  01D8               	clrf	??_sprintf+1
  4705  08AE  0021               	movlb	1	; select bank1
  4706  08AF  0836               	movf	(sprintf@prec+1)^(0+128),w
  4707  08B0  0020               	movlb	0	; select bank0
  4708  08B1  00A1               	movwf	___wmul@multiplier+1
  4709  08B2  0021               	movlb	1	; select bank1
  4710  08B3  0835               	movf	sprintf@prec^(0+128),w
  4711  08B4  0020               	movlb	0	; select bank0
  4712  08B5  00A0               	movwf	___wmul@multiplier
  4713  08B6  300A               	movlw	10
  4714  08B7  00A2               	movwf	___wmul@multiplicand
  4715  08B8  01A3               	clrf	___wmul@multiplicand+1
  4716  08B9  2505  3188         	fcall	___wmul
  4717  08BB  0857               	movf	??_sprintf,w
  4718  08BC  0720               	addwf	?___wmul,w
  4719  08BD  00D9               	movwf	??_sprintf+2
  4720  08BE  0858               	movf	??_sprintf+1,w
  4721  08BF  3D21               	addwfc	?___wmul+1,w
  4722  08C0  00DA               	movwf	??_sprintf+3
  4723  08C1  0859               	movf	??_sprintf+2,w
  4724  08C2  3ED0               	addlw	208
  4725  08C3  0021               	movlb	1	; select bank1
  4726  08C4  00B5               	movwf	sprintf@prec^(0+128)
  4727  08C5  30FF               	movlw	255
  4728  08C6  0020               	movlb	0	; select bank0
  4729  08C7  3D5A               	addwfc	??_sprintf+3,w
  4730  08C8  0021               	movlb	1	; select bank1
  4731  08C9  00B6               	movwf	(sprintf@prec+1)^(0+128)
  4732  08CA  0020               	movlb	0	; select bank0
  4733  08CB  0AD2               	incf	sprintf@f,f
  4734  08CC  1903               	skipnz
  4735  08CD  0AD3               	incf	sprintf@f+1,f
  4736  08CE  28A3               	goto	l2781
  4737  08CF                     l2783:	
  4738                           
  4739                           ;doprnt.c: 626: prec = 0;
  4740  08CF  0021               	movlb	1	; select bank1
  4741  08D0  01B5               	clrf	sprintf@prec^(0+128)
  4742  08D1  01B6               	clrf	(sprintf@prec+1)^(0+128)
  4743                           
  4744                           ;doprnt.c: 628: flag |= 0x1000;
  4745  08D2  162D               	bsf	(sprintf@flag^(0+128)+1),4
  4746  08D3  28D6               	goto	l2789
  4747  08D4                     l237:	
  4748                           ;doprnt.c: 662: case 'f':
  4749                           
  4750                           
  4751                           ;doprnt.c: 663: flag |= 0x400;
  4752  08D4  152D               	bsf	(sprintf@flag^(0+128)+1),2
  4753                           
  4754                           ;doprnt.c: 664: break;
  4755  08D5  28DF               	goto	l2791
  4756  08D6                     l2789:	
  4757  08D6  25F8  3188         	fcall	PL26	;call to abstracted procedure
  4758                           
  4759                           ; Switch size 1, requested type "space"
  4760                           ; Number of cases is 2, Range of values is 0 to 102
  4761                           ; switch strategies available:
  4762                           ; Name         Instructions Cycles
  4763                           ; simple_byte            7     4 (average)
  4764                           ; direct_byte          212     6 (fixed)
  4765                           ; jumptable            260     6 (fixed)
  4766                           ;	Chosen strategy is simple_byte
  4767  08D8  3A00               	xorlw	0	; case 0
  4768  08D9  1903               	skipnz
  4769  08DA  2C33               	goto	l3039
  4770  08DB  3A66               	xorlw	102	; case 102
  4771  08DC  1903               	skipnz
  4772  08DD  28D4               	goto	l237
  4773  08DE  283A               	goto	l3037
  4774  08DF                     l2791:	
  4775                           
  4776                           ;doprnt.c: 825: if(flag & (0x700)) {
  4777  08DF  0020               	movlb	0	; select bank0
  4778  08E0  3007               	movlw	7
  4779  08E1  01D7               	clrf	??_sprintf
  4780  08E2  0021               	movlb	1	; select bank1
  4781  08E3  052D               	andwf	(sprintf@flag+1)^(0+128),w
  4782  08E4  0020               	movlb	0	; select bank0
  4783  08E5  00D8               	movwf	??_sprintf+1
  4784  08E6  0457               	iorwf	??_sprintf,w
  4785  08E7  1903               	btfsc	3,2
  4786  08E8  2B8F               	goto	l2975
  4787                           
  4788                           ;doprnt.c: 827: if(flag & 0x1000)
  4789  08E9  0021               	movlb	1	; select bank1
  4790  08EA  1E2D               	btfss	(sprintf@flag+1)^(0+128),4
  4791  08EB  28EF               	goto	l2797
  4792                           
  4793                           ;doprnt.c: 829: prec = 6;
  4794  08EC  3006               	movlw	6
  4795  08ED  00B5               	movwf	sprintf@prec^(0+128)
  4796  08EE  01B6               	clrf	(sprintf@prec+1)^(0+128)
  4797  08EF                     l2797:	
  4798                           
  4799                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4800  08EF  0823               	movf	sprintf@ap^(0+128),w
  4801  08F0  0086               	movwf	6
  4802  08F1  0187               	clrf	7
  4803  08F2  3F40               	moviw [0]fsr1
  4804  08F3  00B2               	movwf	sprintf@fval^(0+128)
  4805  08F4  3F41               	moviw [1]fsr1
  4806  08F5  00B3               	movwf	(sprintf@fval+1)^(0+128)
  4807  08F6  3F42               	moviw [2]fsr1
  4808  08F7  00B4               	movwf	(sprintf@fval+2)^(0+128)
  4809  08F8  3003               	movlw	3
  4810  08F9  07A3               	addwf	sprintf@ap^(0+128),f
  4811                           
  4812                           ;doprnt.c: 831: if(fval < 0.0) {
  4813  08FA  0832               	movf	sprintf@fval^(0+128),w
  4814  08FB  00F0               	movwf	___ftge@ff1
  4815  08FC  0833               	movf	(sprintf@fval+1)^(0+128),w
  4816  08FD  00F1               	movwf	___ftge@ff1+1
  4817  08FE  0834               	movf	(sprintf@fval+2)^(0+128),w
  4818  08FF  00F2               	movwf	___ftge@ff1+2
  4819  0900  01F3               	clrf	___ftge@ff2
  4820  0901  01F4               	clrf	___ftge@ff2+1
  4821  0902  01F5               	clrf	___ftge@ff2+2
  4822  0903  26DD  3188         	fcall	___ftge
  4823  0905  1803               	btfsc	3,0
  4824  0906  2917               	goto	l2807
  4825                           
  4826                           ;doprnt.c: 832: fval = -fval;
  4827  0907  0832               	movf	sprintf@fval^(0+128),w
  4828  0908  00F0               	movwf	___ftneg@f1
  4829  0909  0833               	movf	(sprintf@fval+1)^(0+128),w
  4830  090A  00F1               	movwf	___ftneg@f1+1
  4831  090B  0834               	movf	(sprintf@fval+2)^(0+128),w
  4832  090C  00F2               	movwf	___ftneg@f1+2
  4833  090D  27DA  3188         	fcall	___ftneg
  4834  090F  0870               	movf	?___ftneg,w
  4835  0910  00B2               	movwf	sprintf@fval^(0+128)
  4836  0911  0871               	movf	?___ftneg+1,w
  4837  0912  00B3               	movwf	(sprintf@fval+1)^(0+128)
  4838  0913  0872               	movf	?___ftneg+2,w
  4839  0914  00B4               	movwf	(sprintf@fval+2)^(0+128)
  4840                           
  4841                           ;doprnt.c: 833: flag |= 0x03;
  4842  0915  3003               	movlw	3
  4843  0916  04AC               	iorwf	sprintf@flag^(0+128),f
  4844  0917                     l2807:	
  4845                           
  4846                           ;doprnt.c: 834: }
  4847                           ;doprnt.c: 835: exp = 0;
  4848  0917  01AE               	clrf	sprintf@exp^(0+128)
  4849  0918  01AF               	clrf	(sprintf@exp+1)^(0+128)
  4850                           
  4851                           ;doprnt.c: 836: if( fval!=0) {
  4852  0919  0834               	movf	(sprintf@fval+2)^(0+128),w
  4853  091A  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  4854  091B  0432               	iorwf	sprintf@fval^(0+128),w
  4855  091C  1903               	skipnz
  4856  091D  29A9               	goto	l2839
  4857                           
  4858                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4859  091E  30B2               	movlw	low (sprintf@fval| 0)
  4860  091F  0086               	movwf	6
  4861  0920  0187               	clrf	7
  4862  0921  3F40               	moviw [0]fsr1
  4863  0922  0020               	movlb	0	; select bank0
  4864  0923  00D7               	movwf	??_sprintf
  4865  0924  3F41               	moviw [1]fsr1
  4866  0925  00D8               	movwf	??_sprintf+1
  4867  0926  3F42               	moviw [2]fsr1
  4868  0927  00D9               	movwf	??_sprintf+2
  4869  0928  3F43               	moviw [3]fsr1
  4870  0929  00DA               	movwf	??_sprintf+3
  4871  092A  300F               	movlw	15
  4872  092B                     u2965:	
  4873  092B  36DA               	lsrf	??_sprintf+3,f
  4874  092C  0CD9               	rrf	??_sprintf+2,f
  4875  092D  0CD8               	rrf	??_sprintf+1,f
  4876  092E  0CD7               	rrf	??_sprintf,f
  4877  092F  0B89               	decfsz	9,f
  4878  0930  292B               	goto	u2965
  4879  0931  0858               	movf	??_sprintf+1,w
  4880  0932  0021               	movlb	1	; select bank1
  4881  0933  00AF               	movwf	(sprintf@exp+1)^(0+128)
  4882  0934  0020               	movlb	0	; select bank0
  4883  0935  0857               	movf	??_sprintf,w
  4884  0936  0021               	movlb	1	; select bank1
  4885  0937  00AE               	movwf	sprintf@exp^(0+128)
  4886  0938  3082               	movlw	-126
  4887  0939  01AF               	clrf	(sprintf@exp+1)^(0+128)
  4888  093A  07AE               	addwf	sprintf@exp^(0+128),f
  4889  093B  1C03               	skipc
  4890  093C  03AF               	decf	(sprintf@exp+1)^(0+128),f
  4891                           
  4892                           ;doprnt.c: 838: exp--;
  4893  093D  30FF               	movlw	-1
  4894  093E  07AE               	addwf	sprintf@exp^(0+128),f
  4895  093F  1C03               	skipc
  4896  0940  03AF               	decf	(sprintf@exp+1)^(0+128),f
  4897                           
  4898                           ;doprnt.c: 839: exp *= 3;
  4899  0941  3003               	movlw	3
  4900  0942  0020               	movlb	0	; select bank0
  4901  0943  00A0               	movwf	___wmul@multiplier
  4902  0944  01A1               	clrf	___wmul@multiplier+1
  4903  0945  0021               	movlb	1	; select bank1
  4904  0946  082F               	movf	(sprintf@exp+1)^(0+128),w
  4905  0947  0020               	movlb	0	; select bank0
  4906  0948  00A3               	movwf	___wmul@multiplicand+1
  4907  0949  0021               	movlb	1	; select bank1
  4908  094A  082E               	movf	sprintf@exp^(0+128),w
  4909  094B  0020               	movlb	0	; select bank0
  4910  094C  00A2               	movwf	___wmul@multiplicand
  4911  094D  2505  3188         	fcall	___wmul
  4912  094F  0821               	movf	?___wmul+1,w
  4913  0950  0021               	movlb	1	; select bank1
  4914  0951  00AF               	movwf	(sprintf@exp+1)^(0+128)
  4915  0952  0020               	movlb	0	; select bank0
  4916  0953  0820               	movf	?___wmul,w
  4917  0954  0021               	movlb	1	; select bank1
  4918  0955  00AE               	movwf	sprintf@exp^(0+128)
  4919                           
  4920                           ;doprnt.c: 840: exp /= 10;
  4921  0956  300A               	movlw	10
  4922  0957  00F6               	movwf	___awdiv@divisor
  4923  0958  01F7               	clrf	___awdiv@divisor+1
  4924  0959  082F               	movf	(sprintf@exp+1)^(0+128),w
  4925  095A  00F9               	movwf	___awdiv@dividend+1
  4926  095B  082E               	movf	sprintf@exp^(0+128),w
  4927  095C  00F8               	movwf	___awdiv@dividend
  4928  095D  251A  3188         	fcall	___awdiv
  4929  095F  0877               	movf	?___awdiv+1,w
  4930  0960  0021               	movlb	1	; select bank1
  4931  0961  00AF               	movwf	(sprintf@exp+1)^(0+128)
  4932  0962  0876               	movf	?___awdiv,w
  4933  0963  00AE               	movwf	sprintf@exp^(0+128)
  4934                           
  4935                           ;doprnt.c: 841: if(exp < 0)
  4936  0964  1FAF               	btfss	(sprintf@exp+1)^(0+128),7
  4937  0965  296A               	goto	l2827
  4938                           
  4939                           ;doprnt.c: 842: exp--;
  4940  0966  30FF               	movlw	-1
  4941  0967  07AE               	addwf	sprintf@exp^(0+128),f
  4942  0968  1C03               	skipc
  4943  0969  03AF               	decf	(sprintf@exp+1)^(0+128),f
  4944  096A                     l2827:	
  4945                           
  4946                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4947  096A  032E               	decf	sprintf@exp^(0+128),w
  4948  096B  3AFF               	xorlw	255
  4949  096C  2438  3188         	fcall	_scale
  4950                           
  4951                           ;doprnt.c: 847: tmpval.integ *= fval;
  4952  096E  2658  3188         	fcall	PL48	;call to abstracted procedure
  4953  0970  268A               	fcall	PL60	;call to abstracted procedure
  4954  0971  0021               	movlb	1	; select bank1
  4955  0972  0828               	movf	sprintf@tmpval^(0+128),w
  4956  0973  0020               	movlb	0	; select bank0
  4957  0974  00A9               	movwf	___ftmul@f2
  4958  0975  0021               	movlb	1	; select bank1
  4959  0976  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  4960  0977  0020               	movlb	0	; select bank0
  4961  0978  00AA               	movwf	___ftmul@f2+1
  4962  0979  0021               	movlb	1	; select bank1
  4963  097A  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  4964  097B  0020               	movlb	0	; select bank0
  4965  097C  00AB               	movwf	___ftmul@f2+2
  4966  097D  3186  2652  3188   	fcall	___ftmul
  4967  0980  0826               	movf	?___ftmul,w
  4968  0981  0021               	movlb	1	; select bank1
  4969  0982  00A8               	movwf	sprintf@tmpval^(0+128)
  4970  0983  0020               	movlb	0	; select bank0
  4971  0984  0827               	movf	?___ftmul+1,w
  4972  0985  0021               	movlb	1	; select bank1
  4973  0986  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  4974  0987  0020               	movlb	0	; select bank0
  4975  0988  0828               	movf	?___ftmul+2,w
  4976  0989  0021               	movlb	1	; select bank1
  4977  098A  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  4978                           
  4979                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4980  098B  26A7  3188         	fcall	PL66	;call to abstracted procedure
  4981  098D  3080               	movlw	128
  4982  098E  01F3               	clrf	___ftge@ff2
  4983  098F  00F4               	movwf	___ftge@ff2+1
  4984  0990  303F               	movlw	63
  4985  0991  00F5               	movwf	___ftge@ff2+2
  4986  0992  26DD  3188         	fcall	___ftge
  4987  0994  1803               	btfsc	3,0
  4988  0995  299B               	goto	l2835
  4989                           
  4990                           ;doprnt.c: 849: exp--;
  4991  0996  30FF               	movlw	-1
  4992  0997  07AE               	addwf	sprintf@exp^(0+128),f
  4993  0998  1C03               	skipc
  4994  0999  03AF               	decf	(sprintf@exp+1)^(0+128),f
  4995  099A  29A9               	goto	l2839
  4996  099B                     l2835:	
  4997                           
  4998                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4999  099B  26A7  3188         	fcall	PL66	;call to abstracted procedure
  5000  099D  3020               	movlw	32
  5001  099E  01F3               	clrf	___ftge@ff2
  5002  099F  00F4               	movwf	___ftge@ff2+1
  5003  09A0  3041               	movlw	65
  5004  09A1  00F5               	movwf	___ftge@ff2+2
  5005  09A2  26DD  3188         	fcall	___ftge
  5006  09A4  1C03               	btfss	3,0
  5007  09A5  29A9               	goto	l2839
  5008                           
  5009                           ;doprnt.c: 851: exp++;
  5010  09A6  0AAE               	incf	sprintf@exp^(0+128),f
  5011  09A7  1903               	skipnz
  5012  09A8  0AAF               	incf	(sprintf@exp+1)^(0+128),f
  5013  09A9                     l2839:	
  5014                           
  5015                           ;doprnt.c: 852: }
  5016                           ;doprnt.c: 1112: if(prec <= 12)
  5017  09A9  0836               	movf	(sprintf@prec+1)^(0+128),w
  5018  09AA  2652  3188         	fcall	PL46	;call to abstracted procedure
  5019  09AC  1D03               	skipz
  5020  09AD  29B1               	goto	u3005
  5021  09AE  300D               	movlw	13
  5022  09AF  0021               	movlb	1	; select bank1
  5023  09B0  0235               	subwf	sprintf@prec^(0+128),w
  5024  09B1                     u3005:	
  5025  09B1  1803               	skipnc
  5026  09B2  29D8               	goto	l2843
  5027                           
  5028                           ;doprnt.c: 1113: fval += fround(prec);
  5029  09B3  0021               	movlb	1	; select bank1
  5030  09B4  0835               	movf	sprintf@prec^(0+128),w
  5031  09B5  3185  25CA  3188   	fcall	_fround
  5032  09B8  0835               	movf	?_fround,w
  5033  09B9  00C0               	movwf	___ftadd@f1
  5034  09BA  0836               	movf	?_fround+1,w
  5035  09BB  00C1               	movwf	___ftadd@f1+1
  5036  09BC  0837               	movf	?_fround+2,w
  5037  09BD  00C2               	movwf	___ftadd@f1+2
  5038  09BE  0021               	movlb	1	; select bank1
  5039  09BF  0832               	movf	sprintf@fval^(0+128),w
  5040  09C0  0020               	movlb	0	; select bank0
  5041  09C1  00C3               	movwf	___ftadd@f2
  5042  09C2  0021               	movlb	1	; select bank1
  5043  09C3  0833               	movf	(sprintf@fval+1)^(0+128),w
  5044  09C4  0020               	movlb	0	; select bank0
  5045  09C5  00C4               	movwf	___ftadd@f2+1
  5046  09C6  0021               	movlb	1	; select bank1
  5047  09C7  0834               	movf	(sprintf@fval+2)^(0+128),w
  5048  09C8  0020               	movlb	0	; select bank0
  5049  09C9  00C5               	movwf	___ftadd@f2+2
  5050  09CA  3183  2392  3188   	fcall	___ftadd
  5051  09CD  0840               	movf	?___ftadd,w
  5052  09CE  0021               	movlb	1	; select bank1
  5053  09CF  00B2               	movwf	sprintf@fval^(0+128)
  5054  09D0  0020               	movlb	0	; select bank0
  5055  09D1  0841               	movf	?___ftadd+1,w
  5056  09D2  0021               	movlb	1	; select bank1
  5057  09D3  00B3               	movwf	(sprintf@fval+1)^(0+128)
  5058  09D4  0020               	movlb	0	; select bank0
  5059  09D5  0842               	movf	?___ftadd+2,w
  5060  09D6  0021               	movlb	1	; select bank1
  5061  09D7  00B4               	movwf	(sprintf@fval+2)^(0+128)
  5062  09D8                     l2843:	
  5063                           
  5064                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5065  09D8  0021               	movlb	1	; select bank1
  5066  09D9  082F               	movf	(sprintf@exp+1)^(0+128),w
  5067  09DA  2652  3188         	fcall	PL46	;call to abstracted procedure
  5068  09DC  1D03               	skipz
  5069  09DD  29E1               	goto	u3015
  5070  09DE  300A               	movlw	10
  5071  09DF  0021               	movlb	1	; select bank1
  5072  09E0  022E               	subwf	sprintf@exp^(0+128),w
  5073  09E1                     u3015:	
  5074  09E1  1803               	skipnc
  5075  09E2  29FE               	goto	l2851
  5076  09E3  0021               	movlb	1	; select bank1
  5077  09E4  0834               	movf	(sprintf@fval+2)^(0+128),w
  5078  09E5  0433               	iorwf	(sprintf@fval+1)^(0+128),w
  5079  09E6  0432               	iorwf	sprintf@fval^(0+128),w
  5080  09E7  1903               	skipnz
  5081  09E8  2A30               	goto	l2865
  5082  09E9  266B  3188         	fcall	PL52	;call to abstracted procedure
  5083  09EB  2709  3188         	fcall	___fttol
  5084  09ED  0840               	movf	?___fttol+3,w
  5085  09EE  043F               	iorwf	?___fttol+2,w
  5086  09EF  043E               	iorwf	?___fttol+1,w
  5087  09F0  043D               	iorwf	?___fttol,w
  5088  09F1  1D03               	skipz
  5089  09F2  2A30               	goto	l2865
  5090  09F3  0021               	movlb	1	; select bank1
  5091  09F4  082F               	movf	(sprintf@exp+1)^(0+128),w
  5092  09F5  2652  3188         	fcall	PL46	;call to abstracted procedure
  5093  09F7  1D03               	skipz
  5094  09F8  29FC               	goto	u3045
  5095  09F9  3002               	movlw	2
  5096  09FA  0021               	movlb	1	; select bank1
  5097  09FB  022E               	subwf	sprintf@exp^(0+128),w
  5098  09FC                     u3045:	
  5099  09FC  1C03               	skipc
  5100  09FD  2A30               	goto	l2865
  5101  09FE                     l2851:	
  5102                           
  5103                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5104  09FE  0021               	movlb	1	; select bank1
  5105  09FF  26A7  3188         	fcall	PL66	;call to abstracted procedure
  5106  0A01  3070               	movlw	112
  5107  0A02  00F3               	movwf	___ftge@ff2
  5108  0A03  3089               	movlw	137
  5109  0A04  00F4               	movwf	___ftge@ff2+1
  5110  0A05  3040               	movlw	64
  5111  0A06  00F5               	movwf	___ftge@ff2+2
  5112  0A07  26DD  3188         	fcall	___ftge
  5113  0A09  1803               	btfsc	3,0
  5114  0A0A  2A0D               	goto	l2855
  5115                           
  5116                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5117  0A0B  30F7               	movlw	-9
  5118  0A0C  2A0E               	goto	L1
  5119  0A0D                     l2855:	
  5120                           ;doprnt.c: 1122: }else{
  5121                           
  5122                           
  5123                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5124  0A0D  30F8               	movlw	-8
  5125  0A0E                     L1:	
  5126  0A0E  07AE               	addwf	sprintf@exp^(0+128),f
  5127  0A0F  1C03               	skipc
  5128  0A10  03AF               	decf	(sprintf@exp+1)^(0+128),f
  5129                           
  5130                           ;doprnt.c: 1124: }
  5131                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5132  0A11  082E               	movf	sprintf@exp^(0+128),w
  5133  0A12  2438  3188         	fcall	_scale
  5134                           
  5135                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5136  0A14  2658               	fcall	PL48	;call to abstracted procedure
  5137  0A15  00F0               	movwf	__tdiv_to_l_@f1
  5138  0A16  0833               	movf	(sprintf@fval+1)^(0+128),w
  5139  0A17  00F1               	movwf	__tdiv_to_l_@f1+1
  5140  0A18  0834               	movf	(sprintf@fval+2)^(0+128),w
  5141  0A19  00F2               	movwf	__tdiv_to_l_@f1+2
  5142  0A1A  0828               	movf	sprintf@tmpval^(0+128),w
  5143  0A1B  00F3               	movwf	__tdiv_to_l_@f2
  5144  0A1C  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  5145  0A1D  00F4               	movwf	__tdiv_to_l_@f2+1
  5146  0A1E  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  5147  0A1F  00F5               	movwf	__tdiv_to_l_@f2+2
  5148  0A20  3182  2256  3188   	fcall	__tdiv_to_l_
  5149  0A23  0873               	movf	?__tdiv_to_l_+3,w
  5150  0A24  0021               	movlb	1	; select bank1
  5151  0A25  00A7               	movwf	(sprintf@val+3)^(0+128)
  5152  0A26  0872               	movf	?__tdiv_to_l_+2,w
  5153  0A27  00A6               	movwf	(sprintf@val+2)^(0+128)
  5154  0A28  0871               	movf	?__tdiv_to_l_+1,w
  5155  0A29  00A5               	movwf	(sprintf@val+1)^(0+128)
  5156  0A2A  0870               	movf	?__tdiv_to_l_,w
  5157  0A2B  00A4               	movwf	sprintf@val^(0+128)
  5158                           
  5159                           ;doprnt.c: 1129: fval = 0.0;
  5160  0A2C  01B2               	clrf	sprintf@fval^(0+128)
  5161  0A2D  01B3               	clrf	(sprintf@fval+1)^(0+128)
  5162  0A2E  01B4               	clrf	(sprintf@fval+2)^(0+128)
  5163                           
  5164                           ;doprnt.c: 1130: } else {
  5165  0A2F  2A64               	goto	l2869
  5166  0A30                     l2865:	
  5167                           
  5168                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5169  0A30  0021               	movlb	1	; select bank1
  5170  0A31  266B  3188         	fcall	PL52	;call to abstracted procedure
  5171  0A33  2709  3188         	fcall	___fttol
  5172  0A35  2635  3188         	fcall	PL40	;call to abstracted procedure
  5173  0A37  00A4               	movwf	sprintf@val^(0+128)
  5174                           
  5175                           ;doprnt.c: 1132: fval -= (double)val;
  5176  0A38  0827               	movf	(sprintf@val+3)^(0+128),w
  5177  0A39  00FB               	movwf	___lltoft@c+3
  5178  0A3A  0826               	movf	(sprintf@val+2)^(0+128),w
  5179  0A3B  00FA               	movwf	___lltoft@c+2
  5180  0A3C  0825               	movf	(sprintf@val+1)^(0+128),w
  5181  0A3D  00F9               	movwf	___lltoft@c+1
  5182  0A3E  0824               	movf	sprintf@val^(0+128),w
  5183  0A3F  00F8               	movwf	___lltoft@c
  5184  0A40  27E2               	fcall	___lltoft
  5185  0A41  0878               	movf	?___lltoft,w
  5186  0A42  0020               	movlb	0	; select bank0
  5187  0A43  00CC               	movwf	___ftsub@f2
  5188  0A44  0879               	movf	?___lltoft+1,w
  5189  0A45  00CD               	movwf	___ftsub@f2+1
  5190  0A46  087A               	movf	?___lltoft+2,w
  5191  0A47  00CE               	movwf	___ftsub@f2+2
  5192  0A48  0021               	movlb	1	; select bank1
  5193  0A49  0832               	movf	sprintf@fval^(0+128),w
  5194  0A4A  0020               	movlb	0	; select bank0
  5195  0A4B  00CF               	movwf	___ftsub@f1
  5196  0A4C  0021               	movlb	1	; select bank1
  5197  0A4D  0833               	movf	(sprintf@fval+1)^(0+128),w
  5198  0A4E  0020               	movlb	0	; select bank0
  5199  0A4F  00D0               	movwf	___ftsub@f1+1
  5200  0A50  0021               	movlb	1	; select bank1
  5201  0A51  0834               	movf	(sprintf@fval+2)^(0+128),w
  5202  0A52  0020               	movlb	0	; select bank0
  5203  0A53  00D1               	movwf	___ftsub@f1+2
  5204  0A54  3183  2377  3188   	fcall	___ftsub
  5205  0A57  084C               	movf	?___ftsub,w
  5206  0A58  0021               	movlb	1	; select bank1
  5207  0A59  00B2               	movwf	sprintf@fval^(0+128)
  5208  0A5A  0020               	movlb	0	; select bank0
  5209  0A5B  084D               	movf	?___ftsub+1,w
  5210  0A5C  0021               	movlb	1	; select bank1
  5211  0A5D  00B3               	movwf	(sprintf@fval+1)^(0+128)
  5212  0A5E  0020               	movlb	0	; select bank0
  5213  0A5F  084E               	movf	?___ftsub+2,w
  5214  0A60  0021               	movlb	1	; select bank1
  5215  0A61  00B4               	movwf	(sprintf@fval+2)^(0+128)
  5216                           
  5217                           ;doprnt.c: 1133: exp = 0;
  5218  0A62  01AE               	clrf	sprintf@exp^(0+128)
  5219  0A63  01AF               	clrf	(sprintf@exp+1)^(0+128)
  5220  0A64                     l2869:	
  5221                           
  5222                           ;doprnt.c: 1134: }
  5223                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5224  0A64  01B8               	clrf	sprintf@c^(0+128)
  5225  0A65  0AB8               	incf	sprintf@c^(0+128),f
  5226  0A66                     l2875:	
  5227                           
  5228                           ;doprnt.c: 1137: if(val < dpowers[c])
  5229  0A66  25A1  3188         	fcall	PL2	;call to abstracted procedure
  5230  0A68  00D9               	movwf	??_sprintf+2
  5231  0A69  3F01               	moviw [1]fsr0
  5232  0A6A  00DA               	movwf	??_sprintf+3
  5233  0A6B  3F02               	moviw [2]fsr0
  5234  0A6C  00DB               	movwf	??_sprintf+4
  5235  0A6D  3F03               	moviw [3]fsr0
  5236  0A6E  00DC               	movwf	??_sprintf+5
  5237  0A6F  0021               	movlb	1	; select bank1
  5238  0A70  0227               	subwf	(sprintf@val+3)^(0+128),w
  5239  0A71  1D03               	skipz
  5240  0A72  2A83               	goto	u3065
  5241  0A73  0020               	movlb	0	; select bank0
  5242  0A74  085B               	movf	??_sprintf+4,w
  5243  0A75  0021               	movlb	1	; select bank1
  5244  0A76  0226               	subwf	(sprintf@val+2)^(0+128),w
  5245  0A77  1D03               	skipz
  5246  0A78  2A83               	goto	u3065
  5247  0A79  0020               	movlb	0	; select bank0
  5248  0A7A  085A               	movf	??_sprintf+3,w
  5249  0A7B  0021               	movlb	1	; select bank1
  5250  0A7C  0225               	subwf	(sprintf@val+1)^(0+128),w
  5251  0A7D  1D03               	skipz
  5252  0A7E  2A83               	goto	u3065
  5253  0A7F  0020               	movlb	0	; select bank0
  5254  0A80  0859               	movf	??_sprintf+2,w
  5255  0A81  0021               	movlb	1	; select bank1
  5256  0A82  0224               	subwf	sprintf@val^(0+128),w
  5257  0A83                     u3065:	
  5258  0A83  1C03               	btfss	3,0
  5259  0A84  2A8A               	goto	l2883
  5260  0A85  300A               	movlw	10
  5261  0A86  0AB8               	incf	sprintf@c^(0+128),f
  5262  0A87  0638               	xorwf	sprintf@c^(0+128),w
  5263  0A88  1D03               	btfss	3,2
  5264  0A89  2A66               	goto	l2875
  5265  0A8A                     l2883:	
  5266                           
  5267                           ;doprnt.c: 1142: width -= prec + c + exp;
  5268  0A8A  0838               	movf	sprintf@c^(0+128),w
  5269  0A8B  2683  3188         	fcall	PL56	;call to abstracted procedure
  5270  0A8D  0835               	movf	sprintf@prec^(0+128),w
  5271  0A8E  0020               	movlb	0	; select bank0
  5272  0A8F  0757               	addwf	??_sprintf,w
  5273  0A90  00D9               	movwf	??_sprintf+2
  5274  0A91  0021               	movlb	1	; select bank1
  5275  0A92  0836               	movf	(sprintf@prec+1)^(0+128),w
  5276  0A93  0020               	movlb	0	; select bank0
  5277  0A94  3D58               	addwfc	??_sprintf+1,w
  5278  0A95  00DA               	movwf	??_sprintf+3
  5279  0A96  0021               	movlb	1	; select bank1
  5280  0A97  082E               	movf	sprintf@exp^(0+128),w
  5281  0A98  0020               	movlb	0	; select bank0
  5282  0A99  0759               	addwf	??_sprintf+2,w
  5283  0A9A  00DB               	movwf	??_sprintf+4
  5284  0A9B  0021               	movlb	1	; select bank1
  5285  0A9C  082F               	movf	(sprintf@exp+1)^(0+128),w
  5286  0A9D  0020               	movlb	0	; select bank0
  5287  0A9E  3D5A               	addwfc	??_sprintf+3,w
  5288  0A9F  00DC               	movwf	??_sprintf+5
  5289  0AA0  085B               	movf	??_sprintf+4,w
  5290  0AA1  0021               	movlb	1	; select bank1
  5291  0AA2  02B0               	subwf	sprintf@width^(0+128),f
  5292  0AA3  0020               	movlb	0	; select bank0
  5293  0AA4  085C               	movf	??_sprintf+5,w
  5294  0AA5  0021               	movlb	1	; select bank1
  5295  0AA6  3BB1               	subwfb	(sprintf@width+1)^(0+128),f
  5296                           
  5297                           ;doprnt.c: 1143: if(
  5298                           ;doprnt.c: 1147: prec)
  5299  0AA7  0835               	movf	sprintf@prec^(0+128),w
  5300  0AA8  0436               	iorwf	(sprintf@prec+1)^(0+128),w
  5301  0AA9  1903               	btfsc	3,2
  5302  0AAA  2AAF               	goto	l2887
  5303                           
  5304                           ;doprnt.c: 1148: width--;
  5305  0AAB  30FF               	movlw	-1
  5306  0AAC  07B0               	addwf	sprintf@width^(0+128),f
  5307  0AAD  1C03               	skipc
  5308  0AAE  03B1               	decf	(sprintf@width+1)^(0+128),f
  5309  0AAF                     l2887:	
  5310                           
  5311                           ;doprnt.c: 1149: if(flag & 0x03)
  5312  0AAF  082C               	movf	sprintf@flag^(0+128),w
  5313  0AB0  3903               	andlw	3
  5314  0AB1  1903               	btfsc	3,2
  5315  0AB2  2AB7               	goto	l2891
  5316                           
  5317                           ;doprnt.c: 1150: width--;
  5318  0AB3  30FF               	movlw	-1
  5319  0AB4  07B0               	addwf	sprintf@width^(0+128),f
  5320  0AB5  1C03               	skipc
  5321  0AB6  03B1               	decf	(sprintf@width+1)^(0+128),f
  5322  0AB7                     l2891:	
  5323                           
  5324                           ;doprnt.c: 1153: if(flag & 0x04) {
  5325  0AB7  1D2C               	btfss	sprintf@flag^(0+128),2
  5326  0AB8  2AD8               	goto	l2913
  5327                           
  5328                           ;doprnt.c: 1157: if(flag & 0x03)
  5329  0AB9  082C               	movf	sprintf@flag^(0+128),w
  5330  0ABA  3903               	andlw	3
  5331  0ABB  1903               	btfsc	3,2
  5332  0ABC  2ABF               	goto	l2905
  5333                           
  5334                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  5335  0ABD  26BA  3188         	fcall	PL72	;call to abstracted procedure
  5336  0ABF                     l2905:	
  5337  0ABF  0831               	movf	(sprintf@width+1)^(0+128),w
  5338  0AC0  2652  3188         	fcall	PL46	;call to abstracted procedure
  5339  0AC2  1D03               	skipz
  5340  0AC3  2AC7               	goto	u3125
  5341  0AC4  3001               	movlw	1
  5342  0AC5  0021               	movlb	1	; select bank1
  5343  0AC6  0230               	subwf	sprintf@width^(0+128),w
  5344  0AC7                     u3125:	
  5345  0AC7  1C03               	btfss	3,0
  5346  0AC8  2AF8               	goto	l2929
  5347                           
  5348                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  5349  0AC9  0021               	movlb	1	; select bank1
  5350  0ACA  262D  3188         	fcall	PL38	;call to abstracted procedure
  5351                           
  5352                           ;doprnt.c: 1170: width--;
  5353  0ACC  07B0               	addwf	sprintf@width^(0+128),f
  5354  0ACD  1C03               	skipc
  5355  0ACE  03B1               	decf	(sprintf@width+1)^(0+128),f
  5356  0ACF  2ABF               	goto	l2905
  5357  0AD0                     l2907:	
  5358                           
  5359                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  5360  0AD0  0021               	movlb	1	; select bank1
  5361  0AD1  0837               	movf	sprintf@sp^(0+128),w
  5362  0AD2  0086               	movwf	6
  5363  0AD3  3020               	movlw	32
  5364                           
  5365                           ;doprnt.c: 1182: width--;
  5366  0AD4  26AE  3188         	fcall	PL68	;call to abstracted procedure
  5367  0AD6  1C03               	skipc
  5368  0AD7  03B1               	decf	(sprintf@width+1)^(0+128),f
  5369  0AD8                     l2913:	
  5370  0AD8  0831               	movf	(sprintf@width+1)^(0+128),w
  5371  0AD9  2652  3188         	fcall	PL46	;call to abstracted procedure
  5372  0ADB  1D03               	skipz
  5373  0ADC  2AE0               	goto	u3135
  5374  0ADD  3001               	movlw	1
  5375  0ADE  0021               	movlb	1	; select bank1
  5376  0ADF  0230               	subwf	sprintf@width^(0+128),w
  5377  0AE0                     u3135:	
  5378  0AE0  1803               	skipnc
  5379  0AE1  2AD0               	goto	l2907
  5380                           
  5381                           ;doprnt.c: 1183: }
  5382                           ;doprnt.c: 1188: if(flag & 0x03)
  5383  0AE2  0021               	movlb	1	; select bank1
  5384  0AE3  082C               	movf	sprintf@flag^(0+128),w
  5385  0AE4  3903               	andlw	3
  5386  0AE5  1903               	btfsc	3,2
  5387  0AE6  2AF8               	goto	l2929
  5388                           
  5389                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  5390  0AE7  26D3  3188         	fcall	PL94	;call to abstracted procedure
  5391  0AE9  2AF6               	goto	L5
  5392  0AEA                     l2921:	
  5393                           
  5394                           ;doprnt.c: 1200: {
  5395                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5396  0AEA  25A1  3188         	fcall	PL2	;call to abstracted procedure
  5397  0AEC  25E0  3188         	fcall	PL22	;call to abstracted procedure
  5398  0AEE  279B  3188         	fcall	___lldiv
  5399                           
  5400                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5401  0AF0  25CA  3188         	fcall	PL16	;call to abstracted procedure
  5402  0AF2  2765  3188         	fcall	___llmod
  5403                           
  5404                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  5405  0AF4  2644  3188         	fcall	PL44	;call to abstracted procedure
  5406  0AF6                     L5:	
  5407  0AF6  0081               	movwf	1
  5408  0AF7  0AB7               	incf	sprintf@sp^(0+128),f
  5409  0AF8                     l2929:	
  5410  0AF8  0021               	movlb	1	; select bank1
  5411  0AF9  03B8               	decf	sprintf@c^(0+128),f
  5412  0AFA  0F38               	incfsz	sprintf@c^(0+128),w
  5413  0AFB  2AEA               	goto	l2921
  5414  0AFC                     l2937:	
  5415  0AFC  082F               	movf	(sprintf@exp+1)^(0+128),w
  5416  0AFD  2652  3188         	fcall	PL46	;call to abstracted procedure
  5417  0AFF  1D03               	skipz
  5418  0B00  2B04               	goto	u3165
  5419  0B01  3001               	movlw	1
  5420  0B02  0021               	movlb	1	; select bank1
  5421  0B03  022E               	subwf	sprintf@exp^(0+128),w
  5422  0B04                     u3165:	
  5423  0B04  1C03               	btfss	3,0
  5424  0B05  2B0D               	goto	l2939
  5425                           
  5426                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  5427  0B06  0021               	movlb	1	; select bank1
  5428  0B07  262D  3188         	fcall	PL38	;call to abstracted procedure
  5429                           
  5430                           ;doprnt.c: 1209: exp--;
  5431  0B09  07AE               	addwf	sprintf@exp^(0+128),f
  5432  0B0A  1C03               	skipc
  5433  0B0B  03AF               	decf	(sprintf@exp+1)^(0+128),f
  5434  0B0C  2AFC               	goto	l2937
  5435  0B0D                     l2939:	
  5436                           
  5437                           ;doprnt.c: 1210: }
  5438                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5439  0B0D  0021               	movlb	1	; select bank1
  5440  0B0E  0836               	movf	(sprintf@prec+1)^(0+128),w
  5441  0B0F  2652  3188         	fcall	PL46	;call to abstracted procedure
  5442  0B11  1D03               	skipz
  5443  0B12  2B16               	goto	u3175
  5444  0B13  3009               	movlw	9
  5445  0B14  0021               	movlb	1	; select bank1
  5446  0B15  0235               	subwf	sprintf@prec^(0+128),w
  5447  0B16                     u3175:	
  5448  0B16  1C03               	skipc
  5449  0B17  2B1B               	goto	l2943
  5450                           
  5451                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5452  0B18  3008               	movlw	8
  5453  0B19  0021               	movlb	1	; select bank1
  5454  0B1A  2B1D               	goto	L2
  5455  0B1B                     l2943:	
  5456                           
  5457                           ;doprnt.c: 1213: else
  5458                           ;doprnt.c: 1214: c = prec;
  5459  0B1B  0021               	movlb	1	; select bank1
  5460  0B1C  0835               	movf	sprintf@prec^(0+128),w
  5461  0B1D                     L2:	
  5462  0B1D  00B8               	movwf	sprintf@c^(0+128)
  5463                           
  5464                           ;doprnt.c: 1215: prec -= c;
  5465  0B1E  2683  3188         	fcall	PL56	;call to abstracted procedure
  5466  0B20  02B5               	subwf	sprintf@prec^(0+128),f
  5467  0B21  0020               	movlb	0	; select bank0
  5468  0B22  0858               	movf	??_sprintf+1,w
  5469  0B23  0021               	movlb	1	; select bank1
  5470  0B24  3BB6               	subwfb	(sprintf@prec+1)^(0+128),f
  5471                           
  5472                           ;doprnt.c: 1219: if(c)
  5473  0B25  0838               	movf	sprintf@c^(0+128),w
  5474  0B26  1903               	btfsc	3,2
  5475  0B27  2B2E               	goto	l2951
  5476                           
  5477                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  5478  0B28  0837               	movf	sprintf@sp^(0+128),w
  5479  0B29  0086               	movwf	6
  5480  0B2A  302E               	movlw	46
  5481  0B2B  0187               	clrf	7
  5482  0B2C  0081               	movwf	1
  5483  0B2D  0AB7               	incf	sprintf@sp^(0+128),f
  5484  0B2E                     l2951:	
  5485                           
  5486                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5487  0B2E  0838               	movf	sprintf@c^(0+128),w
  5488  0B2F  2438  3188         	fcall	_scale
  5489  0B31  0835               	movf	?_scale,w
  5490  0B32  0021               	movlb	1	; select bank1
  5491  0B33  00A0               	movwf	_sprintf$792^(0+128)
  5492  0B34  0020               	movlb	0	; select bank0
  5493  0B35  0836               	movf	?_scale+1,w
  5494  0B36  0021               	movlb	1	; select bank1
  5495  0B37  00A1               	movwf	(_sprintf$792+1)^(0+128)
  5496  0B38  0020               	movlb	0	; select bank0
  5497  0B39  0837               	movf	?_scale+2,w
  5498  0B3A  0021               	movlb	1	; select bank1
  5499  0B3B  00A2               	movwf	(_sprintf$792+2)^(0+128)
  5500                           
  5501                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5502  0B3C  0820               	movf	_sprintf$792^(0+128),w
  5503  0B3D  0020               	movlb	0	; select bank0
  5504  0B3E  00A9               	movwf	___ftmul@f2
  5505  0B3F  0021               	movlb	1	; select bank1
  5506  0B40  0821               	movf	(_sprintf$792+1)^(0+128),w
  5507  0B41  0020               	movlb	0	; select bank0
  5508  0B42  00AA               	movwf	___ftmul@f2+1
  5509  0B43  0021               	movlb	1	; select bank1
  5510  0B44  0822               	movf	(_sprintf$792+2)^(0+128),w
  5511  0B45  0020               	movlb	0	; select bank0
  5512  0B46  00AB               	movwf	___ftmul@f2+2
  5513  0B47  0021               	movlb	1	; select bank1
  5514  0B48  0832               	movf	sprintf@fval^(0+128),w
  5515  0B49  268A               	fcall	PL60	;call to abstracted procedure
  5516  0B4A  3186  2652  3188   	fcall	___ftmul
  5517  0B4D  0826               	movf	?___ftmul,w
  5518  0B4E  00BD               	movwf	___fttol@f1
  5519  0B4F  0827               	movf	?___ftmul+1,w
  5520  0B50  00BE               	movwf	___fttol@f1+1
  5521  0B51  0828               	movf	?___ftmul+2,w
  5522  0B52  00BF               	movwf	___fttol@f1+2
  5523  0B53  2709  3188         	fcall	___fttol
  5524  0B55  2635  3188         	fcall	PL40	;call to abstracted procedure
  5525  0B57  2B81               	goto	L3
  5526  0B58                     l2955:	
  5527                           ;doprnt.c: 1228: while(c--) {
  5528                           
  5529                           
  5530                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5531  0B58  25A1  3188         	fcall	PL2	;call to abstracted procedure
  5532  0B5A  25E0  3188         	fcall	PL22	;call to abstracted procedure
  5533  0B5C  279B  3188         	fcall	___lldiv
  5534                           
  5535                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5536  0B5E  25CA  3188         	fcall	PL16	;call to abstracted procedure
  5537  0B60  2765  3188         	fcall	___llmod
  5538                           
  5539                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  5540  0B62  2644  3188         	fcall	PL44	;call to abstracted procedure
  5541  0B64  0081               	movwf	1
  5542  0B65  0AB7               	incf	sprintf@sp^(0+128),f
  5543                           
  5544                           ;doprnt.c: 1232: val %= dpowers[c];
  5545  0B66  25A1  3188         	fcall	PL2	;call to abstracted procedure
  5546  0B68  00F0               	movwf	___llmod@divisor
  5547  0B69  3F01               	moviw [1]fsr0
  5548  0B6A  00F1               	movwf	___llmod@divisor+1
  5549  0B6B  3F02               	moviw [2]fsr0
  5550  0B6C  00F2               	movwf	___llmod@divisor+2
  5551  0B6D  3F03               	moviw [3]fsr0
  5552  0B6E  00F3               	movwf	___llmod@divisor+3
  5553  0B6F  0021               	movlb	1	; select bank1
  5554  0B70  0827               	movf	(sprintf@val+3)^(0+128),w
  5555  0B71  00F7               	movwf	___llmod@dividend+3
  5556  0B72  0826               	movf	(sprintf@val+2)^(0+128),w
  5557  0B73  00F6               	movwf	___llmod@dividend+2
  5558  0B74  0825               	movf	(sprintf@val+1)^(0+128),w
  5559  0B75  00F5               	movwf	___llmod@dividend+1
  5560  0B76  0824               	movf	sprintf@val^(0+128),w
  5561  0B77  00F4               	movwf	___llmod@dividend
  5562  0B78  2765  3188         	fcall	___llmod
  5563  0B7A  0873               	movf	?___llmod+3,w
  5564  0B7B  00A7               	movwf	(sprintf@val+3)^(0+128)
  5565  0B7C  0872               	movf	?___llmod+2,w
  5566  0B7D  00A6               	movwf	(sprintf@val+2)^(0+128)
  5567  0B7E  0871               	movf	?___llmod+1,w
  5568  0B7F  00A5               	movwf	(sprintf@val+1)^(0+128)
  5569  0B80  0870               	movf	?___llmod,w
  5570  0B81                     L3:	
  5571  0B81  00A4               	movwf	sprintf@val^(0+128)
  5572  0B82  03B8               	decf	sprintf@c^(0+128),f
  5573  0B83  0F38               	incfsz	sprintf@c^(0+128),w
  5574  0B84  2B58               	goto	l2955
  5575  0B85                     l2973:	
  5576  0B85  0835               	movf	sprintf@prec^(0+128),w
  5577  0B86  0436               	iorwf	(sprintf@prec+1)^(0+128),w
  5578  0B87  1903               	btfsc	3,2
  5579  0B88  283A               	goto	l3037
  5580                           
  5581                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  5582  0B89  262D  3188         	fcall	PL38	;call to abstracted procedure
  5583                           
  5584                           ;doprnt.c: 1237: prec--;
  5585  0B8B  07B5               	addwf	sprintf@prec^(0+128),f
  5586  0B8C  1C03               	skipc
  5587  0B8D  03B6               	decf	(sprintf@prec+1)^(0+128),f
  5588  0B8E  2B85               	goto	l2973
  5589  0B8F                     l2975:	
  5590                           
  5591                           ;doprnt.c: 1246: }
  5592                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5593  0B8F  0021               	movlb	1	; select bank1
  5594  0B90  0835               	movf	sprintf@prec^(0+128),w
  5595  0B91  0436               	iorwf	(sprintf@prec+1)^(0+128),w
  5596  0B92  1D03               	btfss	3,2
  5597  0B93  2B9C               	goto	l2981
  5598  0B94  0827               	movf	(sprintf@val+3)^(0+128),w
  5599  0B95  0426               	iorwf	(sprintf@val+2)^(0+128),w
  5600  0B96  0425               	iorwf	(sprintf@val+1)^(0+128),w
  5601  0B97  0424               	iorwf	sprintf@val^(0+128),w
  5602  0B98  1903               	btfsc	3,2
  5603                           
  5604                           ;doprnt.c: 1291: prec++;
  5605  0B99  0AB5               	incf	sprintf@prec^(0+128),f
  5606  0B9A  1903               	skipnz
  5607  0B9B  0AB6               	incf	(sprintf@prec+1)^(0+128),f
  5608  0B9C                     l2981:	
  5609                           
  5610                           ;doprnt.c: 1339: if(c < prec)
  5611  0B9C  2695  3188         	fcall	PL62	;call to abstracted procedure
  5612  0B9E  0836               	movf	(sprintf@prec+1)^(0+128),w
  5613  0B9F  3A80               	xorlw	128
  5614  0BA0  0020               	movlb	0	; select bank0
  5615  0BA1  0259               	subwf	??_sprintf+2,w
  5616  0BA2  1D03               	skipz
  5617  0BA3  2BA8               	goto	u3235
  5618  0BA4  0021               	movlb	1	; select bank1
  5619  0BA5  0835               	movf	sprintf@prec^(0+128),w
  5620  0BA6  0020               	movlb	0	; select bank0
  5621  0BA7  0257               	subwf	??_sprintf,w
  5622  0BA8                     u3235:	
  5623  0BA8  1803               	skipnc
  5624  0BA9  2BAE               	goto	l2985
  5625                           
  5626                           ;doprnt.c: 1340: c = prec;
  5627  0BAA  0021               	movlb	1	; select bank1
  5628  0BAB  0835               	movf	sprintf@prec^(0+128),w
  5629  0BAC  00B8               	movwf	sprintf@c^(0+128)
  5630  0BAD  2BC6               	goto	l291
  5631  0BAE                     l2985:	
  5632                           
  5633                           ;doprnt.c: 1341: else if(prec < c)
  5634  0BAE  0021               	movlb	1	; select bank1
  5635  0BAF  0838               	movf	sprintf@c^(0+128),w
  5636  0BB0  2683  3188         	fcall	PL56	;call to abstracted procedure
  5637  0BB2  0836               	movf	(sprintf@prec+1)^(0+128),w
  5638  0BB3  3A80               	xorlw	128
  5639  0BB4  0020               	movlb	0	; select bank0
  5640  0BB5  00D9               	movwf	??_sprintf+2
  5641  0BB6  0858               	movf	??_sprintf+1,w
  5642  0BB7  3A80               	xorlw	128
  5643  0BB8  0259               	subwf	??_sprintf+2,w
  5644  0BB9  1D03               	skipz
  5645  0BBA  2BBE               	goto	u3245
  5646  0BBB  0857               	movf	??_sprintf,w
  5647  0BBC  0021               	movlb	1	; select bank1
  5648  0BBD  0235               	subwf	sprintf@prec^(0+128),w
  5649  0BBE                     u3245:	
  5650  0BBE  1803               	skipnc
  5651  0BBF  2BC6               	goto	l291
  5652                           
  5653                           ;doprnt.c: 1342: prec = c;
  5654  0BC0  0021               	movlb	1	; select bank1
  5655  0BC1  0838               	movf	sprintf@c^(0+128),w
  5656  0BC2  00B5               	movwf	sprintf@prec^(0+128)
  5657  0BC3  01B6               	clrf	(sprintf@prec+1)^(0+128)
  5658  0BC4  1BB5               	btfsc	sprintf@prec^(0+128),7
  5659  0BC5  03B6               	decf	(sprintf@prec+1)^(0+128),f
  5660  0BC6                     l291:	
  5661                           
  5662                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5663  0BC6  0021               	movlb	1	; select bank1
  5664  0BC7  0830               	movf	sprintf@width^(0+128),w
  5665  0BC8  0431               	iorwf	(sprintf@width+1)^(0+128),w
  5666  0BC9  1903               	btfsc	3,2
  5667  0BCA  2BD3               	goto	l2993
  5668  0BCB  082C               	movf	sprintf@flag^(0+128),w
  5669  0BCC  3903               	andlw	3
  5670  0BCD  1903               	btfsc	3,2
  5671  0BCE  2BD3               	goto	l2993
  5672                           
  5673                           ;doprnt.c: 1346: width--;
  5674  0BCF  30FF               	movlw	-1
  5675  0BD0  07B0               	addwf	sprintf@width^(0+128),f
  5676  0BD1  1C03               	skipc
  5677  0BD2  03B1               	decf	(sprintf@width+1)^(0+128),f
  5678  0BD3                     l2993:	
  5679                           
  5680                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5681  0BD3  1F2D               	btfss	(sprintf@flag+1)^(0+128),6
  5682  0BD4  2BEE               	goto	l3001
  5683                           
  5684                           ;doprnt.c: 1349: if(width > prec)
  5685  0BD5  0836               	movf	(sprintf@prec+1)^(0+128),w
  5686  0BD6  3A80               	xorlw	128
  5687  0BD7  0020               	movlb	0	; select bank0
  5688  0BD8  00D7               	movwf	??_sprintf
  5689  0BD9  0021               	movlb	1	; select bank1
  5690  0BDA  0831               	movf	(sprintf@width+1)^(0+128),w
  5691  0BDB  3A80               	xorlw	128
  5692  0BDC  0020               	movlb	0	; select bank0
  5693  0BDD  0257               	subwf	??_sprintf,w
  5694  0BDE  1D03               	skipz
  5695  0BDF  2BE3               	goto	u3285
  5696  0BE0  0021               	movlb	1	; select bank1
  5697  0BE1  0830               	movf	sprintf@width^(0+128),w
  5698  0BE2  0235               	subwf	sprintf@prec^(0+128),w
  5699  0BE3                     u3285:	
  5700  0BE3  1803               	skipnc
  5701  0BE4  2BEB               	goto	l2999
  5702                           
  5703                           ;doprnt.c: 1350: width -= prec;
  5704  0BE5  0021               	movlb	1	; select bank1
  5705  0BE6  0835               	movf	sprintf@prec^(0+128),w
  5706  0BE7  02B0               	subwf	sprintf@width^(0+128),f
  5707  0BE8  0836               	movf	(sprintf@prec+1)^(0+128),w
  5708  0BE9  3BB1               	subwfb	(sprintf@width+1)^(0+128),f
  5709  0BEA  2BEE               	goto	l3001
  5710  0BEB                     l2999:	
  5711                           
  5712                           ;doprnt.c: 1351: else
  5713                           ;doprnt.c: 1352: width = 0;
  5714  0BEB  0021               	movlb	1	; select bank1
  5715  0BEC  01B0               	clrf	sprintf@width^(0+128)
  5716  0BED  01B1               	clrf	(sprintf@width+1)^(0+128)
  5717  0BEE                     l3001:	
  5718                           
  5719                           ;doprnt.c: 1353: }
  5720                           ;doprnt.c: 1381: if(width > c)
  5721  0BEE  2695  3188         	fcall	PL62	;call to abstracted procedure
  5722  0BF0  0831               	movf	(sprintf@width+1)^(0+128),w
  5723  0BF1  3A80               	xorlw	128
  5724  0BF2  0020               	movlb	0	; select bank0
  5725  0BF3  0259               	subwf	??_sprintf+2,w
  5726  0BF4  1D03               	skipz
  5727  0BF5  2BFA               	goto	u3295
  5728  0BF6  0021               	movlb	1	; select bank1
  5729  0BF7  0830               	movf	sprintf@width^(0+128),w
  5730  0BF8  0020               	movlb	0	; select bank0
  5731  0BF9  0257               	subwf	??_sprintf,w
  5732  0BFA                     u3295:	
  5733  0BFA  1803               	skipnc
  5734  0BFB  2C06               	goto	l3005
  5735                           
  5736                           ;doprnt.c: 1382: width -= c;
  5737  0BFC  0021               	movlb	1	; select bank1
  5738  0BFD  0838               	movf	sprintf@c^(0+128),w
  5739  0BFE  2683  3188         	fcall	PL56	;call to abstracted procedure
  5740  0C00  02B0               	subwf	sprintf@width^(0+128),f
  5741  0C01  0020               	movlb	0	; select bank0
  5742  0C02  0858               	movf	??_sprintf+1,w
  5743  0C03  0021               	movlb	1	; select bank1
  5744  0C04  3BB1               	subwfb	(sprintf@width+1)^(0+128),f
  5745  0C05  2C09               	goto	l3007
  5746  0C06                     l3005:	
  5747                           
  5748                           ;doprnt.c: 1383: else
  5749                           ;doprnt.c: 1384: width = 0;
  5750  0C06  0021               	movlb	1	; select bank1
  5751  0C07  01B0               	clrf	sprintf@width^(0+128)
  5752  0C08  01B1               	clrf	(sprintf@width+1)^(0+128)
  5753  0C09                     l3007:	
  5754                           
  5755                           ;doprnt.c: 1387: if(flag & 0x04) {
  5756  0C09  1D2C               	btfss	sprintf@flag^(0+128),2
  5757  0C0A  2C1B               	goto	l3023
  5758                           
  5759                           ;doprnt.c: 1392: if(flag & 0x03)
  5760  0C0B  082C               	movf	sprintf@flag^(0+128),w
  5761  0C0C  3903               	andlw	3
  5762  0C0D  1903               	btfsc	3,2
  5763  0C0E  2C11               	goto	l3015
  5764                           
  5765                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  5766  0C0F  26BA  3188         	fcall	PL72	;call to abstracted procedure
  5767  0C11                     l3015:	
  5768                           
  5769                           ;doprnt.c: 1415: if(width)
  5770  0C11  0830               	movf	sprintf@width^(0+128),w
  5771  0C12  0431               	iorwf	(sprintf@width+1)^(0+128),w
  5772  0C13  1903               	btfsc	3,2
  5773  0C14  283A               	goto	l3037
  5774                           
  5775                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5776  0C15  262D  3188         	fcall	PL38	;call to abstracted procedure
  5777                           
  5778                           ;doprnt.c: 1418: while(--width);
  5779  0C17  07B0               	addwf	sprintf@width^(0+128),f
  5780  0C18  1C03               	skipc
  5781  0C19  03B1               	decf	(sprintf@width+1)^(0+128),f
  5782  0C1A  2C11               	goto	l3015
  5783  0C1B                     l3023:	
  5784                           
  5785                           ;doprnt.c: 1422: {
  5786                           ;doprnt.c: 1424: if(width
  5787                           ;doprnt.c: 1428: )
  5788  0C1B  0830               	movf	sprintf@width^(0+128),w
  5789  0C1C  0431               	iorwf	(sprintf@width+1)^(0+128),w
  5790  0C1D  1903               	btfsc	3,2
  5791  0C1E  2C2A               	goto	l3031
  5792  0C1F                     l3025:	
  5793                           
  5794                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5795  0C1F  0837               	movf	sprintf@sp^(0+128),w
  5796  0C20  0086               	movwf	6
  5797  0C21  3020               	movlw	32
  5798                           
  5799                           ;doprnt.c: 1431: while(--width);
  5800  0C22  26AE  3188         	fcall	PL68	;call to abstracted procedure
  5801  0C24  1C03               	skipc
  5802  0C25  03B1               	decf	(sprintf@width+1)^(0+128),f
  5803  0C26  0830               	movf	sprintf@width^(0+128),w
  5804  0C27  0431               	iorwf	(sprintf@width+1)^(0+128),w
  5805  0C28  1D03               	btfss	3,2
  5806  0C29  2C1F               	goto	l3025
  5807  0C2A                     l3031:	
  5808                           
  5809                           ;doprnt.c: 1438: if(flag & 0x03)
  5810  0C2A  082C               	movf	sprintf@flag^(0+128),w
  5811  0C2B  3903               	andlw	3
  5812  0C2C  1903               	btfsc	3,2
  5813  0C2D  283A               	goto	l3037
  5814                           
  5815                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  5816  0C2E  26D3  3188         	fcall	PL94	;call to abstracted procedure
  5817  0C30                     L4:	
  5818  0C30  0081               	movwf	1
  5819  0C31  0AB7               	incf	sprintf@sp^(0+128),f
  5820  0C32  283A               	goto	l3037
  5821  0C33                     l3039:	
  5822                           
  5823                           ;doprnt.c: 1538: *sp = 0;
  5824  0C33  0837               	movf	sprintf@sp^(0+128),w
  5825  0C34  0086               	movwf	6
  5826  0C35  0187               	clrf	7
  5827  0C36  0181               	clrf	1
  5828  0C37  0008               	return
  5829  0C38                     __end_of_sprintf:	
  5830  0C38                     __ptext2:	
  5831 ;; *************** function _scale *****************
  5832 ;; Defined at:
  5833 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  scl             1    wreg     char 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  scl             1   28[BANK0 ] char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  3   21[BANK0 ] char 
  5840 ;; Registers used:
  5841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5842 ;; Tracked objects:
  5843 ;;		On entry : 1F/1
  5844 ;;		On exit  : 1F/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5847 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;Total ram usage:        8 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    2
  5854 ;; This function calls:
  5855 ;;		___awdiv
  5856 ;;		___awmod
  5857 ;;		___ftmul
  5858 ;;		___wmul
  5859 ;; This function is called by:
  5860 ;;		_sprintf
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           
  5865                           ;psect for function _scale
  5866  0C38                     _scale:	
  5867                           
  5868                           ;incstack = 0
  5869                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5870                           ;scale@scl stored from wreg
  5871  0C38  0020               	movlb	0	; select bank0
  5872  0C39  00BC               	movwf	scale@scl
  5873                           
  5874                           ;doprnt.c: 428: if(scl < 0) {
  5875  0C3A  1FBC               	btfss	scale@scl,7
  5876  0C3B  2C9D               	goto	l2405
  5877                           
  5878                           ;doprnt.c: 429: scl = -scl;
  5879  0C3C  09BC               	comf	scale@scl,f
  5880  0C3D  0ABC               	incf	scale@scl,f
  5881                           
  5882                           ;doprnt.c: 430: if(scl>=110)
  5883  0C3E  083C               	movf	scale@scl,w
  5884  0C3F  3A80               	xorlw	128
  5885  0C40  3E12               	addlw	-238
  5886  0C41  1C03               	skipc
  5887  0C42  2C74               	goto	l2395
  5888                           
  5889                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5890  0C43  2677  3188         	fcall	PL54	;call to abstracted procedure
  5891  0C45  255A  3188         	fcall	___awmod
  5892  0C47  26CE  3188         	fcall	PL92	;call to abstracted procedure
  5893  0C49  251A  3188         	fcall	___awdiv
  5894  0C4B  25B9  3188         	fcall	PL10	;call to abstracted procedure
  5895  0C4D  2505               	fcall	___wmul
  5896  0C4E  3187  27B7  3188   	fcall	PL18	;call to abstracted procedure
  5897  0C51  25B1  3188         	fcall	PL6	;call to abstracted procedure
  5898  0C53  3064               	movlw	100
  5899  0C54  26B4  3188         	fcall	PL70	;call to abstracted procedure
  5900  0C56  1BF8               	btfsc	___awdiv@dividend,7
  5901  0C57  03F9               	decf	___awdiv@dividend+1,f
  5902  0C58  251A  3188         	fcall	___awdiv
  5903  0C5A  25B9  3188         	fcall	PL10	;call to abstracted procedure
  5904  0C5C  2505               	fcall	___wmul
  5905  0C5D  3187  27C8  3188   	fcall	PL34	;call to abstracted procedure
  5906  0C60  25C2               	fcall	PL12	;call to abstracted procedure
  5907  0C61  3186  2652  3188   	fcall	___ftmul
  5908                           
  5909                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5910  0C64  2607  3188         	fcall	PL28	;call to abstracted procedure
  5911  0C66  255A  3188         	fcall	___awmod
  5912  0C68  2625  3188         	fcall	PL36	;call to abstracted procedure
  5913  0C6A  2505               	fcall	___wmul
  5914  0C6B  0821               	movf	?___wmul+1,w
  5915  0C6C  3187  279F  3188   	fcall	PL4	;call to abstracted procedure
  5916  0C6F  26C1               	fcall	PL76	;call to abstracted procedure
  5917  0C70  3186  2652  3188   	fcall	___ftmul
  5918  0C73  2E16               	ljmp	PL30	;call to abstracted procedure
  5919  0C74                     l2395:	
  5920                           
  5921                           ;doprnt.c: 432: else if(scl > 10)
  5922                           
  5923                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5924  0C74  26D8  3188         	fcall	PL98	;call to abstracted procedure
  5925  0C76  1C03               	skipc
  5926  0C77  2C95               	goto	L6
  5927  0C78  261D  3188         	fcall	PL32	;call to abstracted procedure
  5928  0C7A  255A  3188         	fcall	___awmod
  5929  0C7C  2625  3188         	fcall	PL36	;call to abstracted procedure
  5930  0C7E  2505               	fcall	___wmul
  5931  0C7F  0821               	movf	?___wmul+1,w
  5932  0C80  3187  279F  3188   	fcall	PL4	;call to abstracted procedure
  5933  0C83  300A               	movlw	10
  5934  0C84  26B4  3188         	fcall	PL70	;call to abstracted procedure
  5935  0C86  1BF8               	btfsc	___awdiv@dividend,7
  5936  0C87  03F9               	decf	___awdiv@dividend+1,f
  5937  0C88  251A  3188         	fcall	___awdiv
  5938  0C8A  25B9  3188         	fcall	PL10	;call to abstracted procedure
  5939  0C8C  2505               	fcall	___wmul
  5940  0C8D  3187  27B7  3188   	fcall	PL18	;call to abstracted procedure
  5941  0C90  25C2               	fcall	PL12	;call to abstracted procedure
  5942  0C91  3186  2652  3188   	fcall	___ftmul
  5943  0C94  2E16               	ljmp	PL30	;call to abstracted procedure
  5944  0C95                     L6:	
  5945                           ;doprnt.c: 434: return _npowers_[scl];
  5946                           
  5947  0C95  3187  27CF  3188   	fcall	PL42	;call to abstracted procedure
  5948  0C98  2505               	fcall	___wmul
  5949  0C99  3187  27AD  3188   	fcall	PL8	;call to abstracted procedure
  5950  0C9C  2EC8               	ljmp	PL80	;call to abstracted procedure
  5951  0C9D                     l2405:	
  5952                           
  5953                           ;doprnt.c: 435: }
  5954                           ;doprnt.c: 436: if(scl>=110)
  5955  0C9D  083C               	movf	scale@scl,w
  5956  0C9E  3A80               	xorlw	128
  5957  0C9F  3E12               	addlw	-238
  5958  0CA0  1C03               	skipc
  5959  0CA1  2CD9               	goto	l2413
  5960                           
  5961                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5962  0CA2  2677  3188         	fcall	PL54	;call to abstracted procedure
  5963  0CA4  255A  3188         	fcall	___awmod
  5964  0CA6  26CE  3188         	fcall	PL92	;call to abstracted procedure
  5965  0CA8  251A  3188         	fcall	___awdiv
  5966  0CAA  25B9  3188         	fcall	PL10	;call to abstracted procedure
  5967  0CAC  2505  3188         	fcall	___wmul
  5968  0CAE  26A0  3188         	fcall	PL64	;call to abstracted procedure
  5969  0CB0  25B1  3188         	fcall	PL6	;call to abstracted procedure
  5970  0CB2  3064               	movlw	100
  5971  0CB3  26B4  3188         	fcall	PL70	;call to abstracted procedure
  5972  0CB5  1BF8               	btfsc	___awdiv@dividend,7
  5973  0CB6  03F9               	decf	___awdiv@dividend+1,f
  5974  0CB7  251A  3188         	fcall	___awdiv
  5975  0CB9  25B9  3188         	fcall	PL10	;call to abstracted procedure
  5976  0CBB  2505  3188         	fcall	___wmul
  5977  0CBD  0821               	movf	?___wmul+1,w
  5978  0CBE  0085               	movwf	5
  5979  0CBF  0820               	movf	?___wmul,w
  5980  0CC0  0084               	movwf	4
  5981  0CC1  3036               	movlw	low ((__powers_+54)| (0+32768))
  5982  0CC2  0784               	addwf	4,f
  5983  0CC3  3090               	movlw	high ((__powers_+54)| (0+32768))
  5984  0CC4  25C2               	fcall	PL12	;call to abstracted procedure
  5985  0CC5  3186  2652  3188   	fcall	___ftmul
  5986                           
  5987                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5988  0CC8  2607  3188         	fcall	PL28	;call to abstracted procedure
  5989  0CCA  255A  3188         	fcall	___awmod
  5990  0CCC  2625  3188         	fcall	PL36	;call to abstracted procedure
  5991  0CCE  2505  3188         	fcall	___wmul
  5992  0CD0  25F1  3188         	fcall	PL24	;call to abstracted procedure
  5993  0CD2  25B1  3188         	fcall	PL6	;call to abstracted procedure
  5994  0CD4  26C1               	fcall	PL76	;call to abstracted procedure
  5995  0CD5  3186  2652  3188   	fcall	___ftmul
  5996  0CD8  2E16               	ljmp	PL30	;call to abstracted procedure
  5997  0CD9                     l2413:	
  5998                           
  5999                           ;doprnt.c: 438: else if(scl > 10)
  6000                           
  6001                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6002  0CD9  26D8  3188         	fcall	PL98	;call to abstracted procedure
  6003  0CDB  1C03               	skipc
  6004  0CDC  2CFB               	goto	L7
  6005  0CDD  261D  3188         	fcall	PL32	;call to abstracted procedure
  6006  0CDF  255A  3188         	fcall	___awmod
  6007  0CE1  2625  3188         	fcall	PL36	;call to abstracted procedure
  6008  0CE3  2505  3188         	fcall	___wmul
  6009  0CE5  25F1  3188         	fcall	PL24	;call to abstracted procedure
  6010  0CE7  25B1  3188         	fcall	PL6	;call to abstracted procedure
  6011  0CE9  300A               	movlw	10
  6012  0CEA  26B4  3188         	fcall	PL70	;call to abstracted procedure
  6013  0CEC  1BF8               	btfsc	___awdiv@dividend,7
  6014  0CED  03F9               	decf	___awdiv@dividend+1,f
  6015  0CEE  251A  3188         	fcall	___awdiv
  6016  0CF0  25B9  3188         	fcall	PL10	;call to abstracted procedure
  6017  0CF2  2505  3188         	fcall	___wmul
  6018  0CF4  26A0  3188         	fcall	PL64	;call to abstracted procedure
  6019  0CF6  25C2               	fcall	PL12	;call to abstracted procedure
  6020  0CF7  3186  2652  3188   	fcall	___ftmul
  6021  0CFA  2E16               	ljmp	PL30	;call to abstracted procedure
  6022  0CFB                     L7:	
  6023                           ;doprnt.c: 440: return _powers_[scl];
  6024                           
  6025  0CFB  3187  27CF  3188   	fcall	PL42	;call to abstracted procedure
  6026  0CFE  2505  3188         	fcall	___wmul
  6027  0D00  25F1  3188         	fcall	PL24	;call to abstracted procedure
  6028  0D02  3D85               	addwfc	5,f
  6029  0D03  3F00               	moviw [0]fsr0
  6030  0D04  2EC8               	ljmp	PL80	;call to abstracted procedure
  6031  0D05                     __end_of_scale:	
  6032  0D05                     __ptext7:	
  6033 ;; *************** function ___wmul *****************
  6034 ;; Defined at:
  6035 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6038 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;  product         2    4[BANK0 ] unsigned int 
  6041 ;; Return value:  Size  Location     Type
  6042 ;;                  2    0[BANK0 ] unsigned int 
  6043 ;; Registers used:
  6044 ;;		wreg, status,2, status,0
  6045 ;; Tracked objects:
  6046 ;;		On entry : 1F/0
  6047 ;;		On exit  : 1F/0
  6048 ;;		Unchanged: 0/0
  6049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6050 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;Total ram usage:        6 bytes
  6055 ;; Hardware stack levels used:    1
  6056 ;; This function calls:
  6057 ;;		Nothing
  6058 ;; This function is called by:
  6059 ;;		_fround
  6060 ;;		_scale
  6061 ;;		_sprintf
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function ___wmul
  6067  0D05                     ___wmul:	
  6068                           
  6069                           ;incstack = 0
  6070                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6071  0D05  01A4               	clrf	___wmul@product
  6072  0D06  01A5               	clrf	___wmul@product+1
  6073  0D07                     l2025:	
  6074  0D07  1C20               	btfss	___wmul@multiplier,0
  6075  0D08  2D0D               	goto	l2029
  6076  0D09  0822               	movf	___wmul@multiplicand,w
  6077  0D0A  07A4               	addwf	___wmul@product,f
  6078  0D0B  0823               	movf	___wmul@multiplicand+1,w
  6079  0D0C  3DA5               	addwfc	___wmul@product+1,f
  6080  0D0D                     l2029:	
  6081  0D0D  35A2               	lslf	___wmul@multiplicand,f
  6082  0D0E  0DA3               	rlf	___wmul@multiplicand+1,f
  6083  0D0F  36A1               	lsrf	___wmul@multiplier+1,f
  6084  0D10  0CA0               	rrf	___wmul@multiplier,f
  6085  0D11  0820               	movf	___wmul@multiplier,w
  6086  0D12  0421               	iorwf	___wmul@multiplier+1,w
  6087  0D13  1D03               	btfss	3,2
  6088  0D14  2D07               	goto	l2025
  6089  0D15  0825               	movf	___wmul@product+1,w
  6090  0D16  00A1               	movwf	?___wmul+1
  6091  0D17  0824               	movf	___wmul@product,w
  6092  0D18  00A0               	movwf	?___wmul
  6093  0D19  0008               	return
  6094  0D1A                     __end_of___wmul:	
  6095  0D1A                     __ptext4:	
  6096 ;; *************** function ___awdiv *****************
  6097 ;; Defined at:
  6098 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  divisor         2    6[COMMON] int 
  6101 ;;  dividend        2    8[COMMON] int 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  quotient        2   12[COMMON] int 
  6104 ;;  sign            1   11[COMMON] unsigned char 
  6105 ;;  counter         1   10[COMMON] unsigned char 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  2    6[COMMON] int 
  6108 ;; Registers used:
  6109 ;;		wreg, status,2, status,0
  6110 ;; Tracked objects:
  6111 ;;		On entry : 1E/1
  6112 ;;		On exit  : 1E/0
  6113 ;;		Unchanged: 1E/0
  6114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6115 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6116 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6119 ;;Total ram usage:        8 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; This function calls:
  6122 ;;		Nothing
  6123 ;; This function is called by:
  6124 ;;		_scale
  6125 ;;		_sprintf
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           
  6130                           ;psect for function ___awdiv
  6131  0D1A                     ___awdiv:	
  6132                           
  6133                           ;incstack = 0
  6134                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6135  0D1A  01FB               	clrf	___awdiv@sign
  6136  0D1B  1FF7               	btfss	___awdiv@divisor+1,7
  6137  0D1C  2D24               	goto	l2047
  6138  0D1D  09F6               	comf	___awdiv@divisor,f
  6139  0D1E  09F7               	comf	___awdiv@divisor+1,f
  6140  0D1F  0AF6               	incf	___awdiv@divisor,f
  6141  0D20  1903               	skipnz
  6142  0D21  0AF7               	incf	___awdiv@divisor+1,f
  6143  0D22  01FB               	clrf	___awdiv@sign
  6144  0D23  0AFB               	incf	___awdiv@sign,f
  6145  0D24                     l2047:	
  6146  0D24  1FF9               	btfss	___awdiv@dividend+1,7
  6147  0D25  2D2D               	goto	l2053
  6148  0D26  09F8               	comf	___awdiv@dividend,f
  6149  0D27  09F9               	comf	___awdiv@dividend+1,f
  6150  0D28  0AF8               	incf	___awdiv@dividend,f
  6151  0D29  1903               	skipnz
  6152  0D2A  0AF9               	incf	___awdiv@dividend+1,f
  6153  0D2B  3001               	movlw	1
  6154  0D2C  06FB               	xorwf	___awdiv@sign,f
  6155  0D2D                     l2053:	
  6156  0D2D  01FC               	clrf	___awdiv@quotient
  6157  0D2E  01FD               	clrf	___awdiv@quotient+1
  6158  0D2F  0876               	movf	___awdiv@divisor,w
  6159  0D30  0477               	iorwf	___awdiv@divisor+1,w
  6160  0D31  1903               	btfsc	3,2
  6161  0D32  2D4D               	goto	l2075
  6162  0D33  01FA               	clrf	___awdiv@counter
  6163  0D34                     L9:	
  6164  0D34  0AFA               	incf	___awdiv@counter,f
  6165  0D35  1BF7               	btfsc	___awdiv@divisor+1,7
  6166  0D36  2D3A               	goto	l2063
  6167  0D37  35F6               	lslf	___awdiv@divisor,f
  6168  0D38  0DF7               	rlf	___awdiv@divisor+1,f
  6169  0D39  2D34               	goto	L9
  6170  0D3A                     l2063:	
  6171  0D3A  35FC               	lslf	___awdiv@quotient,f
  6172  0D3B  0DFD               	rlf	___awdiv@quotient+1,f
  6173  0D3C  0877               	movf	___awdiv@divisor+1,w
  6174  0D3D  0279               	subwf	___awdiv@dividend+1,w
  6175  0D3E  1D03               	skipz
  6176  0D3F  2D42               	goto	u1915
  6177  0D40  0876               	movf	___awdiv@divisor,w
  6178  0D41  0278               	subwf	___awdiv@dividend,w
  6179  0D42                     u1915:	
  6180  0D42  1C03               	skipc
  6181  0D43  2D49               	goto	l2071
  6182  0D44  0876               	movf	___awdiv@divisor,w
  6183  0D45  02F8               	subwf	___awdiv@dividend,f
  6184  0D46  0877               	movf	___awdiv@divisor+1,w
  6185  0D47  3BF9               	subwfb	___awdiv@dividend+1,f
  6186  0D48  147C               	bsf	___awdiv@quotient,0
  6187  0D49                     l2071:	
  6188  0D49  36F7               	lsrf	___awdiv@divisor+1,f
  6189  0D4A  0CF6               	rrf	___awdiv@divisor,f
  6190  0D4B  0BFA               	decfsz	___awdiv@counter,f
  6191  0D4C  2D3A               	goto	l2063
  6192  0D4D                     l2075:	
  6193  0D4D  087B               	movf	___awdiv@sign,w
  6194  0D4E  1903               	btfsc	3,2
  6195  0D4F  2D55               	goto	l2079
  6196  0D50  09FC               	comf	___awdiv@quotient,f
  6197  0D51  09FD               	comf	___awdiv@quotient+1,f
  6198  0D52  0AFC               	incf	___awdiv@quotient,f
  6199  0D53  1903               	skipnz
  6200  0D54  0AFD               	incf	___awdiv@quotient+1,f
  6201  0D55                     l2079:	
  6202  0D55  087D               	movf	___awdiv@quotient+1,w
  6203  0D56  00F7               	movwf	?___awdiv+1
  6204  0D57  087C               	movf	___awdiv@quotient,w
  6205  0D58  00F6               	movwf	?___awdiv
  6206  0D59  0008               	return
  6207  0D5A                     __end_of___awdiv:	
  6208  0D5A                     __ptext3:	
  6209 ;; *************** function ___awmod *****************
  6210 ;; Defined at:
  6211 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;  divisor         2    0[COMMON] int 
  6214 ;;  dividend        2    2[COMMON] int 
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;  sign            1    5[COMMON] unsigned char 
  6217 ;;  counter         1    4[COMMON] unsigned char 
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  2    0[COMMON] int 
  6220 ;; Registers used:
  6221 ;;		wreg, status,2, status,0
  6222 ;; Tracked objects:
  6223 ;;		On entry : 1F/0
  6224 ;;		On exit  : 1F/0
  6225 ;;		Unchanged: 1F/0
  6226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;Total ram usage:        6 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_scale
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           
  6241                           ;psect for function ___awmod
  6242  0D5A                     ___awmod:	
  6243                           
  6244                           ;incstack = 0
  6245                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6246  0D5A  01F5               	clrf	___awmod@sign
  6247  0D5B  1FF3               	btfss	___awmod@dividend+1,7
  6248  0D5C  2D64               	goto	l2091
  6249  0D5D  09F2               	comf	___awmod@dividend,f
  6250  0D5E  09F3               	comf	___awmod@dividend+1,f
  6251  0D5F  0AF2               	incf	___awmod@dividend,f
  6252  0D60  1903               	skipnz
  6253  0D61  0AF3               	incf	___awmod@dividend+1,f
  6254  0D62  01F5               	clrf	___awmod@sign
  6255  0D63  0AF5               	incf	___awmod@sign,f
  6256  0D64                     l2091:	
  6257  0D64  1FF1               	btfss	___awmod@divisor+1,7
  6258  0D65  2D6B               	goto	l2095
  6259  0D66  09F0               	comf	___awmod@divisor,f
  6260  0D67  09F1               	comf	___awmod@divisor+1,f
  6261  0D68  0AF0               	incf	___awmod@divisor,f
  6262  0D69  1903               	skipnz
  6263  0D6A  0AF1               	incf	___awmod@divisor+1,f
  6264  0D6B                     l2095:	
  6265  0D6B  0870               	movf	___awmod@divisor,w
  6266  0D6C  0471               	iorwf	___awmod@divisor+1,w
  6267  0D6D  1903               	btfsc	3,2
  6268  0D6E  2D86               	goto	l2111
  6269  0D6F  01F4               	clrf	___awmod@counter
  6270  0D70                     L8:	
  6271  0D70  0AF4               	incf	___awmod@counter,f
  6272  0D71  1BF1               	btfsc	___awmod@divisor+1,7
  6273  0D72  2D76               	goto	l2103
  6274  0D73  35F0               	lslf	___awmod@divisor,f
  6275  0D74  0DF1               	rlf	___awmod@divisor+1,f
  6276  0D75  2D70               	goto	L8
  6277  0D76                     l2103:	
  6278  0D76  0871               	movf	___awmod@divisor+1,w
  6279  0D77  0273               	subwf	___awmod@dividend+1,w
  6280  0D78  1D03               	skipz
  6281  0D79  2D7C               	goto	u1985
  6282  0D7A  0870               	movf	___awmod@divisor,w
  6283  0D7B  0272               	subwf	___awmod@dividend,w
  6284  0D7C                     u1985:	
  6285  0D7C  1C03               	skipc
  6286  0D7D  2D82               	goto	l2107
  6287  0D7E  0870               	movf	___awmod@divisor,w
  6288  0D7F  02F2               	subwf	___awmod@dividend,f
  6289  0D80  0871               	movf	___awmod@divisor+1,w
  6290  0D81  3BF3               	subwfb	___awmod@dividend+1,f
  6291  0D82                     l2107:	
  6292  0D82  36F1               	lsrf	___awmod@divisor+1,f
  6293  0D83  0CF0               	rrf	___awmod@divisor,f
  6294  0D84  0BF4               	decfsz	___awmod@counter,f
  6295  0D85  2D76               	goto	l2103
  6296  0D86                     l2111:	
  6297  0D86  0875               	movf	___awmod@sign,w
  6298  0D87  1903               	btfsc	3,2
  6299  0D88  2D8E               	goto	l2115
  6300  0D89  09F2               	comf	___awmod@dividend,f
  6301  0D8A  09F3               	comf	___awmod@dividend+1,f
  6302  0D8B  0AF2               	incf	___awmod@dividend,f
  6303  0D8C  1903               	skipnz
  6304  0D8D  0AF3               	incf	___awmod@dividend+1,f
  6305  0D8E                     l2115:	
  6306  0D8E  0873               	movf	___awmod@dividend+1,w
  6307  0D8F  00F1               	movwf	?___awmod+1
  6308  0D90  0872               	movf	___awmod@dividend,w
  6309  0D91  00F0               	movwf	?___awmod
  6310  0D92  0008               	return
  6311  0D93                     __end_of___awmod:	
  6312  0D93                     __ptext5:	
  6313 ;; *************** function _isdigit *****************
  6314 ;; Defined at:
  6315 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;  c               1    wreg     unsigned char 
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;  c               1    1[COMMON] unsigned char 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;		None               void
  6322 ;; Registers used:
  6323 ;;		wreg, status,2, status,0
  6324 ;; Tracked objects:
  6325 ;;		On entry : 1F/0
  6326 ;;		On exit  : 1F/0
  6327 ;;		Unchanged: 1F/0
  6328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;Total ram usage:        2 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; This function calls:
  6336 ;;		Nothing
  6337 ;; This function is called by:
  6338 ;;		_sprintf
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           
  6343                           ;psect for function _isdigit
  6344  0D93                     _isdigit:	
  6345                           
  6346                           ;incstack = 0
  6347                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6348                           ;isdigit@c stored from wreg
  6349  0D93  00F1               	movwf	isdigit@c
  6350  0D94  303A               	movlw	58
  6351  0D95  01F0               	clrf	_isdigit$558
  6352  0D96  0271               	subwf	isdigit@c,w
  6353  0D97  1803               	skipnc
  6354  0D98  2D9F               	goto	l2431
  6355  0D99  3030               	movlw	48
  6356  0D9A  0271               	subwf	isdigit@c,w
  6357  0D9B  1C03               	skipc
  6358  0D9C  2D9F               	goto	l2431
  6359  0D9D  01F0               	clrf	_isdigit$558
  6360  0D9E  0AF0               	incf	_isdigit$558,f
  6361  0D9F                     l2431:	
  6362  0D9F  0C70               	rrf	_isdigit$558,w
  6363  0DA0  0008               	return
  6364  0DA1                     __end_of_isdigit:	
  6365  0DA1                     PL2:	
  6366  0DA1  0838               	movf	sprintf@c^(0+128),w
  6367  0DA2  0020               	movlb	0	; select bank0
  6368  0DA3  00D7               	movwf	??_sprintf
  6369  0DA4  304E               	movlw	low (_dpowers| (0+32768))
  6370  0DA5  01D8               	clrf	??_sprintf+1
  6371  0DA6  35D7               	lslf	??_sprintf,f
  6372  0DA7  0DD8               	rlf	??_sprintf+1,f
  6373  0DA8  35D7               	lslf	??_sprintf,f
  6374  0DA9  0DD8               	rlf	??_sprintf+1,f
  6375  0DAA  0757               	addwf	??_sprintf,w
  6376  0DAB  0084               	movwf	4
  6377  0DAC  3090               	movlw	high (_dpowers| (0+32768))
  6378  0DAD  3D58               	addwfc	??_sprintf+1,w
  6379  0DAE  0085               	movwf	5
  6380  0DAF  3F00               	moviw [0]fsr0
  6381  0DB0  0008               	return
  6382  0DB1                     __end_ofPL2:	
  6383  0DB1                     PL6:	
  6384  0DB1  3D85               	addwfc	5,f
  6385  0DB2  3F00               	moviw [0]fsr0
  6386  0DB3  00A6               	movwf	___ftmul@f1
  6387  0DB4  3F01               	moviw [1]fsr0
  6388  0DB5  00A7               	movwf	___ftmul@f1+1
  6389  0DB6  3F02               	moviw [2]fsr0
  6390  0DB7  00A8               	movwf	___ftmul@f1+2
  6391  0DB8  0008               	return
  6392  0DB9                     __end_ofPL6:	
  6393  0DB9                     PL10:	
  6394  0DB9  0877               	movf	?___awdiv+1,w
  6395  0DBA  0020               	movlb	0	; select bank0
  6396  0DBB  00A1               	movwf	___wmul@multiplier+1
  6397  0DBC  0876               	movf	?___awdiv,w
  6398  0DBD  00A0               	movwf	___wmul@multiplier
  6399  0DBE  3003               	movlw	3
  6400  0DBF  00A2               	movwf	___wmul@multiplicand
  6401  0DC0  01A3               	clrf	___wmul@multiplicand+1
  6402  0DC1  0008               	return
  6403  0DC2                     __end_ofPL10:	
  6404  0DC2                     PL12:	
  6405  0DC2  3D85               	addwfc	5,f
  6406  0DC3  3F00               	moviw [0]fsr0
  6407  0DC4  00A9               	movwf	___ftmul@f2
  6408  0DC5  3F01               	moviw [1]fsr0
  6409  0DC6  00AA               	movwf	___ftmul@f2+1
  6410  0DC7  3F02               	moviw [2]fsr0
  6411  0DC8  00AB               	movwf	___ftmul@f2+2
  6412  0DC9  0008               	return
  6413  0DCA                     __end_ofPL12:	
  6414  0DCA                     PL16:	
  6415  0DCA  0873               	movf	?___lldiv+3,w
  6416  0DCB  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  6417  0DCC  0872               	movf	?___lldiv+2,w
  6418  0DCD  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6419  0DCE  0871               	movf	?___lldiv+1,w
  6420  0DCF  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6421  0DD0  0870               	movf	?___lldiv,w
  6422  0DD1  00A8               	movwf	sprintf@tmpval^(0+128)
  6423  0DD2  300A               	movlw	10
  6424  0DD3  00F0               	movwf	___llmod@divisor
  6425  0DD4  01F1               	clrf	___llmod@divisor+1
  6426  0DD5  01F2               	clrf	___llmod@divisor+2
  6427  0DD6  01F3               	clrf	___llmod@divisor+3
  6428  0DD7  082B               	movf	(sprintf@tmpval+3)^(0+128),w
  6429  0DD8  00F7               	movwf	___llmod@dividend+3
  6430  0DD9  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6431  0DDA  00F6               	movwf	___llmod@dividend+2
  6432  0DDB  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6433  0DDC  00F5               	movwf	___llmod@dividend+1
  6434  0DDD  0828               	movf	sprintf@tmpval^(0+128),w
  6435  0DDE  00F4               	movwf	___llmod@dividend
  6436  0DDF  0008               	return
  6437  0DE0                     __end_ofPL16:	
  6438  0DE0                     PL22:	
  6439  0DE0  00F0               	movwf	___lldiv@divisor
  6440  0DE1  3F01               	moviw [1]fsr0
  6441  0DE2  00F1               	movwf	___lldiv@divisor+1
  6442  0DE3  3F02               	moviw [2]fsr0
  6443  0DE4  00F2               	movwf	___lldiv@divisor+2
  6444  0DE5  3F03               	moviw [3]fsr0
  6445  0DE6  00F3               	movwf	___lldiv@divisor+3
  6446  0DE7  0021               	movlb	1	; select bank1
  6447  0DE8  0827               	movf	(sprintf@val+3)^(0+128),w
  6448  0DE9  00F7               	movwf	___lldiv@dividend+3
  6449  0DEA  0826               	movf	(sprintf@val+2)^(0+128),w
  6450  0DEB  00F6               	movwf	___lldiv@dividend+2
  6451  0DEC  0825               	movf	(sprintf@val+1)^(0+128),w
  6452  0DED  00F5               	movwf	___lldiv@dividend+1
  6453  0DEE  0824               	movf	sprintf@val^(0+128),w
  6454  0DEF  00F4               	movwf	___lldiv@dividend
  6455  0DF0  0008               	return
  6456  0DF1                     __end_ofPL22:	
  6457  0DF1                     PL24:	
  6458  0DF1  0821               	movf	?___wmul+1,w
  6459  0DF2  0085               	movwf	5
  6460  0DF3  0820               	movf	?___wmul,w
  6461  0DF4  0084               	movwf	4
  6462  0DF5  3000               	movlw	low (__powers_| (0+32768))
  6463  0DF6  0784               	addwf	4,f
  6464  0DF7  3490               	retlw	high (__powers_| (0+32768))
  6465  0DF8                     __end_ofPL24:	
  6466  0DF8                     PL26:	
  6467  0DF8  0020               	movlb	0	; select bank0
  6468  0DF9  0853               	movf	sprintf@f+1,w
  6469  0DFA  00D8               	movwf	??_sprintf+1
  6470  0DFB  0852               	movf	sprintf@f,w
  6471  0DFC  00D7               	movwf	??_sprintf
  6472  0DFD  0AD2               	incf	sprintf@f,f
  6473  0DFE  1903               	skipnz
  6474  0DFF  0AD3               	incf	sprintf@f+1,f
  6475  0E00  0084               	movwf	4
  6476  0E01  0858               	movf	??_sprintf+1,w
  6477  0E02  0085               	movwf	5
  6478  0E03  0800               	movf	0,w	;code access
  6479  0E04  0021               	movlb	1	; select bank1
  6480  0E05  00B8               	movwf	sprintf@c^(0+128)
  6481  0E06  0008               	return
  6482  0E07                     __end_ofPL26:	
  6483  0E07                     PL28:	
  6484  0E07  0826               	movf	?___ftmul,w
  6485  0E08  00B9               	movwf	_scale$791
  6486  0E09  0827               	movf	?___ftmul+1,w
  6487  0E0A  00BA               	movwf	_scale$791+1
  6488  0E0B  0828               	movf	?___ftmul+2,w
  6489  0E0C  00BB               	movwf	_scale$791+2
  6490  0E0D  083C               	movf	scale@scl,w
  6491  0E0E  00F2               	movwf	___awmod@dividend
  6492  0E0F  01F3               	clrf	___awmod@dividend+1
  6493  0E10  1BF2               	btfsc	___awmod@dividend,7
  6494  0E11  03F3               	decf	___awmod@dividend+1,f
  6495  0E12  300A               	movlw	10
  6496  0E13  00F0               	movwf	___awmod@divisor
  6497  0E14  01F1               	clrf	___awmod@divisor+1
  6498  0E15  0008               	return
  6499  0E16                     __end_ofPL28:	
  6500  0E16                     PL30:	
  6501  0E16  0826               	movf	?___ftmul,w
  6502  0E17  00B5               	movwf	?_scale
  6503  0E18  0827               	movf	?___ftmul+1,w
  6504  0E19  00B6               	movwf	?_scale+1
  6505  0E1A  0828               	movf	?___ftmul+2,w
  6506  0E1B  00B7               	movwf	?_scale+2
  6507  0E1C  0008               	return
  6508  0E1D                     __end_ofPL30:	
  6509  0E1D                     PL32:	
  6510  0E1D  00F2               	movwf	___awmod@dividend
  6511  0E1E  01F3               	clrf	___awmod@dividend+1
  6512  0E1F  1BF2               	btfsc	___awmod@dividend,7
  6513  0E20  03F3               	decf	___awmod@dividend+1,f
  6514  0E21  300A               	movlw	10
  6515  0E22  00F0               	movwf	___awmod@divisor
  6516  0E23  01F1               	clrf	___awmod@divisor+1
  6517  0E24  0008               	return
  6518  0E25                     __end_ofPL32:	
  6519  0E25                     PL36:	
  6520  0E25  0871               	movf	?___awmod+1,w
  6521  0E26  00A1               	movwf	___wmul@multiplier+1
  6522  0E27  0870               	movf	?___awmod,w
  6523  0E28  00A0               	movwf	___wmul@multiplier
  6524  0E29  3003               	movlw	3
  6525  0E2A  00A2               	movwf	___wmul@multiplicand
  6526  0E2B  01A3               	clrf	___wmul@multiplicand+1
  6527  0E2C  0008               	return
  6528  0E2D                     __end_ofPL36:	
  6529  0E2D                     PL38:	
  6530  0E2D  0837               	movf	sprintf@sp^(0+128),w
  6531  0E2E  0086               	movwf	6
  6532  0E2F  3030               	movlw	48
  6533  0E30  0187               	clrf	7
  6534  0E31  0081               	movwf	1
  6535  0E32  30FF               	movlw	-1
  6536  0E33  0AB7               	incf	sprintf@sp^(0+128),f
  6537  0E34  0008               	return
  6538  0E35                     __end_ofPL38:	
  6539  0E35                     PL40:	
  6540  0E35  0840               	movf	?___fttol+3,w
  6541  0E36  0021               	movlb	1	; select bank1
  6542  0E37  00A7               	movwf	(sprintf@val+3)^(0+128)
  6543  0E38  0020               	movlb	0	; select bank0
  6544  0E39  083F               	movf	?___fttol+2,w
  6545  0E3A  0021               	movlb	1	; select bank1
  6546  0E3B  00A6               	movwf	(sprintf@val+2)^(0+128)
  6547  0E3C  0020               	movlb	0	; select bank0
  6548  0E3D  083E               	movf	?___fttol+1,w
  6549  0E3E  0021               	movlb	1	; select bank1
  6550  0E3F  00A5               	movwf	(sprintf@val+1)^(0+128)
  6551  0E40  0020               	movlb	0	; select bank0
  6552  0E41  083D               	movf	?___fttol,w
  6553  0E42  0021               	movlb	1	; select bank1
  6554  0E43  0008               	return
  6555  0E44                     __end_ofPL40:	
  6556  0E44                     PL44:	
  6557  0E44  0873               	movf	?___llmod+3,w
  6558  0E45  00AB               	movwf	(sprintf@tmpval+3)^(0+128)
  6559  0E46  0872               	movf	?___llmod+2,w
  6560  0E47  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6561  0E48  0871               	movf	?___llmod+1,w
  6562  0E49  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6563  0E4A  0870               	movf	?___llmod,w
  6564  0E4B  00A8               	movwf	sprintf@tmpval^(0+128)
  6565  0E4C  0837               	movf	sprintf@sp^(0+128),w
  6566  0E4D  0086               	movwf	6
  6567  0E4E  0187               	clrf	7
  6568  0E4F  0828               	movf	sprintf@tmpval^(0+128),w
  6569  0E50  3E30               	addlw	48
  6570  0E51  0008               	return
  6571  0E52                     __end_ofPL44:	
  6572  0E52                     PL46:	
  6573  0E52  3A80               	xorlw	128
  6574  0E53  0020               	movlb	0	; select bank0
  6575  0E54  00D7               	movwf	??_sprintf
  6576  0E55  3080               	movlw	128
  6577  0E56  0257               	subwf	??_sprintf,w
  6578  0E57  0008               	return
  6579  0E58                     __end_ofPL46:	
  6580  0E58                     PL48:	
  6581  0E58  0835               	movf	?_scale,w
  6582  0E59  0021               	movlb	1	; select bank1
  6583  0E5A  00A8               	movwf	sprintf@tmpval^(0+128)
  6584  0E5B  0020               	movlb	0	; select bank0
  6585  0E5C  0836               	movf	?_scale+1,w
  6586  0E5D  0021               	movlb	1	; select bank1
  6587  0E5E  00A9               	movwf	(sprintf@tmpval+1)^(0+128)
  6588  0E5F  0020               	movlb	0	; select bank0
  6589  0E60  0837               	movf	?_scale+2,w
  6590  0E61  0021               	movlb	1	; select bank1
  6591  0E62  00AA               	movwf	(sprintf@tmpval+2)^(0+128)
  6592  0E63  0832               	movf	sprintf@fval^(0+128),w
  6593  0E64  0008               	return
  6594  0E65                     __end_ofPL48:	
  6595  0E65                     PL50:	
  6596  0E65  0852               	movf	sprintf@f,w
  6597  0E66  0084               	movwf	4
  6598  0E67  0853               	movf	sprintf@f+1,w
  6599  0E68  0085               	movwf	5
  6600  0E69  0800               	movf	0,w	;code access
  6601  0E6A  0008               	return
  6602  0E6B                     __end_ofPL50:	
  6603  0E6B                     PL52:	
  6604  0E6B  0832               	movf	sprintf@fval^(0+128),w
  6605  0E6C  0020               	movlb	0	; select bank0
  6606  0E6D  00BD               	movwf	___fttol@f1
  6607  0E6E  0021               	movlb	1	; select bank1
  6608  0E6F  0833               	movf	(sprintf@fval+1)^(0+128),w
  6609  0E70  0020               	movlb	0	; select bank0
  6610  0E71  00BE               	movwf	___fttol@f1+1
  6611  0E72  0021               	movlb	1	; select bank1
  6612  0E73  0834               	movf	(sprintf@fval+2)^(0+128),w
  6613  0E74  0020               	movlb	0	; select bank0
  6614  0E75  00BF               	movwf	___fttol@f1+2
  6615  0E76  0008               	return
  6616  0E77                     __end_ofPL52:	
  6617  0E77                     PL54:	
  6618  0E77  300A               	movlw	10
  6619  0E78  00F6               	movwf	___awdiv@divisor
  6620  0E79  01F7               	clrf	___awdiv@divisor+1
  6621  0E7A  083C               	movf	scale@scl,w
  6622  0E7B  00F2               	movwf	___awmod@dividend
  6623  0E7C  01F3               	clrf	___awmod@dividend+1
  6624  0E7D  1BF2               	btfsc	___awmod@dividend,7
  6625  0E7E  03F3               	decf	___awmod@dividend+1,f
  6626  0E7F  3064               	movlw	100
  6627  0E80  00F0               	movwf	___awmod@divisor
  6628  0E81  01F1               	clrf	___awmod@divisor+1
  6629  0E82  0008               	return
  6630  0E83                     __end_ofPL54:	
  6631  0E83                     PL56:	
  6632  0E83  0020               	movlb	0	; select bank0
  6633  0E84  00D7               	movwf	??_sprintf
  6634  0E85  01D8               	clrf	??_sprintf+1
  6635  0E86  1BD7               	btfsc	??_sprintf,7
  6636  0E87  03D8               	decf	??_sprintf+1,f
  6637  0E88  0021               	movlb	1	; select bank1
  6638  0E89  0008               	return
  6639  0E8A                     __end_ofPL56:	
  6640  0E8A                     PL60:	
  6641  0E8A  0020               	movlb	0	; select bank0
  6642  0E8B  00A6               	movwf	___ftmul@f1
  6643  0E8C  0021               	movlb	1	; select bank1
  6644  0E8D  0833               	movf	(sprintf@fval+1)^(0+128),w
  6645  0E8E  0020               	movlb	0	; select bank0
  6646  0E8F  00A7               	movwf	___ftmul@f1+1
  6647  0E90  0021               	movlb	1	; select bank1
  6648  0E91  0834               	movf	(sprintf@fval+2)^(0+128),w
  6649  0E92  0020               	movlb	0	; select bank0
  6650  0E93  00A8               	movwf	___ftmul@f1+2
  6651  0E94  0008               	return
  6652  0E95                     __end_ofPL60:	
  6653  0E95                     PL62:	
  6654  0E95  0838               	movf	sprintf@c^(0+128),w
  6655  0E96  0020               	movlb	0	; select bank0
  6656  0E97  00D7               	movwf	??_sprintf
  6657  0E98  01D8               	clrf	??_sprintf+1
  6658  0E99  1BD7               	btfsc	??_sprintf,7
  6659  0E9A  03D8               	decf	??_sprintf+1,f
  6660  0E9B  0858               	movf	??_sprintf+1,w
  6661  0E9C  3A80               	xorlw	128
  6662  0E9D  00D9               	movwf	??_sprintf+2
  6663  0E9E  0021               	movlb	1	; select bank1
  6664  0E9F  0008               	return
  6665  0EA0                     __end_ofPL62:	
  6666  0EA0                     PL64:	
  6667  0EA0  0821               	movf	?___wmul+1,w
  6668  0EA1  0085               	movwf	5
  6669  0EA2  0820               	movf	?___wmul,w
  6670  0EA3  0084               	movwf	4
  6671  0EA4  301B               	movlw	low ((__powers_+27)| (0+32768))
  6672  0EA5  0784               	addwf	4,f
  6673  0EA6  3490               	retlw	high ((__powers_+27)| (0+32768))
  6674  0EA7                     __end_ofPL64:	
  6675  0EA7                     PL66:	
  6676  0EA7  0828               	movf	sprintf@tmpval^(0+128),w
  6677  0EA8  00F0               	movwf	___ftge@ff1
  6678  0EA9  0829               	movf	(sprintf@tmpval+1)^(0+128),w
  6679  0EAA  00F1               	movwf	___ftge@ff1+1
  6680  0EAB  082A               	movf	(sprintf@tmpval+2)^(0+128),w
  6681  0EAC  00F2               	movwf	___ftge@ff1+2
  6682  0EAD  0008               	return
  6683  0EAE                     __end_ofPL66:	
  6684  0EAE                     PL68:	
  6685  0EAE  0187               	clrf	7
  6686  0EAF  0081               	movwf	1
  6687  0EB0  30FF               	movlw	-1
  6688  0EB1  0AB7               	incf	sprintf@sp^(0+128),f
  6689  0EB2  07B0               	addwf	sprintf@width^(0+128),f
  6690  0EB3  0008               	return
  6691  0EB4                     __end_ofPL68:	
  6692  0EB4                     PL70:	
  6693  0EB4  00F6               	movwf	___awdiv@divisor
  6694  0EB5  01F7               	clrf	___awdiv@divisor+1
  6695  0EB6  083C               	movf	scale@scl,w
  6696  0EB7  00F8               	movwf	___awdiv@dividend
  6697  0EB8  01F9               	clrf	___awdiv@dividend+1
  6698  0EB9  0008               	return
  6699  0EBA                     __end_ofPL70:	
  6700  0EBA                     PL72:	
  6701  0EBA  0837               	movf	sprintf@sp^(0+128),w
  6702  0EBB  0086               	movwf	6
  6703  0EBC  302D               	movlw	45
  6704  0EBD  0187               	clrf	7
  6705  0EBE  0081               	movwf	1
  6706  0EBF  0AB7               	incf	sprintf@sp^(0+128),f
  6707  0EC0  0008               	return
  6708  0EC1                     __end_ofPL72:	
  6709  0EC1                     PL76:	
  6710  0EC1  0839               	movf	_scale$791,w
  6711  0EC2  00A9               	movwf	___ftmul@f2
  6712  0EC3  083A               	movf	_scale$791+1,w
  6713  0EC4  00AA               	movwf	___ftmul@f2+1
  6714  0EC5  083B               	movf	_scale$791+2,w
  6715  0EC6  00AB               	movwf	___ftmul@f2+2
  6716  0EC7  0008               	return
  6717  0EC8                     __end_ofPL76:	
  6718  0EC8                     PL80:	
  6719  0EC8  00B5               	movwf	?_scale
  6720  0EC9  3F01               	moviw [1]fsr0
  6721  0ECA  00B6               	movwf	?_scale+1
  6722  0ECB  3F02               	moviw [2]fsr0
  6723  0ECC  00B7               	movwf	?_scale+2
  6724  0ECD  0008               	return
  6725  0ECE                     __end_ofPL80:	
  6726  0ECE                     PL92:	
  6727  0ECE  0871               	movf	?___awmod+1,w
  6728  0ECF  00F9               	movwf	___awdiv@dividend+1
  6729  0ED0  0870               	movf	?___awmod,w
  6730  0ED1  00F8               	movwf	___awdiv@dividend
  6731  0ED2  0008               	return
  6732  0ED3                     __end_ofPL92:	
  6733  0ED3                     PL94:	
  6734  0ED3  0837               	movf	sprintf@sp^(0+128),w
  6735  0ED4  0086               	movwf	6
  6736  0ED5  302D               	movlw	45
  6737  0ED6  0187               	clrf	7
  6738  0ED7  0008               	return
  6739  0ED8                     __end_ofPL94:	
  6740  0ED8                     PL98:	
  6741  0ED8  083C               	movf	scale@scl,w
  6742  0ED9  3A80               	xorlw	128
  6743  0EDA  3E75               	addlw	-139
  6744  0EDB  083C               	movf	scale@scl,w
  6745  0EDC  0008               	return
  6746  0EDD                     __end_ofPL98:	
  6747  0EDD                     __ptext20:	
  6748 ;; *************** function ___ftge *****************
  6749 ;; Defined at:
  6750 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  6751 ;; Parameters:    Size  Location     Type
  6752 ;;  ff1             3    0[COMMON] float 
  6753 ;;  ff2             3    3[COMMON] float 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;		None               void
  6758 ;; Registers used:
  6759 ;;		wreg, status,2, status,0
  6760 ;; Tracked objects:
  6761 ;;		On entry : 1F/1
  6762 ;;		On exit  : 1F/1
  6763 ;;		Unchanged: 1F/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6765 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;Total ram usage:        6 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; This function calls:
  6772 ;;		Nothing
  6773 ;; This function is called by:
  6774 ;;		_sprintf
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           
  6779                           ;psect for function ___ftge
  6780  0EDD                     ___ftge:	
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6784  0EDD  1FF2               	btfss	___ftge@ff1+2,7
  6785  0EDE  2EEC               	goto	l2539
  6786  0EDF  0870               	movf	___ftge@ff1,w
  6787  0EE0  3C00               	sublw	0
  6788  0EE1  00F0               	movwf	___ftge@ff1
  6789  0EE2  0871               	movf	___ftge@ff1+1,w
  6790  0EE3  1C03               	skipc
  6791  0EE4  0F71               	incfsz	___ftge@ff1+1,w
  6792  0EE5  3C00               	sublw	0
  6793  0EE6  00F1               	movwf	___ftge@ff1+1
  6794  0EE7  0872               	movf	___ftge@ff1+2,w
  6795  0EE8  1C03               	skipc
  6796  0EE9  0F72               	incfsz	___ftge@ff1+2,w
  6797  0EEA  3C80               	sublw	128
  6798  0EEB  00F2               	movwf	___ftge@ff1+2
  6799  0EEC                     l2539:	
  6800  0EEC  1FF5               	btfss	___ftge@ff2+2,7
  6801  0EED  2EFB               	goto	l2543
  6802  0EEE  0873               	movf	___ftge@ff2,w
  6803  0EEF  3C00               	sublw	0
  6804  0EF0  00F3               	movwf	___ftge@ff2
  6805  0EF1  0874               	movf	___ftge@ff2+1,w
  6806  0EF2  1C03               	skipc
  6807  0EF3  0F74               	incfsz	___ftge@ff2+1,w
  6808  0EF4  3C00               	sublw	0
  6809  0EF5  00F4               	movwf	___ftge@ff2+1
  6810  0EF6  0875               	movf	___ftge@ff2+2,w
  6811  0EF7  1C03               	skipc
  6812  0EF8  0F75               	incfsz	___ftge@ff2+2,w
  6813  0EF9  3C80               	sublw	128
  6814  0EFA  00F5               	movwf	___ftge@ff2+2
  6815  0EFB                     l2543:	
  6816  0EFB  3080               	movlw	128
  6817  0EFC  06F2               	xorwf	___ftge@ff1+2,f
  6818  0EFD  06F5               	xorwf	___ftge@ff2+2,f
  6819  0EFE  0875               	movf	___ftge@ff2+2,w
  6820  0EFF  0272               	subwf	___ftge@ff1+2,w
  6821  0F00  1D03               	skipz
  6822  0F01  0008               	return
  6823  0F02  0874               	movf	___ftge@ff2+1,w
  6824  0F03  0271               	subwf	___ftge@ff1+1,w
  6825  0F04  1D03               	skipz
  6826  0F05  0008               	return
  6827  0F06  0873               	movf	___ftge@ff2,w
  6828  0F07  0270               	subwf	___ftge@ff1,w
  6829  0F08  0008               	return
  6830  0F09                     __end_of___ftge:	
  6831  0F09                     __ptext16:	
  6832 ;; *************** function ___fttol *****************
  6833 ;; Defined at:
  6834 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;  f1              3   29[BANK0 ] float 
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  lval            4   37[BANK0 ] unsigned long 
  6839 ;;  exp1            1   41[BANK0 ] unsigned char 
  6840 ;;  sign1           1   36[BANK0 ] unsigned char 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  4   29[BANK0 ] long 
  6843 ;; Registers used:
  6844 ;;		wreg, status,2, status,0
  6845 ;; Tracked objects:
  6846 ;;		On entry : 1F/0
  6847 ;;		On exit  : 1F/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6850 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6851 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6852 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6853 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6854 ;;Total ram usage:       13 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; This function calls:
  6857 ;;		Nothing
  6858 ;; This function is called by:
  6859 ;;		_sprintf
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           
  6864                           ;psect for function ___fttol
  6865  0F09                     ___fttol:	
  6866                           
  6867                           ;incstack = 0
  6868                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6869  0F09  275E  3188         	fcall	PL84	;call to abstracted procedure
  6870  0F0B  1003               	clrc
  6871  0F0C  0D42               	rlf	??___fttol+1,w
  6872  0F0D  0D43               	rlf	??___fttol+2,w
  6873  0F0E  00C9               	movwf	___fttol@exp1
  6874  0F0F  0849               	movf	___fttol@exp1,w
  6875  0F10  1D03               	btfss	3,2
  6876  0F11  2F17               	goto	l2575
  6877  0F12                     l2573:	
  6878  0F12  01BD               	clrf	?___fttol
  6879  0F13  01BE               	clrf	?___fttol+1
  6880  0F14  01BF               	clrf	?___fttol+2
  6881  0F15  01C0               	clrf	?___fttol+3
  6882  0F16  0008               	return
  6883  0F17                     l2575:	
  6884  0F17  275E  3188         	fcall	PL84	;call to abstracted procedure
  6885  0F19  3017               	movlw	23
  6886  0F1A                     u2665:	
  6887  0F1A  36C3               	lsrf	??___fttol+2,f
  6888  0F1B  0CC2               	rrf	??___fttol+1,f
  6889  0F1C  0CC1               	rrf	??___fttol,f
  6890  0F1D  0B89               	decfsz	9,f
  6891  0F1E  2F1A               	goto	u2665
  6892  0F1F  0841               	movf	??___fttol,w
  6893  0F20  00C4               	movwf	___fttol@sign1
  6894  0F21  17BE               	bsf	___fttol@f1+1,7
  6895  0F22  01BF               	clrf	___fttol@f1+2
  6896  0F23  083D               	movf	___fttol@f1,w
  6897  0F24  00C5               	movwf	___fttol@lval
  6898  0F25  083E               	movf	___fttol@f1+1,w
  6899  0F26  00C6               	movwf	___fttol@lval+1
  6900  0F27  083F               	movf	___fttol@f1+2,w
  6901  0F28  00C7               	movwf	___fttol@lval+2
  6902  0F29  308E               	movlw	142
  6903  0F2A  01C8               	clrf	___fttol@lval+3
  6904  0F2B  02C9               	subwf	___fttol@exp1,f
  6905  0F2C  1FC9               	btfss	___fttol@exp1,7
  6906  0F2D  2F3A               	goto	l2595
  6907  0F2E  0849               	movf	___fttol@exp1,w
  6908  0F2F  3A80               	xorlw	128
  6909  0F30  3E8F               	addlw	143
  6910  0F31  1C03               	btfss	3,0
  6911  0F32  2F12               	goto	l2573
  6912  0F33                     l2591:	
  6913  0F33  36C8               	lsrf	___fttol@lval+3,f
  6914  0F34  0CC7               	rrf	___fttol@lval+2,f
  6915  0F35  0CC6               	rrf	___fttol@lval+1,f
  6916  0F36  0CC5               	rrf	___fttol@lval,f
  6917  0F37  0FC9               	incfsz	___fttol@exp1,f
  6918  0F38  2F33               	goto	l2591
  6919  0F39  2F47               	goto	l2603
  6920  0F3A                     l2595:	
  6921  0F3A  3018               	movlw	24
  6922  0F3B  0249               	subwf	___fttol@exp1,w
  6923  0F3C  1803               	btfsc	3,0
  6924  0F3D  2F12               	goto	l2573
  6925  0F3E                     l2601:	
  6926  0F3E  0849               	movf	___fttol@exp1,w
  6927  0F3F  1903               	btfsc	3,2
  6928  0F40  2F47               	goto	l2603
  6929  0F41  35C5               	lslf	___fttol@lval,f
  6930  0F42  0DC6               	rlf	___fttol@lval+1,f
  6931  0F43  0DC7               	rlf	___fttol@lval+2,f
  6932  0F44  0DC8               	rlf	___fttol@lval+3,f
  6933  0F45  03C9               	decf	___fttol@exp1,f
  6934  0F46  2F3E               	goto	l2601
  6935  0F47                     l2603:	
  6936  0F47  0844               	movf	___fttol@sign1,w
  6937  0F48  1903               	btfsc	3,2
  6938  0F49  2F55               	goto	l2607
  6939  0F4A  09C5               	comf	___fttol@lval,f
  6940  0F4B  09C6               	comf	___fttol@lval+1,f
  6941  0F4C  09C7               	comf	___fttol@lval+2,f
  6942  0F4D  09C8               	comf	___fttol@lval+3,f
  6943  0F4E  0AC5               	incf	___fttol@lval,f
  6944  0F4F  1903               	skipnz
  6945  0F50  0AC6               	incf	___fttol@lval+1,f
  6946  0F51  1903               	skipnz
  6947  0F52  0AC7               	incf	___fttol@lval+2,f
  6948  0F53  1903               	skipnz
  6949  0F54  0AC8               	incf	___fttol@lval+3,f
  6950  0F55                     l2607:	
  6951  0F55  0848               	movf	___fttol@lval+3,w
  6952  0F56  00C0               	movwf	?___fttol+3
  6953  0F57  0847               	movf	___fttol@lval+2,w
  6954  0F58  00BF               	movwf	?___fttol+2
  6955  0F59  0846               	movf	___fttol@lval+1,w
  6956  0F5A  00BE               	movwf	?___fttol+1
  6957  0F5B  0845               	movf	___fttol@lval,w
  6958  0F5C  00BD               	movwf	?___fttol
  6959  0F5D  0008               	return
  6960  0F5E                     __end_of___fttol:	
  6961  0F5E                     PL84:	
  6962  0F5E  083D               	movf	___fttol@f1,w
  6963  0F5F  00C1               	movwf	??___fttol
  6964  0F60  083E               	movf	___fttol@f1+1,w
  6965  0F61  00C2               	movwf	??___fttol+1
  6966  0F62  083F               	movf	___fttol@f1+2,w
  6967  0F63  00C3               	movwf	??___fttol+2
  6968  0F64  0008               	return
  6969  0F65                     __end_ofPL84:	
  6970  0F65                     __ptext14:	
  6971 ;; *************** function ___llmod *****************
  6972 ;; Defined at:
  6973 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;  divisor         4    0[COMMON] unsigned long 
  6976 ;;  dividend        4    4[COMMON] unsigned long 
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;  counter         1    8[COMMON] unsigned char 
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  4    0[COMMON] unsigned long 
  6981 ;; Registers used:
  6982 ;;		wreg, status,2, status,0
  6983 ;; Tracked objects:
  6984 ;;		On entry : 1F/1
  6985 ;;		On exit  : 1F/1
  6986 ;;		Unchanged: 1F/0
  6987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6988 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;Total ram usage:        9 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; This function calls:
  6995 ;;		Nothing
  6996 ;; This function is called by:
  6997 ;;		_sprintf
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           
  7002                           ;psect for function ___llmod
  7003  0F65                     ___llmod:	
  7004                           
  7005                           ;incstack = 0
  7006                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7007  0F65  0873               	movf	___llmod@divisor+3,w
  7008  0F66  0472               	iorwf	___llmod@divisor+2,w
  7009  0F67  0471               	iorwf	___llmod@divisor+1,w
  7010  0F68  0470               	iorwf	___llmod@divisor,w
  7011  0F69  1903               	skipnz
  7012  0F6A  2F92               	goto	l2653
  7013  0F6B  01F8               	clrf	___llmod@counter
  7014  0F6C                     L10:	
  7015  0F6C  0AF8               	incf	___llmod@counter,f
  7016  0F6D  1BF3               	btfsc	___llmod@divisor+3,7
  7017  0F6E  2F74               	goto	l2645
  7018  0F6F  35F0               	lslf	___llmod@divisor,f
  7019  0F70  0DF1               	rlf	___llmod@divisor+1,f
  7020  0F71  0DF2               	rlf	___llmod@divisor+2,f
  7021  0F72  0DF3               	rlf	___llmod@divisor+3,f
  7022  0F73  2F6C               	goto	L10
  7023  0F74                     l2645:	
  7024  0F74  0873               	movf	___llmod@divisor+3,w
  7025  0F75  0277               	subwf	___llmod@dividend+3,w
  7026  0F76  1D03               	skipz
  7027  0F77  2F82               	goto	u2795
  7028  0F78  0872               	movf	___llmod@divisor+2,w
  7029  0F79  0276               	subwf	___llmod@dividend+2,w
  7030  0F7A  1D03               	skipz
  7031  0F7B  2F82               	goto	u2795
  7032  0F7C  0871               	movf	___llmod@divisor+1,w
  7033  0F7D  0275               	subwf	___llmod@dividend+1,w
  7034  0F7E  1D03               	skipz
  7035  0F7F  2F82               	goto	u2795
  7036  0F80  0870               	movf	___llmod@divisor,w
  7037  0F81  0274               	subwf	___llmod@dividend,w
  7038  0F82                     u2795:	
  7039  0F82  1C03               	skipc
  7040  0F83  2F8C               	goto	l2649
  7041  0F84  0870               	movf	___llmod@divisor,w
  7042  0F85  02F4               	subwf	___llmod@dividend,f
  7043  0F86  0871               	movf	___llmod@divisor+1,w
  7044  0F87  3BF5               	subwfb	___llmod@dividend+1,f
  7045  0F88  0872               	movf	___llmod@divisor+2,w
  7046  0F89  3BF6               	subwfb	___llmod@dividend+2,f
  7047  0F8A  0873               	movf	___llmod@divisor+3,w
  7048  0F8B  3BF7               	subwfb	___llmod@dividend+3,f
  7049  0F8C                     l2649:	
  7050  0F8C  36F3               	lsrf	___llmod@divisor+3,f
  7051  0F8D  0CF2               	rrf	___llmod@divisor+2,f
  7052  0F8E  0CF1               	rrf	___llmod@divisor+1,f
  7053  0F8F  0CF0               	rrf	___llmod@divisor,f
  7054  0F90  0BF8               	decfsz	___llmod@counter,f
  7055  0F91  2F74               	goto	l2645
  7056  0F92                     l2653:	
  7057  0F92  0877               	movf	___llmod@dividend+3,w
  7058  0F93  00F3               	movwf	?___llmod+3
  7059  0F94  0876               	movf	___llmod@dividend+2,w
  7060  0F95  00F2               	movwf	?___llmod+2
  7061  0F96  0875               	movf	___llmod@dividend+1,w
  7062  0F97  00F1               	movwf	?___llmod+1
  7063  0F98  0874               	movf	___llmod@dividend,w
  7064  0F99  00F0               	movwf	?___llmod
  7065  0F9A  0008               	return
  7066  0F9B                     __end_of___llmod:	
  7067  0F9B                     __ptext15:	
  7068 ;; *************** function ___lldiv *****************
  7069 ;; Defined at:
  7070 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;  divisor         4    0[COMMON] unsigned long 
  7073 ;;  dividend        4    4[COMMON] unsigned long 
  7074 ;; Auto vars:     Size  Location     Type
  7075 ;;  quotient        4    8[COMMON] unsigned long 
  7076 ;;  counter         1   12[COMMON] unsigned char 
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  4    0[COMMON] unsigned long 
  7079 ;; Registers used:
  7080 ;;		wreg, status,2, status,0
  7081 ;; Tracked objects:
  7082 ;;		On entry : 1F/1
  7083 ;;		On exit  : 1F/1
  7084 ;;		Unchanged: 1F/0
  7085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7086 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7087 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;Total ram usage:       13 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; This function calls:
  7093 ;;		Nothing
  7094 ;; This function is called by:
  7095 ;;		_sprintf
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           
  7100                           ;psect for function ___lldiv
  7101  0F9B                     ___lldiv:	
  7102                           
  7103                           ;incstack = 0
  7104                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7105  0F9B  01F8               	clrf	___lldiv@quotient
  7106  0F9C  01F9               	clrf	___lldiv@quotient+1
  7107  0F9D  01FA               	clrf	___lldiv@quotient+2
  7108  0F9E  01FB               	clrf	___lldiv@quotient+3
  7109  0F9F  0873               	movf	___lldiv@divisor+3,w
  7110  0FA0  0472               	iorwf	___lldiv@divisor+2,w
  7111  0FA1  0471               	iorwf	___lldiv@divisor+1,w
  7112  0FA2  0470               	iorwf	___lldiv@divisor,w
  7113  0FA3  1903               	skipnz
  7114  0FA4  2FD1               	goto	l2633
  7115  0FA5  01FC               	clrf	___lldiv@counter
  7116  0FA6                     L11:	
  7117  0FA6  0AFC               	incf	___lldiv@counter,f
  7118  0FA7  1BF3               	btfsc	___lldiv@divisor+3,7
  7119  0FA8  2FAE               	goto	l2621
  7120  0FA9  35F0               	lslf	___lldiv@divisor,f
  7121  0FAA  0DF1               	rlf	___lldiv@divisor+1,f
  7122  0FAB  0DF2               	rlf	___lldiv@divisor+2,f
  7123  0FAC  0DF3               	rlf	___lldiv@divisor+3,f
  7124  0FAD  2FA6               	goto	L11
  7125  0FAE                     l2621:	
  7126  0FAE  35F8               	lslf	___lldiv@quotient,f
  7127  0FAF  0DF9               	rlf	___lldiv@quotient+1,f
  7128  0FB0  0DFA               	rlf	___lldiv@quotient+2,f
  7129  0FB1  0DFB               	rlf	___lldiv@quotient+3,f
  7130  0FB2  0873               	movf	___lldiv@divisor+3,w
  7131  0FB3  0277               	subwf	___lldiv@dividend+3,w
  7132  0FB4  1D03               	skipz
  7133  0FB5  2FC0               	goto	u2755
  7134  0FB6  0872               	movf	___lldiv@divisor+2,w
  7135  0FB7  0276               	subwf	___lldiv@dividend+2,w
  7136  0FB8  1D03               	skipz
  7137  0FB9  2FC0               	goto	u2755
  7138  0FBA  0871               	movf	___lldiv@divisor+1,w
  7139  0FBB  0275               	subwf	___lldiv@dividend+1,w
  7140  0FBC  1D03               	skipz
  7141  0FBD  2FC0               	goto	u2755
  7142  0FBE  0870               	movf	___lldiv@divisor,w
  7143  0FBF  0274               	subwf	___lldiv@dividend,w
  7144  0FC0                     u2755:	
  7145  0FC0  1C03               	skipc
  7146  0FC1  2FCB               	goto	l2629
  7147  0FC2  0870               	movf	___lldiv@divisor,w
  7148  0FC3  02F4               	subwf	___lldiv@dividend,f
  7149  0FC4  0871               	movf	___lldiv@divisor+1,w
  7150  0FC5  3BF5               	subwfb	___lldiv@dividend+1,f
  7151  0FC6  0872               	movf	___lldiv@divisor+2,w
  7152  0FC7  3BF6               	subwfb	___lldiv@dividend+2,f
  7153  0FC8  0873               	movf	___lldiv@divisor+3,w
  7154  0FC9  3BF7               	subwfb	___lldiv@dividend+3,f
  7155  0FCA  1478               	bsf	___lldiv@quotient,0
  7156  0FCB                     l2629:	
  7157  0FCB  36F3               	lsrf	___lldiv@divisor+3,f
  7158  0FCC  0CF2               	rrf	___lldiv@divisor+2,f
  7159  0FCD  0CF1               	rrf	___lldiv@divisor+1,f
  7160  0FCE  0CF0               	rrf	___lldiv@divisor,f
  7161  0FCF  0BFC               	decfsz	___lldiv@counter,f
  7162  0FD0  2FAE               	goto	l2621
  7163  0FD1                     l2633:	
  7164  0FD1  087B               	movf	___lldiv@quotient+3,w
  7165  0FD2  00F3               	movwf	?___lldiv+3
  7166  0FD3  087A               	movf	___lldiv@quotient+2,w
  7167  0FD4  00F2               	movwf	?___lldiv+2
  7168  0FD5  0879               	movf	___lldiv@quotient+1,w
  7169  0FD6  00F1               	movwf	?___lldiv+1
  7170  0FD7  0878               	movf	___lldiv@quotient,w
  7171  0FD8  00F0               	movwf	?___lldiv
  7172  0FD9  0008               	return
  7173  0FDA                     __end_of___lldiv:	
  7174  0FDA                     __ptext19:	
  7175 ;; *************** function ___ftneg *****************
  7176 ;; Defined at:
  7177 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;  f1              3    0[COMMON] float 
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;		None
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  3    0[COMMON] float 
  7184 ;; Registers used:
  7185 ;;		wreg
  7186 ;; Tracked objects:
  7187 ;;		On entry : 1F/1
  7188 ;;		On exit  : 1F/1
  7189 ;;		Unchanged: 1F/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7191 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;Total ram usage:        3 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; This function calls:
  7198 ;;		Nothing
  7199 ;; This function is called by:
  7200 ;;		_sprintf
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           
  7205                           ;psect for function ___ftneg
  7206  0FDA                     ___ftneg:	
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in ___ftneg: [wreg]
  7210  0FDA  0872               	movf	___ftneg@f1+2,w
  7211  0FDB  0471               	iorwf	___ftneg@f1+1,w
  7212  0FDC  0470               	iorwf	___ftneg@f1,w
  7213  0FDD  1903               	skipnz
  7214  0FDE  0008               	return
  7215  0FDF  3080               	movlw	128
  7216  0FE0  06F2               	xorwf	___ftneg@f1+2,f
  7217  0FE1  0008               	return
  7218  0FE2                     __end_of___ftneg:	
  7219  0FE2                     __ptext13:	
  7220 ;; *************** function ___lltoft *****************
  7221 ;; Defined at:
  7222 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;  c               4    8[COMMON] unsigned long 
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;  exp             1   12[COMMON] unsigned char 
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  3    8[COMMON] float 
  7229 ;; Registers used:
  7230 ;;		wreg, status,2, status,0, pclath, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 1F/1
  7233 ;;		On exit  : 1E/0
  7234 ;;		Unchanged: 1E/0
  7235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7236 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;Total ram usage:        5 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    1
  7243 ;; This function calls:
  7244 ;;		___ftpack
  7245 ;; This function is called by:
  7246 ;;		_sprintf
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           
  7251                           ;psect for function ___lltoft
  7252  0FE2                     ___lltoft:	
  7253                           
  7254                           ;incstack = 0
  7255                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7256  0FE2  308E               	movlw	142
  7257  0FE3  00FC               	movwf	___lltoft@exp
  7258  0FE4                     l2661:	
  7259  0FE4  30FF               	movlw	255
  7260  0FE5  057B               	andwf	___lltoft@c+3,w
  7261  0FE6  1903               	btfsc	3,2
  7262  0FE7  2FEE               	goto	l2663
  7263  0FE8  36FB               	lsrf	___lltoft@c+3,f
  7264  0FE9  0CFA               	rrf	___lltoft@c+2,f
  7265  0FEA  0CF9               	rrf	___lltoft@c+1,f
  7266  0FEB  0CF8               	rrf	___lltoft@c,f
  7267  0FEC  0AFC               	incf	___lltoft@exp,f
  7268  0FED  2FE4               	goto	l2661
  7269  0FEE                     l2663:	
  7270  0FEE  0878               	movf	___lltoft@c,w
  7271  0FEF  00F0               	movwf	___ftpack@arg
  7272  0FF0  0879               	movf	___lltoft@c+1,w
  7273  0FF1  00F1               	movwf	___ftpack@arg+1
  7274  0FF2  087A               	movf	___lltoft@c+2,w
  7275  0FF3  00F2               	movwf	___ftpack@arg+2
  7276  0FF4  087C               	movf	___lltoft@exp,w
  7277  0FF5  00F3               	movwf	___ftpack@exp
  7278  0FF6  01F4               	clrf	___ftpack@sign
  7279  0FF7  3186  26DF         	fcall	___ftpack
  7280  0FF9  0870               	movf	?___ftpack,w
  7281  0FFA  00F8               	movwf	?___lltoft
  7282  0FFB  0871               	movf	?___ftpack+1,w
  7283  0FFC  00F9               	movwf	?___lltoft+1
  7284  0FFD  0872               	movf	?___ftpack+2,w
  7285  0FFE  00FA               	movwf	?___lltoft+2
  7286  0FFF  0008               	return
  7287  1000                     __end_of___lltoft:	
  7288                           
  7289                           	psect	text11
  7290  0256                     __ptext11:	
  7291 ;; *************** function __tdiv_to_l_ *****************
  7292 ;; Defined at:
  7293 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;  f1              3    0[COMMON] float 
  7296 ;;  f2              3    3[COMMON] float 
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  quot            4    0[BANK0 ] unsigned long 
  7299 ;;  exp1            1    5[BANK0 ] unsigned char 
  7300 ;;  cntr            1    4[BANK0 ] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  4    0[COMMON] unsigned long 
  7303 ;; Registers used:
  7304 ;;		wreg, status,2, status,0
  7305 ;; Tracked objects:
  7306 ;;		On entry : 1F/1
  7307 ;;		On exit  : 1F/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7310 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;Total ram usage:       15 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; This function calls:
  7317 ;;		Nothing
  7318 ;; This function is called by:
  7319 ;;		_sprintf
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function __tdiv_to_l_
  7325  0256                     __tdiv_to_l_:	
  7326                           
  7327                           ;incstack = 0
  7328                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  7329  0256  0870               	movf	__tdiv_to_l_@f1,w
  7330  0257  00F6               	movwf	??__tdiv_to_l_
  7331  0258  0871               	movf	__tdiv_to_l_@f1+1,w
  7332  0259  00F7               	movwf	??__tdiv_to_l_+1
  7333  025A  0872               	movf	__tdiv_to_l_@f1+2,w
  7334  025B  00F8               	movwf	??__tdiv_to_l_+2
  7335  025C  1003               	clrc
  7336  025D  0D77               	rlf	??__tdiv_to_l_+1,w
  7337  025E  0D78               	rlf	??__tdiv_to_l_+2,w
  7338  025F  0020               	movlb	0	; select bank0
  7339  0260  00A5               	movwf	__tdiv_to_l_@exp1
  7340  0261  0825               	movf	__tdiv_to_l_@exp1,w
  7341  0262  1D03               	btfss	3,2
  7342  0263  2A69               	goto	l2439
  7343  0264                     l2437:	
  7344  0264  01F0               	clrf	?__tdiv_to_l_
  7345  0265  01F1               	clrf	?__tdiv_to_l_+1
  7346  0266  01F2               	clrf	?__tdiv_to_l_+2
  7347  0267  01F3               	clrf	?__tdiv_to_l_+3
  7348  0268  0008               	return
  7349  0269                     l2439:	
  7350  0269  0873               	movf	__tdiv_to_l_@f2,w
  7351  026A  00F6               	movwf	??__tdiv_to_l_
  7352  026B  0874               	movf	__tdiv_to_l_@f2+1,w
  7353  026C  00F7               	movwf	??__tdiv_to_l_+1
  7354  026D  0875               	movf	__tdiv_to_l_@f2+2,w
  7355  026E  00F8               	movwf	??__tdiv_to_l_+2
  7356  026F  1003               	clrc
  7357  0270  0D77               	rlf	??__tdiv_to_l_+1,w
  7358  0271  0D78               	rlf	??__tdiv_to_l_+2,w
  7359  0272  00A4               	movwf	__tdiv_to_l_@cntr
  7360  0273  0824               	movf	__tdiv_to_l_@cntr,w
  7361  0274  1903               	btfsc	3,2
  7362  0275  2A64               	goto	l2437
  7363  0276  307F               	movlw	127
  7364  0277  17F1               	bsf	__tdiv_to_l_@f1+1,7
  7365  0278  01F2               	clrf	__tdiv_to_l_@f1+2
  7366  0279  17F4               	bsf	__tdiv_to_l_@f2+1,7
  7367  027A  01F5               	clrf	__tdiv_to_l_@f2+2
  7368  027B  01A0               	clrf	__tdiv_to_l_@quot
  7369  027C  01A1               	clrf	__tdiv_to_l_@quot+1
  7370  027D  01A2               	clrf	__tdiv_to_l_@quot+2
  7371  027E  01A3               	clrf	__tdiv_to_l_@quot+3
  7372  027F  02A5               	subwf	__tdiv_to_l_@exp1,f
  7373  0280  3098               	movlw	152
  7374  0281  0724               	addwf	__tdiv_to_l_@cntr,w
  7375  0282  00F6               	movwf	??__tdiv_to_l_
  7376  0283  02A5               	subwf	__tdiv_to_l_@exp1,f
  7377  0284  3018               	movlw	24
  7378  0285  00A4               	movwf	__tdiv_to_l_@cntr
  7379  0286                     l2453:	
  7380  0286  35A0               	lslf	__tdiv_to_l_@quot,f
  7381  0287  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  7382  0288  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  7383  0289  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  7384  028A  0875               	movf	__tdiv_to_l_@f2+2,w
  7385  028B  0272               	subwf	__tdiv_to_l_@f1+2,w
  7386  028C  1D03               	skipz
  7387  028D  2A94               	goto	u2445
  7388  028E  0874               	movf	__tdiv_to_l_@f2+1,w
  7389  028F  0271               	subwf	__tdiv_to_l_@f1+1,w
  7390  0290  1D03               	skipz
  7391  0291  2A94               	goto	u2445
  7392  0292  0873               	movf	__tdiv_to_l_@f2,w
  7393  0293  0270               	subwf	__tdiv_to_l_@f1,w
  7394  0294                     u2445:	
  7395  0294  1C03               	skipc
  7396  0295  2A9D               	goto	l2461
  7397  0296  0873               	movf	__tdiv_to_l_@f2,w
  7398  0297  02F0               	subwf	__tdiv_to_l_@f1,f
  7399  0298  0874               	movf	__tdiv_to_l_@f2+1,w
  7400  0299  3BF1               	subwfb	__tdiv_to_l_@f1+1,f
  7401  029A  0875               	movf	__tdiv_to_l_@f2+2,w
  7402  029B  3BF2               	subwfb	__tdiv_to_l_@f1+2,f
  7403  029C  1420               	bsf	__tdiv_to_l_@quot,0
  7404  029D                     l2461:	
  7405  029D  35F0               	lslf	__tdiv_to_l_@f1,f
  7406  029E  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  7407  029F  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  7408  02A0  0BA4               	decfsz	__tdiv_to_l_@cntr,f
  7409  02A1  2A86               	goto	l2453
  7410  02A2  1FA5               	btfss	__tdiv_to_l_@exp1,7
  7411  02A3  2AB0               	goto	l2473
  7412  02A4  0825               	movf	__tdiv_to_l_@exp1,w
  7413  02A5  3A80               	xorlw	128
  7414  02A6  3E97               	addlw	151
  7415  02A7  1C03               	btfss	3,0
  7416  02A8  2A64               	goto	l2437
  7417  02A9                     l2469:	
  7418  02A9  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  7419  02AA  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  7420  02AB  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  7421  02AC  0CA0               	rrf	__tdiv_to_l_@quot,f
  7422  02AD  0FA5               	incfsz	__tdiv_to_l_@exp1,f
  7423  02AE  2AA9               	goto	l2469
  7424  02AF  2ABD               	goto	l2481
  7425  02B0                     l2473:	
  7426  02B0  3018               	movlw	24
  7427  02B1  0225               	subwf	__tdiv_to_l_@exp1,w
  7428  02B2  1803               	btfsc	3,0
  7429  02B3  2A64               	goto	l2437
  7430  02B4                     l2479:	
  7431  02B4  0825               	movf	__tdiv_to_l_@exp1,w
  7432  02B5  1903               	btfsc	3,2
  7433  02B6  2ABD               	goto	l2481
  7434  02B7  35A0               	lslf	__tdiv_to_l_@quot,f
  7435  02B8  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  7436  02B9  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  7437  02BA  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  7438  02BB  03A5               	decf	__tdiv_to_l_@exp1,f
  7439  02BC  2AB4               	goto	l2479
  7440  02BD                     l2481:	
  7441  02BD  0823               	movf	__tdiv_to_l_@quot+3,w
  7442  02BE  00F3               	movwf	?__tdiv_to_l_+3
  7443  02BF  0822               	movf	__tdiv_to_l_@quot+2,w
  7444  02C0  00F2               	movwf	?__tdiv_to_l_+2
  7445  02C1  0821               	movf	__tdiv_to_l_@quot+1,w
  7446  02C2  00F1               	movwf	?__tdiv_to_l_+1
  7447  02C3  0820               	movf	__tdiv_to_l_@quot,w
  7448  02C4  00F0               	movwf	?__tdiv_to_l_
  7449  02C5  0008               	return
  7450  02C6                     __end_of__tdiv_to_l_:	
  7451                           
  7452                           	psect	text12
  7453  02C6                     __ptext12:	
  7454 ;; *************** function __div_to_l_ *****************
  7455 ;; Defined at:
  7456 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  f1              3    0[COMMON] unsigned long 
  7459 ;;  f2              3    3[COMMON] unsigned long 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  quot            4    0[BANK0 ] unsigned long 
  7462 ;;  exp1            1    5[BANK0 ] unsigned char 
  7463 ;;  cntr            1    4[BANK0 ] unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  4    0[COMMON] unsigned long 
  7466 ;; Registers used:
  7467 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 1F/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7473 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7476 ;;      Totals:        14       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7477 ;;Total ram usage:       20 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; This function calls:
  7480 ;;		Nothing
  7481 ;; This function is called by:
  7482 ;;		_sprintf
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           
  7487                           ;psect for function __div_to_l_
  7488  02C6                     __div_to_l_:	
  7489                           
  7490                           ;incstack = 0
  7491                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  7492  02C6  3070               	movlw	low (__div_to_l_@f1| 0)
  7493  02C7  2366  3182         	fcall	PL14	;call to abstracted procedure
  7494  02C9  1003               	clrc
  7495  02CA  0D78               	rlf	??__div_to_l_+2,w
  7496  02CB  0D79               	rlf	??__div_to_l_+3,w
  7497  02CC  0020               	movlb	0	; select bank0
  7498  02CD  00A5               	movwf	__div_to_l_@exp1
  7499  02CE  0825               	movf	__div_to_l_@exp1,w
  7500  02CF  1D03               	btfss	3,2
  7501  02D0  2AD6               	goto	l2489
  7502  02D1                     l2487:	
  7503  02D1  01F0               	clrf	?__div_to_l_
  7504  02D2  01F1               	clrf	?__div_to_l_+1
  7505  02D3  01F2               	clrf	?__div_to_l_+2
  7506  02D4  01F3               	clrf	?__div_to_l_+3
  7507  02D5  0008               	return
  7508  02D6                     l2489:	
  7509  02D6  3073               	movlw	low (__div_to_l_@f2| 0)
  7510  02D7  2366  3182         	fcall	PL14	;call to abstracted procedure
  7511  02D9  1003               	clrc
  7512  02DA  0D78               	rlf	??__div_to_l_+2,w
  7513  02DB  0D79               	rlf	??__div_to_l_+3,w
  7514  02DC  00A4               	movwf	__div_to_l_@cntr
  7515  02DD  0824               	movf	__div_to_l_@cntr,w
  7516  02DE  1903               	btfsc	3,2
  7517  02DF  2AD1               	goto	l2487
  7518  02E0  3070               	movlw	low (__div_to_l_@f1| 0)
  7519  02E1  0086               	movwf	6
  7520  02E2  3080               	movlw	128
  7521  02E3  3141               	addfsr 1,1
  7522  02E4  3141               	addfsr 1,1
  7523  02E5  0481               	iorwf	1,f
  7524  02E6  3070               	movlw	low (__div_to_l_@f1| 0)
  7525  02E7  3141               	addfsr 1,1
  7526  02E8  0086               	movwf	6
  7527  02E9  3073               	movlw	low (__div_to_l_@f2| 0)
  7528  02EA  2371  3182         	fcall	PL90	;call to abstracted procedure
  7529  02EC  0086               	movwf	6
  7530  02ED  3080               	movlw	128
  7531  02EE  0187               	clrf	7
  7532  02EF  3141               	addfsr 1,1
  7533  02F0  3141               	addfsr 1,1
  7534  02F1  0481               	iorwf	1,f
  7535  02F2  3073               	movlw	low (__div_to_l_@f2| 0)
  7536  02F3  3141               	addfsr 1,1
  7537  02F4  0086               	movwf	6
  7538  02F5  307F               	movlw	127
  7539  02F6  2371  3182         	fcall	PL90	;call to abstracted procedure
  7540  02F8  01A0               	clrf	__div_to_l_@quot
  7541  02F9  01A1               	clrf	__div_to_l_@quot+1
  7542  02FA  01A2               	clrf	__div_to_l_@quot+2
  7543  02FB  01A3               	clrf	__div_to_l_@quot+3
  7544  02FC  02A5               	subwf	__div_to_l_@exp1,f
  7545  02FD  30A0               	movlw	160
  7546  02FE  0724               	addwf	__div_to_l_@cntr,w
  7547  02FF  00F6               	movwf	??__div_to_l_
  7548  0300  02A5               	subwf	__div_to_l_@exp1,f
  7549  0301  3020               	movlw	32
  7550  0302  00A4               	movwf	__div_to_l_@cntr
  7551  0303                     l2503:	
  7552  0303  3073               	movlw	low (__div_to_l_@f2| 0)
  7553  0304  35A0               	lslf	__div_to_l_@quot,f
  7554  0305  0DA1               	rlf	__div_to_l_@quot+1,f
  7555  0306  0DA2               	rlf	__div_to_l_@quot+2,f
  7556  0307  0DA3               	rlf	__div_to_l_@quot+3,f
  7557  0308  2366  3182         	fcall	PL14	;call to abstracted procedure
  7558  030A  3070               	movlw	low (__div_to_l_@f1| 0)
  7559  030B  0086               	movwf	6
  7560  030C  3F40               	moviw [0]fsr1
  7561  030D  00FA               	movwf	??__div_to_l_+4
  7562  030E  3F41               	moviw [1]fsr1
  7563  030F  00FB               	movwf	??__div_to_l_+5
  7564  0310  3F42               	moviw [2]fsr1
  7565  0311  00FC               	movwf	??__div_to_l_+6
  7566  0312  3F43               	moviw [3]fsr1
  7567  0313  00FD               	movwf	??__div_to_l_+7
  7568  0314  0879               	movf	??__div_to_l_+3,w
  7569  0315  027D               	subwf	??__div_to_l_+7,w
  7570  0316  1D03               	skipz
  7571  0317  2B22               	goto	u2535
  7572  0318  0878               	movf	??__div_to_l_+2,w
  7573  0319  027C               	subwf	??__div_to_l_+6,w
  7574  031A  1D03               	skipz
  7575  031B  2B22               	goto	u2535
  7576  031C  0877               	movf	??__div_to_l_+1,w
  7577  031D  027B               	subwf	??__div_to_l_+5,w
  7578  031E  1D03               	skipz
  7579  031F  2B22               	goto	u2535
  7580  0320  0876               	movf	??__div_to_l_,w
  7581  0321  027A               	subwf	??__div_to_l_+4,w
  7582  0322                     u2535:	
  7583  0322  1C03               	skipc
  7584  0323  2B36               	goto	l2511
  7585  0324  3073               	movlw	low (__div_to_l_@f2| 0)
  7586  0325  2366  3182         	fcall	PL14	;call to abstracted procedure
  7587  0327  3070               	movlw	low (__div_to_l_@f1| 0)
  7588  0328  0086               	movwf	6
  7589  0329  0876               	movf	??__div_to_l_,w
  7590  032A  0281               	subwf	1,f
  7591  032B  3141               	addfsr 1,1
  7592  032C  0877               	movf	??__div_to_l_+1,w
  7593  032D  3B81               	subwfb	1,f
  7594  032E  3141               	addfsr 1,1
  7595  032F  0878               	movf	??__div_to_l_+2,w
  7596  0330  3B81               	subwfb	1,f
  7597  0331  3141               	addfsr 1,1
  7598  0332  0879               	movf	??__div_to_l_+3,w
  7599  0333  3B81               	subwfb	1,f
  7600  0334  317D               	addfsr 1,-3
  7601  0335  1420               	bsf	__div_to_l_@quot,0
  7602  0336                     l2511:	
  7603  0336  3070               	movlw	low (__div_to_l_@f1| 0)
  7604  0337  0086               	movwf	6
  7605  0338  0187               	clrf	7
  7606  0339  3581               	lslf	1,f
  7607  033A  3141               	addfsr 1,1
  7608  033B  0D81               	rlf	1,f
  7609  033C  3141               	addfsr 1,1
  7610  033D  0D81               	rlf	1,f
  7611  033E  3141               	addfsr 1,1
  7612  033F  0D81               	rlf	1,f
  7613  0340  0BA4               	decfsz	__div_to_l_@cntr,f
  7614  0341  2B03               	goto	l2503
  7615  0342  1FA5               	btfss	__div_to_l_@exp1,7
  7616  0343  2B50               	goto	l2523
  7617  0344  0825               	movf	__div_to_l_@exp1,w
  7618  0345  3A80               	xorlw	128
  7619  0346  3E9F               	addlw	159
  7620  0347  1C03               	btfss	3,0
  7621  0348  2AD1               	goto	l2487
  7622  0349                     l2519:	
  7623  0349  36A3               	lsrf	__div_to_l_@quot+3,f
  7624  034A  0CA2               	rrf	__div_to_l_@quot+2,f
  7625  034B  0CA1               	rrf	__div_to_l_@quot+1,f
  7626  034C  0CA0               	rrf	__div_to_l_@quot,f
  7627  034D  0FA5               	incfsz	__div_to_l_@exp1,f
  7628  034E  2B49               	goto	l2519
  7629  034F  2B5D               	goto	l2531
  7630  0350                     l2523:	
  7631  0350  3020               	movlw	32
  7632  0351  0225               	subwf	__div_to_l_@exp1,w
  7633  0352  1803               	btfsc	3,0
  7634  0353  2AD1               	goto	l2487
  7635  0354                     l2529:	
  7636  0354  0825               	movf	__div_to_l_@exp1,w
  7637  0355  1903               	btfsc	3,2
  7638  0356  2B5D               	goto	l2531
  7639  0357  35A0               	lslf	__div_to_l_@quot,f
  7640  0358  0DA1               	rlf	__div_to_l_@quot+1,f
  7641  0359  0DA2               	rlf	__div_to_l_@quot+2,f
  7642  035A  0DA3               	rlf	__div_to_l_@quot+3,f
  7643  035B  03A5               	decf	__div_to_l_@exp1,f
  7644  035C  2B54               	goto	l2529
  7645  035D                     l2531:	
  7646  035D  0823               	movf	__div_to_l_@quot+3,w
  7647  035E  00F3               	movwf	?__div_to_l_+3
  7648  035F  0822               	movf	__div_to_l_@quot+2,w
  7649  0360  00F2               	movwf	?__div_to_l_+2
  7650  0361  0821               	movf	__div_to_l_@quot+1,w
  7651  0362  00F1               	movwf	?__div_to_l_+1
  7652  0363  0820               	movf	__div_to_l_@quot,w
  7653  0364  00F0               	movwf	?__div_to_l_
  7654  0365  0008               	return
  7655  0366                     __end_of__div_to_l_:	
  7656  0366                     PL14:	
  7657  0366  0086               	movwf	6
  7658  0367  0187               	clrf	7
  7659  0368  3F40               	moviw [0]fsr1
  7660  0369  00F6               	movwf	??__div_to_l_
  7661  036A  3F41               	moviw [1]fsr1
  7662  036B  00F7               	movwf	??__div_to_l_+1
  7663  036C  3F42               	moviw [2]fsr1
  7664  036D  00F8               	movwf	??__div_to_l_+2
  7665  036E  3F43               	moviw [3]fsr1
  7666  036F  00F9               	movwf	??__div_to_l_+3
  7667  0370  0008               	return
  7668  0371                     __end_ofPL14:	
  7669  0371                     PL90:	
  7670  0371  0187               	clrf	7
  7671  0372  3141               	addfsr 1,1
  7672  0373  3141               	addfsr 1,1
  7673  0374  3141               	addfsr 1,1
  7674  0375  0181               	clrf	1
  7675  0376  0008               	return
  7676  0377                     __end_ofPL90:	
  7677                           
  7678                           	psect	text17
  7679  0377                     __ptext17:	
  7680 ;; *************** function ___ftsub *****************
  7681 ;; Defined at:
  7682 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;  f2              3   44[BANK0 ] float 
  7685 ;;  f1              3   47[BANK0 ] float 
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;		None
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  3   44[BANK0 ] float 
  7690 ;; Registers used:
  7691 ;;		wreg, status,2, status,0, pclath, cstack
  7692 ;; Tracked objects:
  7693 ;;		On entry : 1F/0
  7694 ;;		On exit  : 1F/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7697 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;Total ram usage:        6 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:    2
  7704 ;; This function calls:
  7705 ;;		___ftadd
  7706 ;; This function is called by:
  7707 ;;		_sprintf
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           
  7712                           ;psect for function ___ftsub
  7713  0377                     ___ftsub:	
  7714                           
  7715                           ;incstack = 0
  7716                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7717  0377  084E               	movf	___ftsub@f2+2,w
  7718  0378  044D               	iorwf	___ftsub@f2+1,w
  7719  0379  044C               	iorwf	___ftsub@f2,w
  7720  037A  1903               	skipnz
  7721  037B  2B7E               	goto	l2567
  7722  037C  3080               	movlw	128
  7723  037D  06CE               	xorwf	___ftsub@f2+2,f
  7724  037E                     l2567:	
  7725  037E  084F               	movf	___ftsub@f1,w
  7726  037F  00C0               	movwf	___ftadd@f1
  7727  0380  0850               	movf	___ftsub@f1+1,w
  7728  0381  00C1               	movwf	___ftadd@f1+1
  7729  0382  0851               	movf	___ftsub@f1+2,w
  7730  0383  00C2               	movwf	___ftadd@f1+2
  7731  0384  084C               	movf	___ftsub@f2,w
  7732  0385  00C3               	movwf	___ftadd@f2
  7733  0386  084D               	movf	___ftsub@f2+1,w
  7734  0387  00C4               	movwf	___ftadd@f2+1
  7735  0388  084E               	movf	___ftsub@f2+2,w
  7736  0389  00C5               	movwf	___ftadd@f2+2
  7737  038A  2392               	fcall	___ftadd
  7738  038B  0840               	movf	?___ftadd,w
  7739  038C  00CC               	movwf	?___ftsub
  7740  038D  0841               	movf	?___ftadd+1,w
  7741  038E  00CD               	movwf	?___ftsub+1
  7742  038F  0842               	movf	?___ftadd+2,w
  7743  0390  00CE               	movwf	?___ftsub+2
  7744  0391  0008               	return
  7745  0392                     __end_of___ftsub:	
  7746  0392                     __ptext18:	
  7747 ;; *************** function ___ftadd *****************
  7748 ;; Defined at:
  7749 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  7750 ;; Parameters:    Size  Location     Type
  7751 ;;  f1              3   32[BANK0 ] float 
  7752 ;;  f2              3   35[BANK0 ] float 
  7753 ;; Auto vars:     Size  Location     Type
  7754 ;;  exp1            1   43[BANK0 ] unsigned char 
  7755 ;;  exp2            1   42[BANK0 ] unsigned char 
  7756 ;;  sign            1   41[BANK0 ] unsigned char 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  3   32[BANK0 ] float 
  7759 ;; Registers used:
  7760 ;;		wreg, status,2, status,0, pclath, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 1F/0
  7763 ;;		On exit  : 1F/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7766 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;Total ram usage:       12 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    1
  7773 ;; This function calls:
  7774 ;;		___ftpack
  7775 ;; This function is called by:
  7776 ;;		_sprintf
  7777 ;;		___ftsub
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           
  7782                           ;psect for function ___ftadd
  7783  0392                     ___ftadd:	
  7784                           
  7785                           ;incstack = 0
  7786                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7787  0392  0840               	movf	___ftadd@f1,w
  7788  0393  00C6               	movwf	??___ftadd
  7789  0394  0841               	movf	___ftadd@f1+1,w
  7790  0395  00C7               	movwf	??___ftadd+1
  7791  0396  0842               	movf	___ftadd@f1+2,w
  7792  0397  00C8               	movwf	??___ftadd+2
  7793  0398  1003               	clrc
  7794  0399  0D47               	rlf	??___ftadd+1,w
  7795  039A  0D48               	rlf	??___ftadd+2,w
  7796  039B  00CB               	movwf	___ftadd@exp1
  7797  039C  0843               	movf	___ftadd@f2,w
  7798  039D  00C6               	movwf	??___ftadd
  7799  039E  0844               	movf	___ftadd@f2+1,w
  7800  039F  00C7               	movwf	??___ftadd+1
  7801  03A0  0845               	movf	___ftadd@f2+2,w
  7802  03A1  00C8               	movwf	??___ftadd+2
  7803  03A2  1003               	clrc
  7804  03A3  0D47               	rlf	??___ftadd+1,w
  7805  03A4  0D48               	rlf	??___ftadd+2,w
  7806  03A5  00CA               	movwf	___ftadd@exp2
  7807  03A6  084B               	movf	___ftadd@exp1,w
  7808  03A7  1903               	btfsc	3,2
  7809  03A8  2BB5               	goto	l2125
  7810  03A9  084A               	movf	___ftadd@exp2,w
  7811  03AA  024B               	subwf	___ftadd@exp1,w
  7812  03AB  084A               	movf	___ftadd@exp2,w
  7813  03AC  1803               	skipnc
  7814  03AD  2BBD               	goto	L12
  7815  03AE  00C6               	movwf	??___ftadd
  7816  03AF  084B               	movf	___ftadd@exp1,w
  7817  03B0  02C6               	subwf	??___ftadd,f
  7818  03B1  3019               	movlw	25
  7819  03B2  0246               	subwf	??___ftadd,w
  7820  03B3  1C03               	skipc
  7821  03B4  2BBC               	goto	l2129
  7822  03B5                     l2125:	
  7823  03B5  0843               	movf	___ftadd@f2,w
  7824  03B6  00C0               	movwf	?___ftadd
  7825  03B7  0844               	movf	___ftadd@f2+1,w
  7826  03B8  00C1               	movwf	?___ftadd+1
  7827  03B9  0845               	movf	___ftadd@f2+2,w
  7828  03BA  00C2               	movwf	?___ftadd+2
  7829  03BB  0008               	return
  7830  03BC                     l2129:	
  7831  03BC  084A               	movf	___ftadd@exp2,w
  7832  03BD                     L12:	
  7833  03BD  1903               	btfsc	3,2
  7834  03BE  0008               	return
  7835  03BF  084B               	movf	___ftadd@exp1,w
  7836  03C0  024A               	subwf	___ftadd@exp2,w
  7837  03C1  1803               	skipnc
  7838  03C2  2BCB               	goto	l2135
  7839  03C3  084B               	movf	___ftadd@exp1,w
  7840  03C4  00C6               	movwf	??___ftadd
  7841  03C5  084A               	movf	___ftadd@exp2,w
  7842  03C6  02C6               	subwf	??___ftadd,f
  7843  03C7  3019               	movlw	25
  7844  03C8  0246               	subwf	??___ftadd,w
  7845  03C9  1803               	btfsc	3,0
  7846  03CA  0008               	return
  7847  03CB                     l2135:	
  7848  03CB  3006               	movlw	6
  7849  03CC  00C9               	movwf	___ftadd@sign
  7850  03CD  1BC2               	btfsc	___ftadd@f1+2,7
  7851  03CE  17C9               	bsf	___ftadd@sign,7
  7852  03CF  1BC5               	btfsc	___ftadd@f2+2,7
  7853  03D0  1749               	bsf	___ftadd@sign,6
  7854  03D1  17C1               	bsf	___ftadd@f1+1,7
  7855  03D2  01C2               	clrf	___ftadd@f1+2
  7856  03D3  17C4               	bsf	___ftadd@f2+1,7
  7857  03D4  01C5               	clrf	___ftadd@f2+2
  7858  03D5  084A               	movf	___ftadd@exp2,w
  7859  03D6  024B               	subwf	___ftadd@exp1,w
  7860  03D7  1803               	skipnc
  7861  03D8  2BF0               	goto	l2157
  7862  03D9                     l2147:	
  7863  03D9  35C3               	lslf	___ftadd@f2,f
  7864  03DA  0DC4               	rlf	___ftadd@f2+1,f
  7865  03DB  0DC5               	rlf	___ftadd@f2+2,f
  7866  03DC  03CA               	decf	___ftadd@exp2,f
  7867  03DD  084A               	movf	___ftadd@exp2,w
  7868  03DE  064B               	xorwf	___ftadd@exp1,w
  7869  03DF  1903               	skipnz
  7870  03E0  2BEB               	goto	l2155
  7871  03E1  03C9               	decf	___ftadd@sign,f
  7872  03E2  0849               	movf	___ftadd@sign,w
  7873  03E3  3907               	andlw	7
  7874  03E4  1903               	btfsc	3,2
  7875  03E5  2BEB               	goto	l2155
  7876  03E6  2BD9               	goto	l2147
  7877  03E7                     l2153:	
  7878  03E7  36C2               	lsrf	___ftadd@f1+2,f
  7879  03E8  0CC1               	rrf	___ftadd@f1+1,f
  7880  03E9  0CC0               	rrf	___ftadd@f1,f
  7881  03EA  0ACB               	incf	___ftadd@exp1,f
  7882  03EB                     l2155:	
  7883  03EB  084B               	movf	___ftadd@exp1,w
  7884  03EC  064A               	xorwf	___ftadd@exp2,w
  7885  03ED  1903               	btfsc	3,2
  7886  03EE  2C0A               	goto	l601
  7887  03EF  2BE7               	goto	l2153
  7888  03F0                     l2157:	
  7889  03F0  084B               	movf	___ftadd@exp1,w
  7890  03F1  024A               	subwf	___ftadd@exp2,w
  7891  03F2  1803               	skipnc
  7892  03F3  2C0A               	goto	l601
  7893  03F4                     l2159:	
  7894  03F4  35C0               	lslf	___ftadd@f1,f
  7895  03F5  0DC1               	rlf	___ftadd@f1+1,f
  7896  03F6  0DC2               	rlf	___ftadd@f1+2,f
  7897  03F7  03CB               	decf	___ftadd@exp1,f
  7898  03F8  084A               	movf	___ftadd@exp2,w
  7899  03F9  064B               	xorwf	___ftadd@exp1,w
  7900  03FA  1903               	skipnz
  7901  03FB  2C06               	goto	l2167
  7902  03FC  03C9               	decf	___ftadd@sign,f
  7903  03FD  0849               	movf	___ftadd@sign,w
  7904  03FE  3907               	andlw	7
  7905  03FF  1903               	btfsc	3,2
  7906  0400  2C06               	goto	l2167
  7907  0401  2BF4               	goto	l2159
  7908  0402                     l2165:	
  7909  0402  36C5               	lsrf	___ftadd@f2+2,f
  7910  0403  0CC4               	rrf	___ftadd@f2+1,f
  7911  0404  0CC3               	rrf	___ftadd@f2,f
  7912  0405  0ACA               	incf	___ftadd@exp2,f
  7913  0406                     l2167:	
  7914  0406  084B               	movf	___ftadd@exp1,w
  7915  0407  064A               	xorwf	___ftadd@exp2,w
  7916  0408  1D03               	skipz
  7917  0409  2C02               	goto	l2165
  7918  040A                     l601:	
  7919  040A  1FC9               	btfss	___ftadd@sign,7
  7920  040B  2C15               	goto	l2173
  7921  040C  30FF               	movlw	255
  7922  040D  06C0               	xorwf	___ftadd@f1,f
  7923  040E  06C1               	xorwf	___ftadd@f1+1,f
  7924  040F  06C2               	xorwf	___ftadd@f1+2,f
  7925  0410  0AC0               	incf	___ftadd@f1,f
  7926  0411  1903               	skipnz
  7927  0412  0AC1               	incf	___ftadd@f1+1,f
  7928  0413  1903               	skipnz
  7929  0414  0AC2               	incf	___ftadd@f1+2,f
  7930  0415                     l2173:	
  7931  0415  1F49               	btfss	___ftadd@sign,6
  7932  0416  2C1D               	goto	l2179
  7933  0417  2441  3183         	fcall	PL88	;call to abstracted procedure
  7934  0419  1903               	skipnz
  7935  041A  0AC4               	incf	___ftadd@f2+1,f
  7936  041B  1903               	skipnz
  7937  041C  0AC5               	incf	___ftadd@f2+2,f
  7938  041D                     l2179:	
  7939  041D  01C9               	clrf	___ftadd@sign
  7940  041E  0840               	movf	___ftadd@f1,w
  7941  041F  07C3               	addwf	___ftadd@f2,f
  7942  0420  0841               	movf	___ftadd@f1+1,w
  7943  0421  3DC4               	addwfc	___ftadd@f2+1,f
  7944  0422  0842               	movf	___ftadd@f1+2,w
  7945  0423  3DC5               	addwfc	___ftadd@f2+2,f
  7946  0424  1FC5               	btfss	___ftadd@f2+2,7
  7947  0425  2C2D               	goto	l2191
  7948  0426  2441               	fcall	PL88	;call to abstracted procedure
  7949  0427  1903               	skipnz
  7950  0428  0AC4               	incf	___ftadd@f2+1,f
  7951  0429  1903               	skipnz
  7952  042A  0AC5               	incf	___ftadd@f2+2,f
  7953  042B  01C9               	clrf	___ftadd@sign
  7954  042C  0AC9               	incf	___ftadd@sign,f
  7955  042D                     l2191:	
  7956  042D  0843               	movf	___ftadd@f2,w
  7957  042E  00F0               	movwf	___ftpack@arg
  7958  042F  0844               	movf	___ftadd@f2+1,w
  7959  0430  00F1               	movwf	___ftpack@arg+1
  7960  0431  0845               	movf	___ftadd@f2+2,w
  7961  0432  00F2               	movwf	___ftpack@arg+2
  7962  0433  084B               	movf	___ftadd@exp1,w
  7963  0434  00F3               	movwf	___ftpack@exp
  7964  0435  0849               	movf	___ftadd@sign,w
  7965  0436  00F4               	movwf	___ftpack@sign
  7966  0437  3186  26DF         	fcall	___ftpack
  7967  0439  0870               	movf	?___ftpack,w
  7968  043A  0020               	movlb	0	; select bank0
  7969  043B  00C0               	movwf	?___ftadd
  7970  043C  0871               	movf	?___ftpack+1,w
  7971  043D  00C1               	movwf	?___ftadd+1
  7972  043E  0872               	movf	?___ftpack+2,w
  7973  043F  00C2               	movwf	?___ftadd+2
  7974  0440  0008               	return
  7975  0441                     __end_of___ftadd:	
  7976  0441                     PL88:	
  7977  0441  30FF               	movlw	255
  7978  0442  06C3               	xorwf	___ftadd@f2,f
  7979  0443  06C4               	xorwf	___ftadd@f2+1,f
  7980  0444  06C5               	xorwf	___ftadd@f2+2,f
  7981  0445  0AC3               	incf	___ftadd@f2,f
  7982  0446  0008               	return
  7983  0447                     __end_ofPL88:	


Data Sizes:
    Strings     30
    Constant    118
    Data        0
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     63      70
    BANK1            80     25      45
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_2(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> aux(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> aux(BANK1[20]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _sprintf->___awdiv
    _sprintf->__div_to_l_
    _scale->___awdiv
    ___awdiv->___awmod
    ___wmul->___awdiv
    ___lbdiv->___lbmod
    ___ftmul->___awdiv
    ___lltoft->___ftpack
    ___awtoft->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_sprintf

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   44885
                                             61 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    36      5   35731
                                             50 BANK0     11     6      5
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               11     7      4    8445
                                             21 BANK0      8     4      4
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     932
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1042
                                              6 COMMON     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              14    10      4    6912
                                             21 BANK0     11     7      4
                            ___ftmul
                            ___lbdiv
                            ___lbmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2318
                                              0 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              5     4      1     318
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     321
                                              5 COMMON     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3664
                                              6 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMMON     9     3      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             5     1      4    1868
                                              8 COMMON     5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     477
                                              0 COMMON     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     411
                                             29 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    2971
                                             44 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2798
                                             32 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6     560
                                              0 COMMON     6     0      6
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2134
                                             21 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1912
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1746
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     5     3      2     376
                                              4 COMMON     5     3      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     180
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     760
                                              3 COMMON     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 COMMON     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___lbdiv (ARG)
       ___lbmod (ARG)
     ___lbmod (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3F      46       5       87.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     19      2D       7       56.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      81      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      81      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Dec 14 14:04:17 2022

                    __CFG_CP$OFF 0000                               PL2 0DA1                               PL4 079F  
                             PL6 0DB1                               PL8 07AD                     ___awdiv@sign 007B  
            ___wmul@multiplicand 0022                     ___ftadd@exp1 004B                     ___ftadd@exp2 004A  
                            PL10 0DB9                              PL20 07BE                              PL12 0DC2  
                            PL30 0E16                              PL22 0DE0                              PL14 0366  
                            PL40 0E35                              PL32 0E1D                              PL24 0DF1  
                            PL16 0DCA                              PL50 0E65                              PL42 07CF  
                            PL34 07C8                              PL26 0DF8                              PL18 07B7  
                            PL60 0E8A                              PL52 0E6B                              PL44 0E44  
                            PL36 0E25                              PL28 0E07                              PL70 0EB4  
                            PL62 0E95                              PL54 0E77                              PL46 0E52  
                            PL38 0E2D                      __CFG_LVP$ON 0000                              PL80 0EC8  
                            PL72 0EBA                              PL64 0EA0                              PL56 0E83  
                            PL48 0E58                              PL90 0371                              PL82 07EA  
                            PL74 07DC                              PL66 0EA7                              PL58 07D5  
                            PL92 0ECE                              PL84 0F5E                              PL76 0EC1  
                            PL68 0EAE                              PL94 0ED3                              PL86 07F1  
                            PL78 07E3                              PL96 07F8                              PL88 0441  
                            PL98 0ED8                     ___ftadd@sign 0049                              l120 057C  
                            l122 0581                              l124 0586                              l126 058B  
                            l222 084D                              l237 08D4                              l174 049F  
                            l601 040A                              l177 04A4                              l291 0BC6  
                            l619 0739                              l565 06E7                              l577 070C  
                            l693 06BA                     __CFG_CPD$OFF 0000                              _aux 00B9  
        __size_of_PMD_Initialize 0008                     ___awmod@sign 0075                     __CFG_BORV$LO 0000  
                            wreg 0009                      _sprintf$792 00A0                             PL100 07FC  
                   __CFG_ZCD$OFF 0000                     ___ftdiv@cntr 003E                     ___ftdiv@sign 0043  
                           l2011 057D                             l2015 0582                             l2103 0D76  
                           l2111 0D86                             l2025 0D07                             l3001 0BEE  
                           l2019 0587                             l2203 066E                             l2115 0D8E  
                           l2107 0D82                             l2125 03B5                             l2221 0682  
                           l2029 0D0D                             l2053 0D2D                             l3005 0C06  
                           l2135 03CB                             l2071 0D49                             l2063 0D3A  
                           l2047 0D24                             l3031 0C2A                             l3015 0C11  
                           l3023 0C1B                             l3007 0C09                             l2153 03E7  
                           l2129 03BC                             l2233 0690                             l2225 0686  
                           l3025 0C1F                             l3051 05B9                             l2155 03EB  
                           l2147 03D9                             l2075 0D4D                             l2091 0D64  
                           l2173 0415                             l2165 0402                             l2157 03F0  
                           l2237 0694                             l2253 06B5                             l2413 0CD9  
                           l2405 0C9D                             l3037 083A                             l2319 077A  
                           l2191 042D                             l2167 0406                             l2159 03F4  
                           l2511 0336                             l2503 0303                             l2263 06C2  
                           l2431 0D9F                             l2079 0D55                             l2095 0D6B  
                           l3039 0C33                             l3119 0497                             l3081 074C  
                           l2601 0F3E                             l3059 072B                             l2179 041D  
                           l2603 0F47                             l2531 035D                             l2523 0350  
                           l2267 06C5                             l2283 06DB                             l2275 06CB  
                           l2371 0615                             l2621 0FAE                             l2461 029D  
                           l2453 0286                             l2437 0264                             l2711 0523  
                           l3087 0762                             l2543 0EFB                             l2607 0F55  
                           l2519 0349                             l2439 0269                             l2199 0660  
                           l2633 0FD1                             l2529 0354                             l2481 02BD  
                           l2473 02B0                             l2539 0EEC                             l2379 063F  
                           l2395 0C74                             l2573 0F12                             l2629 0FCB  
                           l2645 0F74                             l2653 0F92                             l2661 0FE4  
                           l2469 02A9                             l2567 037E                             l2591 0F33  
                           l2575 0F17                             l2663 0FEE                             l2487 02D1  
                           l2479 02B4                             l2807 0917                             l2649 0F8C  
                           l2489 02D6                             l2921 0AEA                             l2905 0ABF  
                           l2913 0AD8                             l2761 0863                             l2739 058F  
                           l2595 0F3A                             l2907 0AD0                             l2851 09FE  
                           l2843 09D8                             l2835 099B                             l2827 096A  
                           l2755 0853                             l2781 08A3                             l2757 085A  
                           l2749 0848                             l2687 050B                             l1991 06F4  
                           l2951 0B2E                             l2943 0B1B                             l2855 0A0D  
                           l2839 09A9                             l2791 08DF                             l2783 08CF  
                           l1993 06FD                             l2937 0AFC                             l2929 0AF8  
                           l2865 0A30                             l2769 0892                             l2699 0517  
                           l1987 06EB                             l2955 0B58                             l2939 0B0D  
                           l2891 0AB7                             l2883 0A8A                             l2875 0A66  
                           l1997 070A                             l1989 06EF                             l2981 0B9C  
                           l2973 0B85                             l2869 0A64                             l2797 08EF  
                           l2789 08D6                             l1999 0702                             l2887 0AAF  
                           l2975 0B8F                             l2993 0BD3                             l2985 0BAE  
                           l2999 0BEB                             STR_1 1088                             STR_2 1076  
                           u3005 09B1                             _LATA 0016                             _LATB 0017  
                           u3015 09E1                             _LATC 0018                             u2305 06CE  
                           u3125 0AC7                             u3045 09FC                             u3135 0AE0  
                           u3065 0A83                             u3235 0BA8                             u2445 0294  
                           u3245 0BBE                             u3165 0B04                             u3415 0759  
                           u2535 0322                             u3175 0B16                             u3507 053F  
                           u1915 0D42                             u3517 0549                             u3285 0BE3  
                           u3527 056F                             u3295 0BFA                             u2665 0F1A  
                           u3457 049A                             u2755 0FC0                             u3467 04F9  
                           _PMD0 0796                             u3477 0469                             _PMD1 0797  
                           _PMD2 0798                             u3487 0473                             _PMD3 0799  
                           _PMD4 079A                             u3497 0535                             u1985 0D7C  
                           _PMD5 079B                             u2795 0F82                             u2965 092B  
                           _WPUA 0F39                             _WPUB 0F44                             _WPUC 0F4F  
                           _WPUE 0F65                     __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000  
              ?_Lcd_Write_String 0074                             _main 0479                     ___ftpack@arg 0070  
                   ___ftpack@exp 0073                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E                    __CFG_BOREN$ON 0000  
                           start 0002               ??_Lcd_Write_String 0076                  __end_of_Lcd_Cmd 0577  
                  __CFG_CSWEN$ON 0000                    __CFG_MCLRE$ON 0000                     ___ftmul@cntr 0033  
                   ___ftmul@sign 0034                     ___fttol@exp1 0049                     ___fttol@lval 0045  
 __size_of_OSCILLATOR_Initialize 0009    __end_of_OSCILLATOR_Initialize 0783                            ?_main 0070  
                __end_of___awdiv 0D5A                  __end_of___lbdiv 06C7                  __end_of___ftadd 0441  
                  __CFG_WDTE$OFF 0000                  __end_of___awmod 0D93                  __end_of___lbmod 06DF  
                __end_of___ftdiv 077A                  __end_of___ftneg 0FE2                  __end_of___lldiv 0FDA  
                __end_of___ftmul 06AF                            _T1CLK 0211                  ___awdiv@divisor 0076  
                          _T1CON 020E                  __end_of___llmod 0F9B                  __end_of___ftsub 0392  
                __end_of___fttol 0F5E                   __CFG_DEBUG$OFF 0000                  ___awdiv@counter 007A  
                          _OSCEN 0891                            _TMR1H 020D                            _TMR1L 020C  
        __size_of_Lcd_Set_Cursor 002F                            _TRISA 0011                            _TRISB 0012  
                          _TRISC 0013                     ___lltoft@exp 007C                    ___awtoft@sign 007B  
                __end_of_dpowers 1076                            _scale 0C38                  __end_of_isdigit 0DA1  
                          _t_low 0062                    ___ftpack@sign 0074                            status 0003  
                          wtemp0 007E                  __end_of_sprintf 0C38                  ___lbdiv@divisor 0075  
                   __end_ofPL100 0800                  ___lbdiv@counter 0077                 __end_of_Lcd_Init 0565  
               __end_of_Lcd_Port 058D                  __initialization 0447                     __end_of_main 0500  
                         ??_main 005D                    ___fttol@sign1 0044               __size_of_Lcd_Clear 0005  
           __size_of__tdiv_to_l_ 0070                 ___llmod@dividend 0074                           ?_scale 0035  
               ___awdiv@dividend 0078                 __end_of___awtoft 05CA                           _ANSELA 0F38  
                         _ANSELB 0F43                           _ANSELC 0F4E                 __end_of___ftpack 071D  
             __CFG_RSTOSC$HFINT1 0000                 __end_of___lltoft 1000                           _ODCONA 0F3A  
                         _ODCONB 0F45                           _ODCONC 0F50                   __CFG_WDTCCS$SC 0000  
                         _INLVLA 0F3C                           _INLVLB 0F47                           _INLVLC 0F52  
                         _INLVLE 0F68                           _OSCFRQ 0893                        ??_Lcd_Cmd 0071  
        __size_of_Lcd_Write_Char 0020                   __CFG_PWRTE$OFF 0000                 __end_of__powers_ 1027  
                         ___ftge 0EDD                           ___wmul 0D05                        ??___awdiv 007A  
                      ??___lbdiv 0076                        ??___ftadd 0046                   __CFG_STVREN$ON 0000  
                      ??___awmod 0074                        ??___lbmod 0071                        ??___ftdiv 003B  
                      ??___ftneg 0073                        ??___lldiv 0078                        ??___ftmul 002C  
                      ??___llmod 0078                        ??___ftsub 007E                        ??___fttol 0041  
                         _fround 05CA                           _t_high 0064                 ___awdiv@quotient 007C  
                ___awmod@divisor 0070                  ___awmod@counter 0074            ___ftmul@f3_as_product 0030  
                 _PMD_Initialize 05A7                        ??_isdigit 0070                        ??_sprintf 0057  
               ___lbdiv@dividend 0076                  Lcd_Set_Cursor@a 0074                  Lcd_Set_Cursor@b 0073  
                Lcd_Set_Cursor@y 0076                  Lcd_Set_Cursor@z 0075                _SYSTEM_Initialize 05A2  
                ___lbmod@divisor 0070          __end_of__initialization 0457                  ___lbmod@counter 0073  
                     ___ftadd@f1 0040                       ___ftadd@f2 0043                       ___ftge@ff1 0070  
                     ___ftge@ff2 0073               ?_SYSTEM_Initialize 0070                __end_of_Lcd_Clear 05A2  
                     ___ftdiv@f1 0038                       ___ftdiv@f2 0035                       ___ftdiv@f3 003F  
                     ___ftneg@f1 0070                       ___awtoft@c 0078                       ___ftmul@f1 0026  
                     ___ftmul@f2 0029                       ___ftsub@f1 004F                       ___ftsub@f2 004C  
                     ___fttol@f1 003D                   __pcstackCOMMON 0070              ??_SYSTEM_Initialize 0070  
                     ___lltoft@c 0078                    __end_of_scale 0D05                       __end_ofPL2 0DB1  
                     __end_ofPL4 07AD                       __end_ofPL6 0DB9                       __end_ofPL8 07B7  
               ___lbdiv@quotient 0078           __end_of_PMD_Initialize 05AF                   _Lcd_Set_Cursor 0500  
                     __div_to_l_ 02C6                        ?_Lcd_Init 0070                        ?_Lcd_Port 0070  
                __div_to_l_@exp1 0025                  __div_to_l_@cntr 0024                          ??_scale 007E  
      __end_of_SYSTEM_Initialize 05A7                  __div_to_l_@quot 0020                     sprintf@width 00B0  
                     __pbssBANK0 005F                       __pbssBANK1 00B9                    __div_to_l_@f1 0070  
                  __div_to_l_@f2 0073                       __pmaintext 0479                          ?___ftge 0070  
                        ?___wmul 0020                  __CFG_PPS1WAY$ON 0000                          ?_fround 0035  
      __size_of_Lcd_Write_String 0010                        ?___awtoft 0078                        ?___ftpack 0070  
         __end_of_Lcd_Set_Cursor 052F                  ?_PMD_Initialize 0070                        ?___lltoft 0078  
                        _OSCCON1 088D                          _OSCCON3 088F                          _OSCTUNE 0892  
                     ??_Lcd_Init 0073                          _SLRCONA 0F3B                          _SLRCONB 0F46  
                        _SLRCONC 0F51                       ??_Lcd_Port 0070                   _Lcd_Write_Char 0459  
                        _Lcd_Cmd 0565                __end_of__npowers_ 104E             __CFG_SCANE$available 0000  
                __size_of___ftge 002C                          ___awdiv 0D1A                          ___lbdiv 06AF  
                        ___ftadd 0392                          ___awmod 0D5A                          ___lbmod 06C7  
                        ___ftdiv 071D                          ___ftneg 0FDA                          ___lldiv 0F9B  
                __size_of___wmul 0015                          ___ftmul 0652                          ___llmod 0F65  
                        ___ftsub 0377                          ___fttol 0F09                       _fround$790 0039  
                     _fround$789 003C                       ??___awtoft 007B                       ??___ftpack 0075  
                __size_of_fround 0088                  ?_Lcd_Set_Cursor 0073                       ??___lltoft 007C  
                        __ptext1 0836                          __ptext2 0C38                          __ptext3 0D5A  
                        __ptext4 0D1A                          __ptext5 0D93                          __ptext6 05CA  
                        __ptext7 0D05                          __ptext8 06C7                          __ptext9 06AF  
                    ?__div_to_l_ 0070                          _dpowers 104E            _OSCILLATOR_Initialize 077A  
                        _isdigit 0D93                 ___awmod@dividend 0072         ??_PIN_MANAGER_Initialize 0070  
     __size_of_SYSTEM_Initialize 0005                          _sprintf 0836                          clrloop0 0251  
         __end_of_Lcd_Write_Char 0479             end_of_initialization 0457                  ___lldiv@divisor 0070  
                ___lldiv@counter 007C                        Lcd_Port@a 0070                     __pstringtext 1000  
                 __tdiv_to_l_@f1 0070                   __tdiv_to_l_@f2 0073            __CFG_WDTCPS$WDTCPS_31 0000  
                  ??__tdiv_to_l_ 0076                        _PORTAbits 000C                 ___lbmod@dividend 0072  
                      _TRISAbits 0011                 __CFG_FEXTOSC$OFF 0000                  ?_Lcd_Write_Char 0070  
              Lcd_Write_String@a 0074                Lcd_Write_String@i 0077                      ___lbmod@rem 0074  
                    ___ftdiv@exp 0042              __size_of__div_to_l_ 00A0                      ___ftmul@exp 002F  
                      _Lcd_Clear 059D                   __end_of___ftge 0F09                   __end_of___wmul 0D1A  
               _Lcd_Write_String 058D           ?_OSCILLATOR_Initialize 0070                   __end_of_fround 0652  
                    __end_ofPL10 0DC2                      __end_ofPL20 07C8                      __end_ofPL12 0DCA  
                    __end_ofPL30 0E1D                      __end_ofPL22 0DF1                      __end_ofPL14 0371  
                    __end_ofPL40 0E44                      __end_ofPL32 0E25                      __end_ofPL24 0DF8  
                    __end_ofPL16 0DE0                      __end_ofPL50 0E6B                      __end_ofPL42 07D5  
                    __end_ofPL34 07CF                      __end_ofPL26 0E07                      __end_ofPL18 07BE  
                    __end_ofPL60 0E95                      __end_ofPL52 0E77                      __end_ofPL44 0E52  
                    __end_ofPL36 0E2D                      __end_ofPL28 0E16                      __end_ofPL70 0EBA  
                    __end_ofPL62 0EA0                      __end_ofPL54 0E83                      __end_ofPL46 0E58  
                    __end_ofPL38 0E35                      __end_ofPL80 0ECE                      __end_ofPL72 0EC1  
                    __end_ofPL64 0EA7                      __end_ofPL56 0E8A                      __end_ofPL48 0E65  
                    __end_ofPL90 0377                      __end_ofPL82 07F1                      __end_ofPL74 07E3  
                    __end_ofPL66 0EAE                      __end_ofPL58 07DC                      __end_ofPL92 0ED3  
                    __end_ofPL84 0F65                      __end_ofPL76 0EC8                      __end_ofPL68 0EB4  
                    __end_ofPL94 0ED8                      __end_ofPL86 07F8                      __end_ofPL78 07EA  
                    __end_ofPL96 07FC                      __end_ofPL88 0447                      __end_ofPL98 0EDD  
            start_initialization 0447  __size_of_PIN_MANAGER_Initialize 001C              __end_of__tdiv_to_l_ 02C6  
              __size_of_Lcd_Init 0036                __size_of_Lcd_Port 0016                  ___llmod@divisor 0070  
                ___llmod@counter 0078                 __CFG_LPBOREN$OFF 0000                       ?_Lcd_Clear 0070  
               ??_PMD_Initialize 0070                         ??___ftge 0076                         ??___wmul 007E  
                Lcd_Write_Char@a 0073                  Lcd_Write_Char@y 0072                         ??_fround 007E  
                  sprintf@tmpval 00A8                       fround@prec 003F                __size_of___awtoft 001B  
              __size_of___ftpack 003E                __size_of___lltoft 001E                        ___latbits 0002  
                  __pcstackBANK0 0020                    __pcstackBANK1 00A0                         ?_Lcd_Cmd 0070  
                    sprintf@flag 00AC                      sprintf@fval 00B2                      sprintf@prec 00B5  
         _PIN_MANAGER_Initialize 0783                 ??_Lcd_Set_Cursor 0074                         ?___awdiv 0076  
                       ?___lbdiv 0075                         ?___ftadd 0040                         ?___awmod 0070  
                       ?___lbmod 0070                         ?___ftdiv 0035                         ?___ftneg 0070  
                       ?___lldiv 0070                         ?___ftmul 0026                         ?___llmod 0070  
                       ?___ftsub 004C                        __npowers_ 1027                         ?___fttol 003D  
                    __tdiv_to_l_ 0256                        _distancia 005F                     ??__div_to_l_ 0076  
                       ?_isdigit 0070                        _scale$791 0039                         ?_sprintf 0052  
                 __size_of_scale 00CD                   ___wmul@product 0024                         _LATAbits 0016  
                       _LATBbits 0017                        clear_ram0 0250                         Lcd_Cmd@a 0072  
             __end_of__div_to_l_ 0366                      ??_Lcd_Clear 0073                ___wmul@multiplier 0020  
               ??_Lcd_Write_Char 0071                         _Lcd_Init 052F                         _Lcd_Port 0577  
       __end_of_Lcd_Write_String 059D                 __size_of_Lcd_Cmd 0012          ??_OSCILLATOR_Initialize 0070  
               __size_of___awdiv 0040                 __size_of___lbdiv 0018                 __size_of___ftadd 00AF  
               __size_of___awmod 0039                 __size_of___lbmod 0018                 __size_of___ftdiv 005D  
               __size_of___ftneg 0008                 __size_of___lldiv 003F                 __size_of___ftmul 005D  
               __size_of___llmod 0036                 __size_of___ftsub 001B                 __size_of___fttol 0055  
                       ___awtoft 05AF                         ___ftpack 06DF                         ___lltoft 0FE2  
                    _isdigit$558 0070                       sprintf@exp 00AE                       sprintf@val 00A4  
               __size_of_isdigit 000E                         __ptext10 0652                         __ptext11 0256  
                       __ptext20 0EDD                         __ptext12 02C6                         __ptext21 071D  
                       __ptext13 0FE2                         __ptext30 0500                         __ptext22 05AF  
                       __ptext14 0F65                         __ptext31 052F                         __ptext23 06DF  
                       __ptext15 0F9B                         __ptext32 059D                         __ptext24 05A2  
                       __ptext16 0F09                         __ptext33 0565                         __ptext25 05A7  
                       __ptext17 0377                         __ptext34 0577                         __ptext26 0783  
                       __ptext18 0392                         __ptext27 077A                         __ptext19 0FDA  
                       __ptext28 058D                         __ptext29 0459                         __powers_ 1000  
               __size_of_sprintf 0402                    __size_of_main 0087             __CFG_WDTCWS$WDTCWS_7 0000  
                       isdigit@c 0071                         scale@scl 003C               Lcd_Write_Char@temp 0071  
                      sprintf@ap 00A3                 __tdiv_to_l_@exp1 0025                 __tdiv_to_l_@cntr 0024  
                      sprintf@sp 00B7                 __tdiv_to_l_@quot 0020                 ___lldiv@dividend 0074  
        ?_PIN_MANAGER_Initialize 0070                __CFG_CLKOUTEN$OFF 0000               Lcd_Set_Cursor@temp 0077  
                   ?__tdiv_to_l_ 0070                         sprintf@c 00B8                         sprintf@f 0052  
               ___lldiv@quotient 0078   __end_of_PIN_MANAGER_Initialize 079F  
